

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri May 31 19:44:23 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    58                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    59  0000                     
    60                           ; Version 2.05
    61                           ; Generated 20/12/2018 GMT
    62                           ; 
    63                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F45K22 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     
    95                           	psect	idataCOMRAM
    96  006F35                     __pidataCOMRAM:
    97                           	opt callstack 0
    98                           
    99                           ;initializer for _sensorVals
   100  006F35  78                 	db	120
   101  006F36  AA                 	db	170
   102  006F37  AA                 	db	170
   103  006F38  BE                 	db	190
   104  006F39  FA                 	db	250
   105                           
   106                           ;initializer for _raceDayColor
   107  006F3A  42                 	db	66
   108                           
   109                           ;initializer for _col
   110  006F3B  42                 	db	66
   111                           
   112                           ;initializer for _size
   113  006F3C  05                 	db	5
   114                           
   115                           ;initializer for _Rranges
   116  006F3D  8C                 	db	140
   117  006F3E  AA                 	db	170
   118  006F3F  AF                 	db	175
   119  006F40  D2                 	db	210
   120  006F41  FF                 	db	255
   121                           
   122                           	psect	idataBANK0
   123  007697                     __pidataBANK0:
   124                           	opt callstack 0
   125                           
   126                           ;initializer for capTouch@F6047
   127  007697  0A                 	db	10
   128  007698  53                 	db	83
   129  007699  61                 	db	97
   130  00769A  6E                 	db	110
   131  00769B  69                 	db	105
   132  00769C  63                 	db	99
   133  00769D  20                 	db	32
   134  00769E  77                 	db	119
   135  00769F  61                 	db	97
   136  0076A0  69                 	db	105
   137  0076A1  74                 	db	116
   138  0076A2  73                 	db	115
   139  0076A3  20                 	db	32
   140  0076A4  66                 	db	102
   141  0076A5  6F                 	db	111
   142  0076A6  72                 	db	114
   143  0076A7  20                 	db	32
   144  0076A8  61                 	db	97
   145  0076A9  20                 	db	32
   146  0076AA  74                 	db	116
   147  0076AB  6F                 	db	111
   148  0076AC  75                 	db	117
   149  0076AD  63                 	db	99
   150  0076AE  68                 	db	104
   151  0076AF  0A                 	db	10
   152  0076B0  00                 	db	0
   153                           
   154                           ;initializer for RCE@F6120
   155  0076B1  0A                 	db	10
   156  0076B2  53                 	db	83
   157  0076B3  61                 	db	97
   158  0076B4  6E                 	db	110
   159  0076B5  69                 	db	105
   160  0076B6  63                 	db	99
   161  0076B7  20                 	db	32
   162  0076B8  72                 	db	114
   163  0076B9  61                 	db	97
   164  0076BA  63                 	db	99
   165  0076BB  65                 	db	101
   166  0076BC  73                 	db	115
   167  0076BD  20                 	db	32
   168  0076BE  00                 	db	0
   169                           
   170                           ;initializer for readFromEEP@F6101
   171  0076BF  E4                 	db	low _LLranges
   172  0076C0  00                 	db	high _LLranges
   173  0076C1  DF                 	db	low _Lranges
   174  0076C2  00                 	db	high _Lranges
   175  0076C3  DA                 	db	low _Mranges
   176  0076C4  00                 	db	high _Mranges
   177  0076C5  58                 	db	low _Rranges
   178  0076C6  00                 	db	high _Rranges
   179  0076C7  D5                 	db	low _RRranges
   180  0076C8  00                 	db	high _RRranges
   181                           
   182                           ;initializer for writeToEEP@F6094
   183  0076C9  E4                 	db	low _LLranges
   184  0076CA  00                 	db	high _LLranges
   185  0076CB  DF                 	db	low _Lranges
   186  0076CC  00                 	db	high _Lranges
   187  0076CD  DA                 	db	low _Mranges
   188  0076CE  00                 	db	high _Mranges
   189  0076CF  58                 	db	low _Rranges
   190  0076D0  00                 	db	high _Rranges
   191  0076D1  D5                 	db	low _RRranges
   192  0076D2  00                 	db	high _RRranges
   193                           
   194                           ;initializer for ranges@F6085
   195  0076D3  E4                 	db	low _LLranges
   196  0076D4  00                 	db	high _LLranges
   197  0076D5  DF                 	db	low _Lranges
   198  0076D6  00                 	db	high _Lranges
   199  0076D7  DA                 	db	low _Mranges
   200  0076D8  00                 	db	high _Mranges
   201  0076D9  58                 	db	low _Rranges
   202  0076DA  00                 	db	high _Rranges
   203  0076DB  D5                 	db	low _RRranges
   204  0076DC  00                 	db	high _RRranges
   205                           
   206                           ;initializer for classifyColors@F6064
   207  0076DD  E4                 	db	low _LLranges
   208  0076DE  00                 	db	high _LLranges
   209  0076DF  DF                 	db	low _Lranges
   210  0076E0  00                 	db	high _Lranges
   211  0076E1  DA                 	db	low _Mranges
   212  0076E2  00                 	db	high _Mranges
   213  0076E3  58                 	db	low _Rranges
   214  0076E4  00                 	db	high _Rranges
   215  0076E5  D5                 	db	low _RRranges
   216  0076E6  00                 	db	high _RRranges
   217                           
   218                           ;initializer for calibrate@F6018
   219  0076E7  E4                 	db	low _LLranges
   220  0076E8  00                 	db	high _LLranges
   221  0076E9  DF                 	db	low _Lranges
   222  0076EA  00                 	db	high _Lranges
   223  0076EB  DA                 	db	low _Mranges
   224  0076EC  00                 	db	high _Mranges
   225  0076ED  58                 	db	low _Rranges
   226  0076EE  00                 	db	high _Rranges
   227  0076EF  D5                 	db	low _RRranges
   228  0076F0  00                 	db	high _RRranges
   229                           
   230                           ;initializer for _raceColor
   231  0076F1  30                 	db	48
   232  0076F2  30                 	db	48
   233  0076F3  30                 	db	48
   234  0076F4  30                 	db	48
   235  0076F5  31                 	db	49
   236  0076F6  30                 	db	48
   237  0076F7  30                 	db	48
   238  0076F8  30                 	db	48
   239  0076F9  00                 	db	0
   240                           
   241                           ;initializer for error@F6090
   242  0076FA  45                 	db	69
   243  0076FB  52                 	db	82
   244  0076FC  52                 	db	82
   245  0076FD  4F                 	db	79
   246  0076FE  52                 	db	82
   247  0076FF  0A                 	db	10
   248  007700  00                 	db	0
   249                           
   250                           ;initializer for _sensorChannels
   251  007701  0C                 	db	12
   252  007702  0A                 	db	10
   253  007703  08                 	db	8
   254  007704  09                 	db	9
   255  007705  0D                 	db	13
   256  007706  0F                 	db	15
   257                           
   258                           ;initializer for PRC@F6031
   259  007707  0A                 	db	10
   260  007708  53                 	db	83
   261  007709  65                 	db	101
   262  00770A  74                 	db	116
   263  00770B  00                 	db	0
   264                           
   265                           ;initializer for _RRranges
   266  00770C  8C                 	db	140
   267  00770D  B9                 	db	185
   268  00770E  C3                 	db	195
   269  00770F  C3                 	db	195
   270  007710  FF                 	db	255
   271                           
   272                           ;initializer for _Mranges
   273  007711  82                 	db	130
   274  007712  A5                 	db	165
   275  007713  AF                 	db	175
   276  007714  BC                 	db	188
   277  007715  FF                 	db	255
   278                           
   279                           ;initializer for _Lranges
   280  007716  82                 	db	130
   281  007717  B2                 	db	178
   282  007718  B4                 	db	180
   283  007719  BC                 	db	188
   284  00771A  FF                 	db	255
   285                           
   286                           ;initializer for _LLranges
   287  00771B  8C                 	db	140
   288  00771C  A8                 	db	168
   289  00771D  B9                 	db	185
   290  00771E  B9                 	db	185
   291  00771F  FF                 	db	255
   292                           
   293                           	psect	idataBANK1
   294  00705C                     __pidataBANK1:
   295                           	opt callstack 0
   296                           
   297                           ;initializer for PRC@F6029
   298  00705C  0A                 	db	10
   299  00705D  57                 	db	87
   300  00705E  68                 	db	104
   301  00705F  61                 	db	97
   302  007060  74                 	db	116
   303  007061  20                 	db	32
   304  007062  63                 	db	99
   305  007063  6F                 	db	111
   306  007064  6C                 	db	108
   307  007065  6F                 	db	111
   308  007066  72                 	db	114
   309  007067  20                 	db	32
   310  007068  73                 	db	115
   311  007069  68                 	db	104
   312  00706A  6F                 	db	111
   313  00706B  75                 	db	117
   314  00706C  6C                 	db	108
   315  00706D  64                 	db	100
   316  00706E  20                 	db	32
   317  00706F  73                 	db	115
   318  007070  61                 	db	97
   319  007071  6E                 	db	110
   320  007072  69                 	db	105
   321  007073  63                 	db	99
   322  007074  20                 	db	32
   323  007075  72                 	db	114
   324  007076  61                 	db	97
   325  007077  63                 	db	99
   326  007078  65                 	db	101
   327  007079  3F                 	db	63
   328  00707A  0A                 	db	10
   329  00707B  00                 	db	0
   330  0000                     _T6CON	set	3914
   331  0000                     _PR6	set	3915
   332  0000                     _TMR6	set	3916
   333  0000                     _ANSELCbits	set	3898
   334  0000                     _ANSELBbits	set	3897
   335  0000                     _ANSELE	set	3900
   336  0000                     _ANSELD	set	3899
   337  0000                     _ANSELC	set	3898
   338  0000                     _ANSELB	set	3897
   339  0000                     _ANSELA	set	3896
   340  0000                     _T4CONbits	set	3921
   341  0000                     _TMR4	set	3923
   342  0000                     _T4CON	set	3921
   343  0000                     _CCPTMRS1	set	3912
   344  0000                     _CCPR5L	set	3925
   345  0000                     _PR4	set	3922
   346  0000                     _CCP5CON	set	3924
   347  0000                     _CCPTMRS0	set	3913
   348  0000                     _FSR0	set	4073
   349  0000                     _TMR1	set	4046
   350  0000                     _T1CONbits	set	4045
   351  0000                     _T1CON	set	4045
   352  0000                     _PIR5bits	set	3966
   353  0000                     _PIR2bits	set	4001
   354  0000                     _EECON2	set	4007
   355  0000                     _INTCONbits	set	4082
   356  0000                     _EECON1bits	set	4006
   357  0000                     _EEDATA	set	4008
   358  0000                     _EEADR	set	4009
   359  0000                     _ADRESH	set	4036
   360  0000                     _TRISBbits	set	3987
   361  0000                     _TXREG	set	4013
   362  0000                     _PORTEbits	set	3972
   363  0000                     _PORTCbits	set	3970
   364  0000                     _RCREG	set	4014
   365  0000                     _ADCON0bits	set	4034
   366  0000                     _ADCON1	set	4033
   367  0000                     _ADCON2bits	set	4032
   368  0000                     _BAUDCON1bits	set	4024
   369  0000                     _SPBRGH1	set	4016
   370  0000                     _SPBRG1	set	4015
   371  0000                     _RCSTA1	set	4011
   372  0000                     _TXSTA1	set	4012
   373  0000                     _OSCCONbits	set	4051
   374  0000                     _TRISE	set	3990
   375  0000                     _LATE	set	3981
   376  0000                     _PORTE	set	3972
   377  0000                     _TRISD	set	3989
   378  0000                     _LATD	set	3980
   379  0000                     _PORTD	set	3971
   380  0000                     _TRISC	set	3988
   381  0000                     _LATC	set	3979
   382  0000                     _PORTC	set	3970
   383  0000                     _TRISB	set	3987
   384  0000                     _LATB	set	3978
   385  0000                     _PORTB	set	3969
   386  0000                     _TRISA	set	3986
   387  0000                     _LATA	set	3977
   388  0000                     _PORTA	set	3968
   389  0000                     _PIE5bits	set	3965
   390  0000                     _TRISEbits	set	3990
   391  0000                     _T2CONbits	set	4026
   392  0000                     _PIE1bits	set	3997
   393  0000                     _TMR2	set	4028
   394  0000                     _T2CON	set	4026
   395  0000                     _TRISCbits	set	3988
   396  0000                     _CCPR1L	set	4030
   397  0000                     _PR2	set	4027
   398  0000                     _CCP1CON	set	4029
   399  0000                     _PORTAbits	set	3968
   400  0000                     _PIR1bits	set	3998
   401                           
   402                           ; #config settings
   403  0000                     
   404                           	psect	cinit
   405  00748E                     __pcinit:
   406                           	opt callstack 0
   407  00748E                     start_initialization:
   408                           	opt callstack 0
   409  00748E                     __initialization:
   410                           	opt callstack 0
   411                           
   412                           ; Initialize objects allocated to BANK1 (32 bytes)
   413                           ; load TBLPTR registers with __pidataBANK1
   414  00748E  0E5C               	movlw	low __pidataBANK1
   415  007490  6EF6               	movwf	tblptrl,c
   416  007492  0E70               	movlw	high __pidataBANK1
   417  007494  6EF7               	movwf	tblptrh,c
   418  007496  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   419  007498  6EF8               	movwf	tblptru,c
   420  00749A  EE01  F000         	lfsr	0,__pdataBANK1
   421  00749E  EE10 F020          	lfsr	1,32
   422  0074A2                     copy_data0:
   423  0074A2  0009               	tblrd		*+
   424  0074A4  CFF5 FFEE          	movff	tablat,postinc0
   425  0074A8  50E5               	movf	postdec1,w,c
   426  0074AA  50E1               	movf	fsr1l,w,c
   427  0074AC  E1FA               	bnz	copy_data0
   428                           
   429                           ; Initialize objects allocated to BANK0 (137 bytes)
   430                           ; load TBLPTR registers with __pidataBANK0
   431  0074AE  0E97               	movlw	low __pidataBANK0
   432  0074B0  6EF6               	movwf	tblptrl,c
   433  0074B2  0E76               	movlw	high __pidataBANK0
   434  0074B4  6EF7               	movwf	tblptrh,c
   435  0074B6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   436  0074B8  6EF8               	movwf	tblptru,c
   437  0074BA  EE00  F060         	lfsr	0,__pdataBANK0
   438  0074BE  EE10 F089          	lfsr	1,137
   439  0074C2                     copy_data1:
   440  0074C2  0009               	tblrd		*+
   441  0074C4  CFF5 FFEE          	movff	tablat,postinc0
   442  0074C8  50E5               	movf	postdec1,w,c
   443  0074CA  50E1               	movf	fsr1l,w,c
   444  0074CC  E1FA               	bnz	copy_data1
   445                           
   446                           ; Initialize objects allocated to COMRAM (13 bytes)
   447                           ; load TBLPTR registers with __pidataCOMRAM
   448  0074CE  0E35               	movlw	low __pidataCOMRAM
   449  0074D0  6EF6               	movwf	tblptrl,c
   450  0074D2  0E6F               	movlw	high __pidataCOMRAM
   451  0074D4  6EF7               	movwf	tblptrh,c
   452  0074D6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   453  0074D8  6EF8               	movwf	tblptru,c
   454  0074DA  EE00  F050         	lfsr	0,__pdataCOMRAM
   455  0074DE  EE10 F00D          	lfsr	1,13
   456  0074E2                     copy_data2:
   457  0074E2  0009               	tblrd		*+
   458  0074E4  CFF5 FFEE          	movff	tablat,postinc0
   459  0074E8  50E5               	movf	postdec1,w,c
   460  0074EA  50E1               	movf	fsr1l,w,c
   461  0074EC  E1FA               	bnz	copy_data2
   462                           
   463                           ; Clear objects allocated to BANK0 (5 bytes)
   464  0074EE  0100               	movlb	0
   465  0074F0  6BED               	clrf	(__pbssBANK0+4)& (0+255),b
   466  0074F2  6BEC               	clrf	(__pbssBANK0+3)& (0+255),b
   467  0074F4  6BEB               	clrf	(__pbssBANK0+2)& (0+255),b
   468  0074F6  6BEA               	clrf	(__pbssBANK0+1)& (0+255),b
   469  0074F8  6BE9               	clrf	__pbssBANK0& (0+255),b
   470                           
   471                           ; Clear objects allocated to COMRAM (1 bytes)
   472  0074FA  6A5D               	clrf	__pbssCOMRAM& (0+255),c
   473  0074FC                     end_of_initialization:
   474                           	opt callstack 0
   475  0074FC                     __end_of__initialization:
   476                           	opt callstack 0
   477  0074FC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   478  0074FE  6EF8               	movwf	tblptru,c
   479  007500  0100               	movlb	0
   480  007502  EF89  F037         	goto	_main	;jump to C main() function
   481                           
   482                           	psect	bssCOMRAM
   483  00005D                     __pbssCOMRAM:
   484                           	opt callstack 0
   485  00005D                     determineDirection@rc:
   486                           	opt callstack 0
   487  00005D                     	ds	1
   488                           
   489                           	psect	dataCOMRAM
   490  000050                     __pdataCOMRAM:
   491                           	opt callstack 0
   492  000050                     _sensorVals:
   493                           	opt callstack 0
   494  000050                     	ds	5
   495  000055                     _raceDayColor:
   496                           	opt callstack 0
   497  000055                     	ds	1
   498  000056                     _col:
   499                           	opt callstack 0
   500  000056                     	ds	1
   501  000057                     _size:
   502                           	opt callstack 0
   503  000057                     	ds	1
   504  000058                     _Rranges:
   505                           	opt callstack 0
   506  000058                     	ds	5
   507                           
   508                           	psect	bssBANK0
   509  0000E9                     __pbssBANK0:
   510                           	opt callstack 0
   511  0000E9                     _colorsDetected:
   512                           	opt callstack 0
   513  0000E9                     	ds	5
   514                           
   515                           	psect	dataBANK0
   516  000060                     __pdataBANK0:
   517                           	opt callstack 0
   518  000060                     capTouch@F6047:
   519                           	opt callstack 0
   520  000060                     	ds	26
   521  00007A                     RCE@F6120:
   522                           	opt callstack 0
   523  00007A                     	ds	14
   524  000088                     readFromEEP@F6101:
   525                           	opt callstack 0
   526  000088                     	ds	10
   527  000092                     writeToEEP@F6094:
   528                           	opt callstack 0
   529  000092                     	ds	10
   530  00009C                     ranges@F6085:
   531                           	opt callstack 0
   532  00009C                     	ds	10
   533  0000A6                     classifyColors@F6064:
   534                           	opt callstack 0
   535  0000A6                     	ds	10
   536  0000B0                     calibrate@F6018:
   537                           	opt callstack 0
   538  0000B0                     	ds	10
   539  0000BA                     _raceColor:
   540                           	opt callstack 0
   541  0000BA                     	ds	9
   542  0000C3                     error@F6090:
   543                           	opt callstack 0
   544  0000C3                     	ds	7
   545  0000CA                     _sensorChannels:
   546                           	opt callstack 0
   547  0000CA                     	ds	6
   548  0000D0                     PRC@F6031:
   549                           	opt callstack 0
   550  0000D0                     	ds	5
   551  0000D5                     _RRranges:
   552                           	opt callstack 0
   553  0000D5                     	ds	5
   554  0000DA                     _Mranges:
   555                           	opt callstack 0
   556  0000DA                     	ds	5
   557  0000DF                     _Lranges:
   558                           	opt callstack 0
   559  0000DF                     	ds	5
   560  0000E4                     _LLranges:
   561                           	opt callstack 0
   562  0000E4                     	ds	5
   563                           
   564                           	psect	dataBANK1
   565  000100                     __pdataBANK1:
   566                           	opt callstack 0
   567  000100                     PRC@F6029:
   568                           	opt callstack 0
   569  000100                     	ds	32
   570                           
   571                           	psect	cstackCOMRAM
   572  000001                     __pcstackCOMRAM:
   573                           	opt callstack 0
   574  000001                     ??_classifyColors:
   575  000001                     ??_displayColorDetected:
   576  000001                     ??_writeToEEP:
   577  000001                     ??_setADCChannel:
   578  000001                     ??_readFromEEP:
   579  000001                     ?_abs:
   580                           	opt callstack 0
   581  000001                     ?___awdiv:
   582                           	opt callstack 0
   583  000001                     trans@s:
   584                           	opt callstack 0
   585  000001                     msDelay@delayInMs:
   586                           	opt callstack 0
   587  000001                     ___awdiv@dividend:
   588                           	opt callstack 0
   589  000001                     abs@a:
   590                           	opt callstack 0
   591                           
   592                           ; 2 bytes @ 0x0
   593  000001                     	ds	1
   594  000002                     sixSecDelay@a:
   595                           	opt callstack 0
   596  000002                     error@message:
   597                           	opt callstack 0
   598                           
   599                           ; 7 bytes @ 0x1
   600  000002                     	ds	1
   601  000003                     ??_abs:
   602  000003                     displayColorDetected@sensor:
   603                           	opt callstack 0
   604  000003                     setADCChannel@channel:
   605                           	opt callstack 0
   606  000003                     ___awdiv@divisor:
   607                           	opt callstack 0
   608  000003                     writeToEEP@rs:
   609                           	opt callstack 0
   610  000003                     readFromEEP@rs:
   611                           	opt callstack 0
   612                           
   613                           ; 10 bytes @ 0x2
   614  000003                     	ds	1
   615  000004                     ??_aveSensor:
   616                           
   617                           ; 1 bytes @ 0x3
   618  000004                     	ds	1
   619  000005                     ___awdiv@counter:
   620                           	opt callstack 0
   621  000005                     classifyColors@sensorRanges:
   622                           	opt callstack 0
   623                           
   624                           ; 10 bytes @ 0x4
   625  000005                     	ds	1
   626  000006                     aveSensor@s:
   627                           	opt callstack 0
   628  000006                     ___awdiv@sign:
   629                           	opt callstack 0
   630                           
   631                           ; 1 bytes @ 0x5
   632  000006                     	ds	1
   633  000007                     aveSensor@measurements:
   634                           	opt callstack 0
   635  000007                     ___awdiv@quotient:
   636                           	opt callstack 0
   637                           
   638                           ; 2 bytes @ 0x6
   639  000007                     	ds	2
   640  000009                     aveSensor@result:
   641                           	opt callstack 0
   642  000009                     error@a:
   643                           	opt callstack 0
   644                           
   645                           ; 1 bytes @ 0x8
   646  000009                     	ds	1
   647  00000A                     ??_PRC:
   648  00000A                     aveSensor@a:
   649                           	opt callstack 0
   650                           
   651                           ; 1 bytes @ 0x9
   652  00000A                     	ds	1
   653  00000B                     ??_readAllSensors:
   654  00000B                     capTouch@message:
   655                           	opt callstack 0
   656                           
   657                           ; 26 bytes @ 0xA
   658  00000B                     	ds	1
   659  00000C                     PRC@message:
   660                           	opt callstack 0
   661                           
   662                           ; 32 bytes @ 0xB
   663  00000C                     	ds	1
   664  00000D                     writeToEEP@address:
   665                           	opt callstack 0
   666  00000D                     readFromEEP@address:
   667                           	opt callstack 0
   668  00000D                     readAllSensors@tempSensorVals:
   669                           	opt callstack 0
   670                           
   671                           ; 5 bytes @ 0xC
   672  00000D                     	ds	1
   673  00000E                     writeToEEP@a:
   674                           	opt callstack 0
   675  00000E                     readFromEEP@a:
   676                           	opt callstack 0
   677                           
   678                           ; 1 bytes @ 0xD
   679  00000E                     	ds	1
   680  00000F                     classifyColors@a:
   681                           	opt callstack 0
   682  00000F                     writeToEEP@b:
   683                           	opt callstack 0
   684  00000F                     readFromEEP@b:
   685                           	opt callstack 0
   686                           
   687                           ; 1 bytes @ 0xE
   688  00000F                     	ds	1
   689  000010                     ??_ranges:
   690  000010                     
   691                           ; 1 bytes @ 0xF
   692  000010                     	ds	2
   693  000012                     readAllSensors@a:
   694                           	opt callstack 0
   695  000012                     ranges@rangeArray:
   696                           	opt callstack 0
   697                           
   698                           ; 10 bytes @ 0x11
   699  000012                     	ds	1
   700  000013                     
   701                           ; 1 bytes @ 0x12
   702  000013                     	ds	1
   703  000014                     pyCal@a:
   704                           	opt callstack 0
   705                           
   706                           ; 1 bytes @ 0x13
   707  000014                     	ds	8
   708  00001C                     ranges@b:
   709                           	opt callstack 0
   710                           
   711                           ; 1 bytes @ 0x1B
   712  00001C                     	ds	1
   713  00001D                     ranges@a:
   714                           	opt callstack 0
   715                           
   716                           ; 1 bytes @ 0x1C
   717  00001D                     	ds	1
   718  00001E                     ??_calibrate:
   719                           
   720                           ; 1 bytes @ 0x1D
   721  00001E                     	ds	2
   722  000020                     calibrate@rangeArray:
   723                           	opt callstack 0
   724                           
   725                           ; 10 bytes @ 0x1F
   726  000020                     	ds	7
   727  000027                     capTouch@touch1:
   728                           	opt callstack 0
   729                           
   730                           ; 1 bytes @ 0x26
   731  000027                     	ds	1
   732  000028                     capTouch@touch2:
   733                           	opt callstack 0
   734                           
   735                           ; 1 bytes @ 0x27
   736  000028                     	ds	1
   737  000029                     capTouch@a:
   738                           	opt callstack 0
   739                           
   740                           ; 1 bytes @ 0x28
   741  000029                     	ds	1
   742  00002A                     calibrate@samples:
   743                           	opt callstack 0
   744                           
   745                           ; 1 bytes @ 0x29
   746  00002A                     	ds	1
   747  00002B                     calibrate@samples_1256:
   748                           	opt callstack 0
   749                           
   750                           ; 1 bytes @ 0x2A
   751  00002B                     	ds	1
   752  00002C                     calibrate@samples_1257:
   753                           	opt callstack 0
   754  00002C                     PRC@message2:
   755                           	opt callstack 0
   756                           
   757                           ; 5 bytes @ 0x2B
   758  00002C                     	ds	1
   759  00002D                     calibrate@samples_1258:
   760                           	opt callstack 0
   761                           
   762                           ; 1 bytes @ 0x2C
   763  00002D                     	ds	1
   764  00002E                     calibrate@samples_1259:
   765                           	opt callstack 0
   766                           
   767                           ; 1 bytes @ 0x2D
   768  00002E                     	ds	1
   769  00002F                     calibrate@a:
   770                           	opt callstack 0
   771                           
   772                           ; 1 bytes @ 0x2E
   773  00002F                     	ds	1
   774  000030                     calibrate@b:
   775                           	opt callstack 0
   776                           
   777                           ; 1 bytes @ 0x2F
   778  000030                     	ds	1
   779  000031                     calibrate@temp:
   780                           	opt callstack 0
   781  000031                     PRC@a:
   782                           	opt callstack 0
   783                           
   784                           ; 1 bytes @ 0x30
   785  000031                     	ds	1
   786  000032                     PRC@a_1266:
   787                           	opt callstack 0
   788                           
   789                           ; 1 bytes @ 0x31
   790  000032                     	ds	1
   791  000033                     PRC@a_1267:
   792                           	opt callstack 0
   793                           
   794                           ; 1 bytes @ 0x32
   795  000033                     	ds	1
   796  000034                     PRC@a_1268:
   797                           	opt callstack 0
   798                           
   799                           ; 1 bytes @ 0x33
   800  000034                     	ds	1
   801  000035                     PRC@a_1269:
   802                           	opt callstack 0
   803                           
   804                           ; 1 bytes @ 0x34
   805  000035                     	ds	1
   806  000036                     PRC@a_1270:
   807                           	opt callstack 0
   808                           
   809                           ; 1 bytes @ 0x35
   810  000036                     	ds	1
   811  000037                     PRC@a_1271:
   812                           	opt callstack 0
   813                           
   814                           ; 1 bytes @ 0x36
   815  000037                     	ds	1
   816  000038                     PRC@a_1272:
   817                           	opt callstack 0
   818                           
   819                           ; 1 bytes @ 0x37
   820  000038                     	ds	1
   821  000039                     PRC@a_1273:
   822                           	opt callstack 0
   823                           
   824                           ; 1 bytes @ 0x38
   825  000039                     	ds	1
   826  00003A                     ??_RCE:
   827                           
   828                           ; 1 bytes @ 0x39
   829  00003A                     	ds	2
   830  00003C                     RCE@message:
   831                           	opt callstack 0
   832                           
   833                           ; 14 bytes @ 0x3B
   834  00003C                     	ds	14
   835  00004A                     RCE@commandReceived:
   836                           	opt callstack 0
   837                           
   838                           ; 3 bytes @ 0x49
   839  00004A                     	ds	3
   840  00004D                     RCE@nCharsReceived:
   841                           	opt callstack 0
   842                           
   843                           ; 1 bytes @ 0x4C
   844  00004D                     	ds	1
   845  00004E                     RCE@a:
   846                           	opt callstack 0
   847                           
   848                           ; 1 bytes @ 0x4D
   849  00004E                     	ds	1
   850  00004F                     RCE@a_1465:
   851                           	opt callstack 0
   852                           
   853                           ; 1 bytes @ 0x4E
   854  00004F                     	ds	1
   855  000050                     
   856                           ; 1 bytes @ 0x4F
   857 ;;
   858 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   859 ;;
   860 ;; *************** function _main *****************
   861 ;; Defined at:
   862 ;;		line 96 in file "sanic.c"
   863 ;; Parameters:    Size  Location     Type
   864 ;;		None
   865 ;; Auto vars:     Size  Location     Type
   866 ;;		None
   867 ;; Return value:  Size  Location     Type
   868 ;;                  1    wreg      void 
   869 ;; Registers used:
   870 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   871 ;; Tracked objects:
   872 ;;		On entry : 0/0
   873 ;;		On exit  : 0/0
   874 ;;		Unchanged: 0/0
   875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   876 ;;      Params:         0       0       0       0       0       0       0
   877 ;;      Locals:         0       0       0       0       0       0       0
   878 ;;      Temps:          0       0       0       0       0       0       0
   879 ;;      Totals:         0       0       0       0       0       0       0
   880 ;;Total ram usage:        0 bytes
   881 ;; Hardware stack levels required when called:    5
   882 ;; This function calls:
   883 ;;		_RCE
   884 ;;		_init
   885 ;; This function is called by:
   886 ;;		Startup code after reset
   887 ;; This function uses a non-reentrant model
   888 ;;
   889                           
   890                           	psect	text0
   891  006F12                     __ptext0:
   892                           	opt callstack 0
   893  006F12                     _main:
   894                           	opt callstack 26
   895                           
   896                           ;sanic.c: 113:     init();
   897                           
   898                           ;incstack = 0
   899  006F12  EC10  F038         	call	_init	;wreg free
   900                           
   901                           ;sanic.c: 114:     RCE();
   902  006F16  EC39  F03D         	call	_RCE	;wreg free
   903  006F1A                     l561:
   904  006F1A  D7FF               	goto	l561
   905  006F1C                     __end_of_main:
   906                           	opt callstack 0
   907                           
   908 ;; *************** function _init *****************
   909 ;; Defined at:
   910 ;;		line 125 in file "sanic.c"
   911 ;; Parameters:    Size  Location     Type
   912 ;;		None
   913 ;; Auto vars:     Size  Location     Type
   914 ;;		None
   915 ;; Return value:  Size  Location     Type
   916 ;;                  1    wreg      void 
   917 ;; Registers used:
   918 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   919 ;; Tracked objects:
   920 ;;		On entry : 0/0
   921 ;;		On exit  : 0/0
   922 ;;		Unchanged: 0/0
   923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   924 ;;      Params:         0       0       0       0       0       0       0
   925 ;;      Locals:         0       0       0       0       0       0       0
   926 ;;      Temps:          0       0       0       0       0       0       0
   927 ;;      Totals:         0       0       0       0       0       0       0
   928 ;;Total ram usage:        0 bytes
   929 ;; Hardware stack levels used:    1
   930 ;; Hardware stack levels required when called:    2
   931 ;; This function calls:
   932 ;;		_clearPorts
   933 ;;		_readFromEEP
   934 ;;		_setupADC
   935 ;;		_setupOSC
   936 ;;		_setupSerial
   937 ;; This function is called by:
   938 ;;		_main
   939 ;; This function uses a non-reentrant model
   940 ;;
   941                           
   942                           	psect	text1
   943  007020                     __ptext1:
   944                           	opt callstack 0
   945  007020                     _init:
   946                           	opt callstack 28
   947                           
   948                           ;sanic.c: 126:     raceColor[3] = 1;
   949                           
   950                           ;incstack = 0
   951  007020  0E01               	movlw	1
   952  007022  0100               	movlb	0	; () banked
   953  007024  6FBD               	movwf	(_raceColor+3)& (0+255),b
   954                           
   955                           ; BSR set to: 0
   956                           ;sanic.c: 127:     setupOSC();
   957  007026  EC84  F037         	call	_setupOSC	;wreg free
   958                           
   959                           ;sanic.c: 128:     clearPorts();
   960  00702A  EC7E  F039         	call	_clearPorts	;wreg free
   961                           
   962                           ;sanic.c: 129:     setupSerial();
   963  00702E  EC71  F038         	call	_setupSerial	;wreg free
   964                           
   965                           ;sanic.c: 130:     setupADC();
   966  007032  EC3E  F038         	call	_setupADC	;wreg free
   967                           
   968                           ;sanic.c: 131:     readFromEEP();
   969  007036  ECAB  F039         	call	_readFromEEP	;wreg free
   970  00703A  0012               	return		;funcret
   971  00703C                     __end_of_init:
   972                           	opt callstack 0
   973                           
   974 ;; *************** function _setupSerial *****************
   975 ;; Defined at:
   976 ;;		line 97 in file "./functions.c"
   977 ;; Parameters:    Size  Location     Type
   978 ;;		None
   979 ;; Auto vars:     Size  Location     Type
   980 ;;		None
   981 ;; Return value:  Size  Location     Type
   982 ;;                  1    wreg      void 
   983 ;; Registers used:
   984 ;;		wreg, status,2
   985 ;; Tracked objects:
   986 ;;		On entry : 0/0
   987 ;;		On exit  : 0/0
   988 ;;		Unchanged: 0/0
   989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   990 ;;      Params:         0       0       0       0       0       0       0
   991 ;;      Locals:         0       0       0       0       0       0       0
   992 ;;      Temps:          0       0       0       0       0       0       0
   993 ;;      Totals:         0       0       0       0       0       0       0
   994 ;;Total ram usage:        0 bytes
   995 ;; Hardware stack levels used:    1
   996 ;; This function calls:
   997 ;;		Nothing
   998 ;; This function is called by:
   999 ;;		_init
  1000 ;; This function uses a non-reentrant model
  1001 ;;
  1002                           
  1003                           	psect	text2
  1004  0070E2                     __ptext2:
  1005                           	opt callstack 0
  1006  0070E2                     _setupSerial:
  1007                           	opt callstack 29
  1008                           
  1009                           ;./functions.c: 99:     PIE1bits.RC1IE = 0;
  1010                           
  1011                           ;incstack = 0
  1012  0070E2  9A9D               	bcf	3997,5,c	;volatile
  1013                           
  1014                           ;./functions.c: 100:     PIE1bits.TX1IE = 0;
  1015  0070E4  989D               	bcf	3997,4,c	;volatile
  1016                           
  1017                           ;./functions.c: 101:     PIR1bits.RCIF = 0;
  1018  0070E6  9A9E               	bcf	3998,5,c	;volatile
  1019                           
  1020                           ;./functions.c: 103:     FSR0 = 0;
  1021  0070E8  0E00               	movlw	0
  1022  0070EA  6EEA               	movwf	fsr0h,c	;volatile
  1023  0070EC  0E00               	movlw	0
  1024  0070EE  6EE9               	movwf	fsr0l,c	;volatile
  1025                           
  1026                           ;./functions.c: 104:     TXSTA1 = 0b00100100;
  1027  0070F0  0E24               	movlw	36
  1028  0070F2  6EAC               	movwf	4012,c	;volatile
  1029                           
  1030                           ;./functions.c: 105:     RCSTA1 = 0b10010000;
  1031  0070F4  0E90               	movlw	144
  1032  0070F6  6EAB               	movwf	4011,c	;volatile
  1033                           
  1034                           ;./functions.c: 107:     SPBRG1 = 25;
  1035  0070F8  0E19               	movlw	25
  1036  0070FA  6EAF               	movwf	4015,c	;volatile
  1037                           
  1038                           ;./functions.c: 108:     SPBRGH1 = 0;
  1039  0070FC  0E00               	movlw	0
  1040  0070FE  6EB0               	movwf	4016,c	;volatile
  1041                           
  1042                           ;./functions.c: 109:     BAUDCON1bits.BRG16 = 0;
  1043  007100  96B8               	bcf	4024,3,c	;volatile
  1044                           
  1045                           ;./functions.c: 110:     TRISCbits.RC6 = 1;
  1046  007102  8C94               	bsf	3988,6,c	;volatile
  1047                           
  1048                           ;./functions.c: 111:     TRISCbits.RC7 = 1;
  1049  007104  8E94               	bsf	3988,7,c	;volatile
  1050                           
  1051                           ;./functions.c: 113:     PORTC = 0;
  1052  007106  0E00               	movlw	0
  1053  007108  6E82               	movwf	3970,c	;volatile
  1054                           
  1055                           ;./functions.c: 114:     ANSELC = 0;
  1056  00710A  0E00               	movlw	0
  1057  00710C  010F               	movlb	15	; () banked
  1058  00710E  6F3A               	movwf	58,b	;volatile
  1059                           
  1060                           ; BSR set to: 15
  1061  007110  0012               	return		;funcret
  1062  007112                     __end_of_setupSerial:
  1063                           	opt callstack 0
  1064                           
  1065 ;; *************** function _setupOSC *****************
  1066 ;; Defined at:
  1067 ;;		line 91 in file "./functions.c"
  1068 ;; Parameters:    Size  Location     Type
  1069 ;;		None
  1070 ;; Auto vars:     Size  Location     Type
  1071 ;;		None
  1072 ;; Return value:  Size  Location     Type
  1073 ;;                  1    wreg      void 
  1074 ;; Registers used:
  1075 ;;		wreg, status,2
  1076 ;; Tracked objects:
  1077 ;;		On entry : 0/0
  1078 ;;		On exit  : 0/0
  1079 ;;		Unchanged: 0/0
  1080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1081 ;;      Params:         0       0       0       0       0       0       0
  1082 ;;      Locals:         0       0       0       0       0       0       0
  1083 ;;      Temps:          0       0       0       0       0       0       0
  1084 ;;      Totals:         0       0       0       0       0       0       0
  1085 ;;Total ram usage:        0 bytes
  1086 ;; Hardware stack levels used:    1
  1087 ;; This function calls:
  1088 ;;		Nothing
  1089 ;; This function is called by:
  1090 ;;		_init
  1091 ;; This function uses a non-reentrant model
  1092 ;;
  1093                           
  1094                           	psect	text3
  1095  006F08                     __ptext3:
  1096                           	opt callstack 0
  1097  006F08                     _setupOSC:
  1098                           	opt callstack 29
  1099                           
  1100                           ;./functions.c: 93:     OSCCONbits.IRCF = 0b101;
  1101                           
  1102                           ; BSR set to: 15
  1103                           ;incstack = 0
  1104  006F08  50D3               	movf	4051,w,c	;volatile
  1105  006F0A  0B8F               	andlw	-113
  1106  006F0C  0950               	iorlw	80
  1107  006F0E  6ED3               	movwf	4051,c	;volatile
  1108  006F10  0012               	return		;funcret
  1109  006F12                     __end_of_setupOSC:
  1110                           	opt callstack 0
  1111                           
  1112 ;; *************** function _readFromEEP *****************
  1113 ;; Defined at:
  1114 ;;		line 933 in file "./functions.c"
  1115 ;; Parameters:    Size  Location     Type
  1116 ;;		None
  1117 ;; Auto vars:     Size  Location     Type
  1118 ;;  b               1   14[COMRAM] unsigned char 
  1119 ;;  a               1   13[COMRAM] unsigned char 
  1120 ;;  rs             10    2[COMRAM] PTR unsigned char [5]
  1121 ;;		 -> RRranges(5), Rranges(5), Mranges(5), Lranges(5), 
  1122 ;;		 -> LLranges(5), 
  1123 ;;  address         1   12[COMRAM] unsigned char 
  1124 ;; Return value:  Size  Location     Type
  1125 ;;                  1    wreg      void 
  1126 ;; Registers used:
  1127 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1128 ;; Tracked objects:
  1129 ;;		On entry : 0/0
  1130 ;;		On exit  : 0/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1133 ;;      Params:         0       0       0       0       0       0       0
  1134 ;;      Locals:        13       0       0       0       0       0       0
  1135 ;;      Temps:          2       0       0       0       0       0       0
  1136 ;;      Totals:        15       0       0       0       0       0       0
  1137 ;;Total ram usage:       15 bytes
  1138 ;; Hardware stack levels used:    1
  1139 ;; Hardware stack levels required when called:    1
  1140 ;; This function calls:
  1141 ;;		_EE_READ
  1142 ;; This function is called by:
  1143 ;;		_init
  1144 ;; This function uses a non-reentrant model
  1145 ;;
  1146                           
  1147                           	psect	text4
  1148  007356                     __ptext4:
  1149                           	opt callstack 0
  1150  007356                     _readFromEEP:
  1151                           	opt callstack 28
  1152                           
  1153                           ;./functions.c: 934:     unsigned char* rs[] = {LLranges, Lranges, Mranges, Rranges, RRr
      +                          anges};
  1154                           
  1155                           ;incstack = 0
  1156  007356  EE20  F088         	lfsr	2,readFromEEP@F6101
  1157  00735A  EE10  F003         	lfsr	1,readFromEEP@rs
  1158  00735E  0E09               	movlw	9
  1159  007360                     u2451:
  1160  007360  CFDB FFE3          	movff	plusw2,plusw1
  1161  007364  06E8               	decf	wreg,f,c
  1162  007366  E2FC               	bc	u2451
  1163                           
  1164                           ;./functions.c: 935:     unsigned char address = 0;
  1165  007368  0E00               	movlw	0
  1166  00736A  6E0D               	movwf	readFromEEP@address,c
  1167                           
  1168                           ;./functions.c: 936:     EECON1bits.RD = 1;
  1169  00736C  80A6               	bsf	4006,0,c	;volsfr
  1170                           
  1171                           ;./functions.c: 938:     for (unsigned char a = 0; a < 5; a++){
  1172  00736E  0E00               	movlw	0
  1173  007370  6E0E               	movwf	readFromEEP@a,c
  1174  007372                     l3525:
  1175                           
  1176                           ;./functions.c: 939:         for (unsigned char b = 0; b< 5; b++){
  1177  007372  0E00               	movlw	0
  1178  007374  6E0F               	movwf	readFromEEP@b,c
  1179  007376                     l531:
  1180                           
  1181                           ;./functions.c: 940:             EEADR = address++;
  1182  007376  C00D  FFA9         	movff	readFromEEP@address,4009	;volatile
  1183  00737A  2A0D               	incf	readFromEEP@address,f,c
  1184                           
  1185                           ;./functions.c: 941:             rs[a][b] = EE_READ();
  1186  00737C  500E               	movf	readFromEEP@a,w,c
  1187  00737E  0D02               	mullw	2
  1188  007380  0E03               	movlw	low readFromEEP@rs
  1189  007382  24F3               	addwf	prodl,w,c
  1190  007384  6ED9               	movwf	fsr2l,c
  1191  007386  0E00               	movlw	high readFromEEP@rs
  1192  007388  20F4               	addwfc	prodh,w,c
  1193  00738A  6EDA               	movwf	fsr2h,c
  1194  00738C  CFDE F001          	movff	postinc2,??_readFromEEP
  1195  007390  CFDD F002          	movff	postdec2,??_readFromEEP+1
  1196  007394  500F               	movf	readFromEEP@b,w,c
  1197  007396  2401               	addwf	??_readFromEEP,w,c
  1198  007398  6ED9               	movwf	fsr2l,c
  1199  00739A  0E00               	movlw	0
  1200  00739C  2002               	addwfc	??_readFromEEP+1,w,c
  1201  00739E  6EDA               	movwf	fsr2h,c
  1202  0073A0  EC7F  F037         	call	_EE_READ	;wreg free
  1203  0073A4  6EDF               	movwf	indf2,c
  1204                           
  1205                           ;./functions.c: 942:         }
  1206  0073A6  2A0F               	incf	readFromEEP@b,f,c
  1207  0073A8  0E04               	movlw	4
  1208  0073AA  640F               	cpfsgt	readFromEEP@b,c
  1209  0073AC  D7E4               	goto	l531
  1210                           
  1211                           ;./functions.c: 943:     }
  1212  0073AE  2A0E               	incf	readFromEEP@a,f,c
  1213  0073B0  0E04               	movlw	4
  1214  0073B2  640E               	cpfsgt	readFromEEP@a,c
  1215  0073B4  D7DE               	goto	l3525
  1216  0073B6  0012               	return	
  1217  0073B8                     __end_of_readFromEEP:
  1218                           	opt callstack 0
  1219                           
  1220 ;; *************** function _EE_READ *****************
  1221 ;; Defined at:
  1222 ;;		line 947 in file "./functions.c"
  1223 ;; Parameters:    Size  Location     Type
  1224 ;;		None
  1225 ;; Auto vars:     Size  Location     Type
  1226 ;;		None
  1227 ;; Return value:  Size  Location     Type
  1228 ;;                  1    wreg      unsigned char 
  1229 ;; Registers used:
  1230 ;;		wreg, status,2
  1231 ;; Tracked objects:
  1232 ;;		On entry : 0/0
  1233 ;;		On exit  : 0/0
  1234 ;;		Unchanged: 0/0
  1235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1236 ;;      Params:         0       0       0       0       0       0       0
  1237 ;;      Locals:         0       0       0       0       0       0       0
  1238 ;;      Temps:          0       0       0       0       0       0       0
  1239 ;;      Totals:         0       0       0       0       0       0       0
  1240 ;;Total ram usage:        0 bytes
  1241 ;; Hardware stack levels used:    1
  1242 ;; This function calls:
  1243 ;;		Nothing
  1244 ;; This function is called by:
  1245 ;;		_readFromEEP
  1246 ;; This function uses a non-reentrant model
  1247 ;;
  1248                           
  1249                           	psect	text5
  1250  006EFE                     __ptext5:
  1251                           	opt callstack 0
  1252  006EFE                     _EE_READ:
  1253                           	opt callstack 28
  1254                           
  1255                           ;./functions.c: 948:     EECON1bits.EEPGD = 0;
  1256                           
  1257                           ;incstack = 0
  1258  006EFE  9EA6               	bcf	4006,7,c	;volsfr
  1259                           
  1260                           ;./functions.c: 949:     EECON1bits.CFGS = 0;
  1261  006F00  9CA6               	bcf	4006,6,c	;volsfr
  1262                           
  1263                           ;./functions.c: 950:     EECON1bits.RD = 1;
  1264  006F02  80A6               	bsf	4006,0,c	;volsfr
  1265                           
  1266                           ;./functions.c: 951:     return(EEDATA);
  1267  006F04  50A8               	movf	4008,w,c	;volatile
  1268  006F06  0012               	return		;funcret
  1269  006F08                     __end_of_EE_READ:
  1270                           	opt callstack 0
  1271                           
  1272 ;; *************** function _clearPorts *****************
  1273 ;; Defined at:
  1274 ;;		line 60 in file "./functions.c"
  1275 ;; Parameters:    Size  Location     Type
  1276 ;;		None
  1277 ;; Auto vars:     Size  Location     Type
  1278 ;;		None
  1279 ;; Return value:  Size  Location     Type
  1280 ;;                  1    wreg      void 
  1281 ;; Registers used:
  1282 ;;		wreg, status,2
  1283 ;; Tracked objects:
  1284 ;;		On entry : 0/0
  1285 ;;		On exit  : 0/0
  1286 ;;		Unchanged: 0/0
  1287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1288 ;;      Params:         0       0       0       0       0       0       0
  1289 ;;      Locals:         0       0       0       0       0       0       0
  1290 ;;      Temps:          0       0       0       0       0       0       0
  1291 ;;      Totals:         0       0       0       0       0       0       0
  1292 ;;Total ram usage:        0 bytes
  1293 ;; Hardware stack levels used:    1
  1294 ;; This function calls:
  1295 ;;		Nothing
  1296 ;; This function is called by:
  1297 ;;		_init
  1298 ;; This function uses a non-reentrant model
  1299 ;;
  1300                           
  1301                           	psect	text6
  1302  0072FC                     __ptext6:
  1303                           	opt callstack 0
  1304  0072FC                     _clearPorts:
  1305                           	opt callstack 29
  1306                           
  1307                           ;./functions.c: 62:     PORTA = 0;
  1308                           
  1309                           ;incstack = 0
  1310  0072FC  0E00               	movlw	0
  1311  0072FE  6E80               	movwf	3968,c	;volatile
  1312                           
  1313                           ;./functions.c: 63:     LATA = 0;
  1314  007300  0E00               	movlw	0
  1315  007302  6E89               	movwf	3977,c	;volatile
  1316                           
  1317                           ;./functions.c: 64:     TRISA = 0;
  1318  007304  0E00               	movlw	0
  1319  007306  6E92               	movwf	3986,c	;volatile
  1320                           
  1321                           ;./functions.c: 65:     ANSELA = 0;
  1322  007308  0E00               	movlw	0
  1323  00730A  010F               	movlb	15	; () banked
  1324  00730C  6F38               	movwf	56,b	;volatile
  1325                           
  1326                           ;./functions.c: 67:     PORTB = 0;
  1327  00730E  0E00               	movlw	0
  1328  007310  6E81               	movwf	3969,c	;volatile
  1329                           
  1330                           ;./functions.c: 68:     LATB = 0;
  1331  007312  0E00               	movlw	0
  1332  007314  6E8A               	movwf	3978,c	;volatile
  1333                           
  1334                           ;./functions.c: 69:     TRISB = 0;
  1335  007316  0E00               	movlw	0
  1336  007318  6E93               	movwf	3987,c	;volatile
  1337                           
  1338                           ;./functions.c: 70:     ANSELB = 0;
  1339  00731A  0E00               	movlw	0
  1340  00731C  6F39               	movwf	57,b	;volatile
  1341                           
  1342                           ;./functions.c: 72:     PORTC = 0;
  1343  00731E  0E00               	movlw	0
  1344  007320  6E82               	movwf	3970,c	;volatile
  1345                           
  1346                           ;./functions.c: 73:     LATC = 0;
  1347  007322  0E00               	movlw	0
  1348  007324  6E8B               	movwf	3979,c	;volatile
  1349                           
  1350                           ;./functions.c: 74:     TRISC = 0;
  1351  007326  0E00               	movlw	0
  1352  007328  6E94               	movwf	3988,c	;volatile
  1353                           
  1354                           ;./functions.c: 75:     ANSELC = 0;
  1355  00732A  0E00               	movlw	0
  1356  00732C  6F3A               	movwf	58,b	;volatile
  1357                           
  1358                           ;./functions.c: 77:     PORTD = 0;
  1359  00732E  0E00               	movlw	0
  1360  007330  6E83               	movwf	3971,c	;volatile
  1361                           
  1362                           ;./functions.c: 78:     LATD = 0;
  1363  007332  0E00               	movlw	0
  1364  007334  6E8C               	movwf	3980,c	;volatile
  1365                           
  1366                           ;./functions.c: 79:     TRISD = 0;
  1367  007336  0E00               	movlw	0
  1368  007338  6E95               	movwf	3989,c	;volatile
  1369                           
  1370                           ;./functions.c: 80:     ANSELD = 0;
  1371  00733A  0E00               	movlw	0
  1372  00733C  6F3B               	movwf	59,b	;volatile
  1373                           
  1374                           ;./functions.c: 82:     PORTE = 0;
  1375  00733E  0E00               	movlw	0
  1376  007340  6E84               	movwf	3972,c	;volatile
  1377                           
  1378                           ;./functions.c: 83:     LATE = 0;
  1379  007342  0E00               	movlw	0
  1380  007344  6E8D               	movwf	3981,c	;volatile
  1381                           
  1382                           ;./functions.c: 84:     TRISE = 0;
  1383  007346  0E00               	movlw	0
  1384  007348  6E96               	movwf	3990,c	;volatile
  1385                           
  1386                           ;./functions.c: 85:     ANSELE = 0;
  1387  00734A  0E00               	movlw	0
  1388  00734C  6F3C               	movwf	60,b	;volatile
  1389                           
  1390                           ;./functions.c: 86:     raceColor[3] = 1;
  1391  00734E  0E01               	movlw	1
  1392  007350  0100               	movlb	0	; () banked
  1393  007352  6FBD               	movwf	(_raceColor+3)& (0+255),b
  1394                           
  1395                           ; BSR set to: 0
  1396  007354  0012               	return		;funcret
  1397  007356                     __end_of_clearPorts:
  1398                           	opt callstack 0
  1399                           
  1400 ;; *************** function _RCE *****************
  1401 ;; Defined at:
  1402 ;;		line 134 in file "sanic.c"
  1403 ;; Parameters:    Size  Location     Type
  1404 ;;		None
  1405 ;; Auto vars:     Size  Location     Type
  1406 ;;  a               1   78[COMRAM] unsigned char 
  1407 ;;  a               1   77[COMRAM] unsigned char 
  1408 ;;  message        14   59[COMRAM] unsigned char [14]
  1409 ;;  commandRecei    3   73[COMRAM] unsigned char [3]
  1410 ;;  nCharsReceiv    1   76[COMRAM] unsigned char 
  1411 ;; Return value:  Size  Location     Type
  1412 ;;                  1    wreg      void 
  1413 ;; Registers used:
  1414 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1415 ;; Tracked objects:
  1416 ;;		On entry : 0/0
  1417 ;;		On exit  : 0/0
  1418 ;;		Unchanged: 0/0
  1419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1420 ;;      Params:         0       0       0       0       0       0       0
  1421 ;;      Locals:        20       0       0       0       0       0       0
  1422 ;;      Temps:          2       0       0       0       0       0       0
  1423 ;;      Totals:        22       0       0       0       0       0       0
  1424 ;;Total ram usage:       22 bytes
  1425 ;; Hardware stack levels used:    1
  1426 ;; Hardware stack levels required when called:    4
  1427 ;; This function calls:
  1428 ;;		_PRC
  1429 ;;		_calibrate
  1430 ;;		_capTouch
  1431 ;;		_error
  1432 ;;		_navigate
  1433 ;;		_pyCal
  1434 ;;		_reverse
  1435 ;;		_setupPWMLeft
  1436 ;;		_setupPWMRight
  1437 ;;		_stopMotors
  1438 ;;		_trans
  1439 ;; This function is called by:
  1440 ;;		_main
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444                           	psect	text7
  1445  007A72                     __ptext7:
  1446                           	opt callstack 0
  1447  007A72                     _RCE:
  1448                           	opt callstack 26
  1449                           
  1450                           ;sanic.c: 136:         PORTD = 0b10100100;
  1451                           
  1452                           ; BSR set to: 0
  1453                           ;incstack = 0
  1454                           ;sanic.c: 135:     while(1){
  1455  007A72  0EA4               	movlw	164
  1456  007A74  6E83               	movwf	3971,c	;volatile
  1457                           
  1458                           ;sanic.c: 138:         unsigned char message[] = "\nSanic races ";
  1459  007A76  EE20  F07A         	lfsr	2,RCE@F6120
  1460  007A7A  EE10  F03C         	lfsr	1,RCE@message
  1461  007A7E  0E0D               	movlw	13
  1462  007A80                     u2481:
  1463  007A80  CFDB FFE3          	movff	plusw2,plusw1
  1464  007A84  06E8               	decf	wreg,f,c
  1465  007A86  E2FC               	bc	u2481
  1466                           
  1467                           ;sanic.c: 140:         for (unsigned char a = 0; a < 13; a++)
  1468  007A88  0E00               	movlw	0
  1469  007A8A  6E4E               	movwf	RCE@a,c
  1470  007A8C                     l3565:
  1471                           
  1472                           ;sanic.c: 141:         {;sanic.c: 142:             trans(message[a]);
  1473  007A8C  0E3C               	movlw	low RCE@message
  1474  007A8E  244E               	addwf	RCE@a,w,c
  1475  007A90  6ED9               	movwf	fsr2l,c
  1476  007A92  6ADA               	clrf	fsr2h,c
  1477  007A94  0E00               	movlw	high RCE@message
  1478  007A96  22DA               	addwfc	fsr2h,f,c
  1479  007A98  50DF               	movf	indf2,w,c
  1480  007A9A  EC8E  F037         	call	_trans
  1481                           
  1482                           ;sanic.c: 143:         }
  1483  007A9E  2A4E               	incf	RCE@a,f,c
  1484  007AA0  0E0C               	movlw	12
  1485  007AA2  644E               	cpfsgt	RCE@a,c
  1486  007AA4  D7F3               	goto	l3565
  1487                           
  1488                           ;sanic.c: 145:         if (raceColor[3] == 1){
  1489  007AA6  0100               	movlb	0	; () banked
  1490  007AA8  05BD               	decf	(_raceColor+3)& (0+255),w,b
  1491  007AAA  A4D8               	btfss	status,2,c
  1492  007AAC  D004               	goto	l3575
  1493                           
  1494                           ; BSR set to: 0
  1495                           ;sanic.c: 146:             trans('B');
  1496  007AAE  0E42               	movlw	66
  1497  007AB0  EC8E  F037         	call	_trans
  1498                           
  1499                           ;sanic.c: 147:         }
  1500  007AB4  D011               	goto	l576
  1501  007AB6                     l3575:
  1502                           
  1503                           ; BSR set to: 0
  1504  007AB6  05BC               	decf	(_raceColor+2)& (0+255),w,b
  1505  007AB8  A4D8               	btfss	status,2,c
  1506  007ABA  D004               	goto	l3579
  1507                           
  1508                           ; BSR set to: 0
  1509                           ;sanic.c: 149:             trans('R');
  1510  007ABC  0E52               	movlw	82
  1511  007ABE  EC8E  F037         	call	_trans
  1512                           
  1513                           ;sanic.c: 150:         }
  1514  007AC2  D00A               	goto	l576
  1515  007AC4                     l3579:
  1516                           
  1517                           ; BSR set to: 0
  1518  007AC4  05BB               	decf	(_raceColor+1)& (0+255),w,b
  1519  007AC6  A4D8               	btfss	status,2,c
  1520  007AC8  D004               	goto	l3583
  1521                           
  1522                           ; BSR set to: 0
  1523                           ;sanic.c: 152:             trans('G');
  1524  007ACA  0E47               	movlw	71
  1525  007ACC  EC8E  F037         	call	_trans
  1526                           
  1527                           ;sanic.c: 153:         }
  1528  007AD0  D003               	goto	l576
  1529  007AD2                     l3583:
  1530                           
  1531                           ; BSR set to: 0
  1532                           ;sanic.c: 155:             trans('n');
  1533  007AD2  0E6E               	movlw	110
  1534  007AD4  EC8E  F037         	call	_trans
  1535  007AD8                     l576:
  1536                           
  1537                           ;sanic.c: 157:         trans('\n');
  1538  007AD8  0E0A               	movlw	10
  1539  007ADA  EC8E  F037         	call	_trans
  1540                           
  1541                           ;sanic.c: 160:         INTCONbits.GIE = 0;
  1542  007ADE  9EF2               	bcf	4082,7,c	;volatile
  1543                           
  1544                           ;sanic.c: 161:         INTCONbits.PEIE = 0;
  1545  007AE0  9CF2               	bcf	4082,6,c	;volatile
  1546                           
  1547                           ;sanic.c: 162:         unsigned char nCharsReceived = 0;
  1548  007AE2  0E00               	movlw	0
  1549  007AE4  6E4D               	movwf	RCE@nCharsReceived,c
  1550                           
  1551                           ;sanic.c: 163:         unsigned char commandReceived[3];;sanic.c: 165:         while(nCh
      +                          arsReceived < 3){
  1552  007AE6  D00B               	goto	l3595
  1553  007AE8                     l582:
  1554                           
  1555                           ;sanic.c: 166:             if (PIR1bits.RC1IF){
  1556  007AE8  AA9E               	btfss	3998,5,c	;volatile
  1557  007AEA  D009               	goto	l3595
  1558                           
  1559                           ;sanic.c: 167:                 commandReceived[nCharsReceived] = RCREG;
  1560  007AEC  0E4A               	movlw	low RCE@commandReceived
  1561  007AEE  244D               	addwf	RCE@nCharsReceived,w,c
  1562  007AF0  6ED9               	movwf	fsr2l,c
  1563  007AF2  6ADA               	clrf	fsr2h,c
  1564  007AF4  0E00               	movlw	high RCE@commandReceived
  1565  007AF6  22DA               	addwfc	fsr2h,f,c
  1566  007AF8  CFAE FFDF          	movff	4014,indf2	;volatile
  1567                           
  1568                           ;sanic.c: 168:                 nCharsReceived++;
  1569  007AFC  2A4D               	incf	RCE@nCharsReceived,f,c
  1570  007AFE                     l3595:
  1571                           
  1572                           ;sanic.c: 165:         while(nCharsReceived < 3){
  1573  007AFE  0E02               	movlw	2
  1574  007B00  644D               	cpfsgt	RCE@nCharsReceived,c
  1575  007B02  D7F2               	goto	l582
  1576  007B04  D02E               	goto	l3627
  1577  007B06                     l3597:
  1578                           
  1579                           ;sanic.c: 176:             if (commandReceived[1] == 'C'){
  1580  007B06  0E43               	movlw	67
  1581  007B08  184B               	xorwf	RCE@commandReceived+1,w,c
  1582  007B0A  A4D8               	btfss	status,2,c
  1583  007B0C  D003               	goto	l3601
  1584                           
  1585                           ;sanic.c: 177:                 capTouch();
  1586  007B0E  EC0E  F03A         	call	_capTouch	;wreg free
  1587                           
  1588                           ;sanic.c: 178:             } else if (commandReceived[1] == 'E'){
  1589  007B12  D03F               	goto	l3629
  1590  007B14                     l3601:
  1591  007B14  0E45               	movlw	69
  1592  007B16  184B               	xorwf	RCE@commandReceived+1,w,c
  1593  007B18  A4D8               	btfss	status,2,c
  1594  007B1A  D03B               	goto	l3629
  1595                           
  1596                           ;sanic.c: 179:                 setupPWMRight();
  1597  007B1C  EC60  F038         	call	_setupPWMRight	;wreg free
  1598                           
  1599                           ;sanic.c: 180:                 setupPWMLeft();
  1600  007B20  EC4F  F038         	call	_setupPWMLeft	;wreg free
  1601                           
  1602                           ;sanic.c: 181:                 reverse();
  1603  007B24  ECF5  F037         	call	_reverse	;wreg free
  1604                           
  1605                           ;sanic.c: 182:                 if (PIR1bits.RC1IF)
  1606  007B28  AA9E               	btfss	3998,5,c	;volatile
  1607  007B2A  D033               	goto	l3629
  1608                           
  1609                           ;sanic.c: 183:                 {;sanic.c: 184:                     PIR1bits.RC1IF = 0;
  1610  007B2C  9A9E               	bcf	3998,5,c	;volatile
  1611                           
  1612                           ;sanic.c: 185:                     if (RCREG == 'S' || RCREG == 's')
  1613  007B2E  0E53               	movlw	83
  1614  007B30  18AE               	xorwf	4014,w,c	;volatile
  1615  007B32  B4D8               	btfsc	status,2,c
  1616  007B34  D004               	goto	u2590
  1617  007B36  0E73               	movlw	115
  1618  007B38  18AE               	xorwf	4014,w,c	;volatile
  1619  007B3A  A4D8               	btfss	status,2,c
  1620  007B3C  D02A               	goto	l3629
  1621  007B3E                     u2590:
  1622                           
  1623                           ;sanic.c: 186:                     {;sanic.c: 187:                         stopMotors();
  1624  007B3E  ECA1  F037         	call	_stopMotors	;wreg free
  1625                           
  1626                           ;sanic.c: 191:             break;
  1627  007B42  D027               	goto	l3629
  1628  007B44                     l3615:
  1629                           
  1630                           ;sanic.c: 193:             PRC();
  1631  007B44  ECD8  F03D         	call	_PRC	;wreg free
  1632                           
  1633                           ;sanic.c: 194:             break;
  1634  007B48  D024               	goto	l3629
  1635  007B4A                     l3617:
  1636                           
  1637                           ;sanic.c: 196:             navigate();
  1638  007B4A  EC29  F039         	call	_navigate	;wreg free
  1639                           
  1640                           ;sanic.c: 197:             break;
  1641  007B4E  D021               	goto	l3629
  1642  007B50                     l3619:
  1643                           
  1644                           ;sanic.c: 199:             pyCal();
  1645  007B50  EC02  F039         	call	_pyCal	;wreg free
  1646                           
  1647                           ;sanic.c: 200:             break;
  1648  007B54  D01E               	goto	l3629
  1649  007B56                     l3621:
  1650                           
  1651                           ;sanic.c: 202:             calibrate();
  1652  007B56  ECA2  F03E         	call	_calibrate	;wreg free
  1653                           
  1654                           ;sanic.c: 203:             break;
  1655  007B5A  D01B               	goto	l3629
  1656  007B5C                     l3623:
  1657                           
  1658                           ;sanic.c: 206:             error();
  1659  007B5C  ECA2  F038         	call	_error	;wreg free
  1660                           
  1661                           ;sanic.c: 207:             break;
  1662  007B60  D018               	goto	l3629
  1663  007B62                     l3627:
  1664  007B62  504A               	movf	RCE@commandReceived,w,c
  1665  007B64  6E3A               	movwf	??_RCE& (0+255),c
  1666  007B66  6A3B               	clrf	(??_RCE+1)& (0+255),c
  1667                           
  1668                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1669                           ; Switch size 1, requested type "simple"
  1670                           ; Number of cases is 1, Range of values is 0 to 0
  1671                           ; switch strategies available:
  1672                           ; Name         Instructions Cycles
  1673                           ; simple_byte            4     3 (average)
  1674                           ;	Chosen strategy is simple_byte
  1675  007B68  503B               	movf	??_RCE+1,w,c
  1676  007B6A  0A00               	xorlw	0	; case 0
  1677  007B6C  A4D8               	btfss	status,2,c
  1678  007B6E  D7F6               	goto	l3623
  1679                           
  1680                           ; Switch size 1, requested type "simple"
  1681                           ; Number of cases is 5, Range of values is 67 to 82
  1682                           ; switch strategies available:
  1683                           ; Name         Instructions Cycles
  1684                           ; simple_byte           16     9 (average)
  1685                           ;	Chosen strategy is simple_byte
  1686  007B70  503A               	movf	??_RCE,w,c
  1687  007B72  0A43               	xorlw	67	; case 67
  1688  007B74  B4D8               	btfsc	status,2,c
  1689  007B76  D7EF               	goto	l3621
  1690  007B78  0A0D               	xorlw	13	; case 78
  1691  007B7A  B4D8               	btfsc	status,2,c
  1692  007B7C  D7E6               	goto	l3617
  1693  007B7E  0A1E               	xorlw	30	; case 80
  1694  007B80  B4D8               	btfsc	status,2,c
  1695  007B82  D7E0               	goto	l3615
  1696  007B84  0A01               	xorlw	1	; case 81
  1697  007B86  B4D8               	btfsc	status,2,c
  1698  007B88  D7E3               	goto	l3619
  1699  007B8A  0A03               	xorlw	3	; case 82
  1700  007B8C  B4D8               	btfsc	status,2,c
  1701  007B8E  D7BB               	goto	l3597
  1702  007B90  D7E5               	goto	l3623
  1703  007B92                     l3629:
  1704                           
  1705                           ;sanic.c: 210:         for (unsigned char a = 0; a < 3; a++){
  1706  007B92  0E00               	movlw	0
  1707  007B94  6E4F               	movwf	RCE@a_1465,c
  1708  007B96                     l3635:
  1709                           
  1710                           ;sanic.c: 211:             commandReceived[a] = 0;
  1711  007B96  0E4A               	movlw	low RCE@commandReceived
  1712  007B98  244F               	addwf	RCE@a_1465,w,c
  1713  007B9A  6ED9               	movwf	fsr2l,c
  1714  007B9C  6ADA               	clrf	fsr2h,c
  1715  007B9E  0E00               	movlw	high RCE@commandReceived
  1716  007BA0  22DA               	addwfc	fsr2h,f,c
  1717  007BA2  0E00               	movlw	0
  1718  007BA4  6EDF               	movwf	indf2,c
  1719                           
  1720                           ;sanic.c: 212:         }
  1721  007BA6  2A4F               	incf	RCE@a_1465,f,c
  1722  007BA8  0E02               	movlw	2
  1723  007BAA  644F               	cpfsgt	RCE@a_1465,c
  1724  007BAC  D7F4               	goto	l3635
  1725  007BAE  D761               	goto	_RCE
  1726  007BB0                     __end_of_RCE:
  1727                           	opt callstack 0
  1728                           
  1729 ;; *************** function _reverse *****************
  1730 ;; Defined at:
  1731 ;;		line 575 in file "./functions.c"
  1732 ;; Parameters:    Size  Location     Type
  1733 ;;		None
  1734 ;; Auto vars:     Size  Location     Type
  1735 ;;		None
  1736 ;; Return value:  Size  Location     Type
  1737 ;;                  1    wreg      void 
  1738 ;; Registers used:
  1739 ;;		wreg, status,2
  1740 ;; Tracked objects:
  1741 ;;		On entry : 0/0
  1742 ;;		On exit  : 0/0
  1743 ;;		Unchanged: 0/0
  1744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1745 ;;      Params:         0       0       0       0       0       0       0
  1746 ;;      Locals:         0       0       0       0       0       0       0
  1747 ;;      Temps:          0       0       0       0       0       0       0
  1748 ;;      Totals:         0       0       0       0       0       0       0
  1749 ;;Total ram usage:        0 bytes
  1750 ;; Hardware stack levels used:    1
  1751 ;; This function calls:
  1752 ;;		Nothing
  1753 ;; This function is called by:
  1754 ;;		_RCE
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758                           	psect	text8
  1759  006FEA                     __ptext8:
  1760                           	opt callstack 0
  1761  006FEA                     _reverse:
  1762                           	opt callstack 29
  1763                           
  1764                           ;./functions.c: 576:     PORTAbits.RA5 = 1;
  1765                           
  1766                           ;incstack = 0
  1767  006FEA  8A80               	bsf	3968,5,c	;volatile
  1768                           
  1769                           ;./functions.c: 577:     PORTAbits.RA6 = 0;
  1770  006FEC  9C80               	bcf	3968,6,c	;volatile
  1771                           
  1772                           ;./functions.c: 578:     PORTAbits.RA7 = 0;
  1773  006FEE  9E80               	bcf	3968,7,c	;volatile
  1774                           
  1775                           ;./functions.c: 580:     PORTCbits.RC0 = 1;
  1776  006FF0  8082               	bsf	3970,0,c	;volatile
  1777                           
  1778                           ;./functions.c: 581:     PORTCbits.RC1 = 0;
  1779  006FF2  9282               	bcf	3970,1,c	;volatile
  1780                           
  1781                           ;./functions.c: 583:     PORTEbits.RE0 = 1;
  1782  006FF4  8084               	bsf	3972,0,c	;volatile
  1783                           
  1784                           ;./functions.c: 584:     PORTEbits.RE1 = 0;
  1785  006FF6  9284               	bcf	3972,1,c	;volatile
  1786                           
  1787                           ;./functions.c: 586:     CCPR1L = 250;
  1788  006FF8  0EFA               	movlw	250
  1789  006FFA  6EBE               	movwf	4030,c	;volatile
  1790                           
  1791                           ;./functions.c: 587:     CCPR5L = 250;
  1792  006FFC  0EFA               	movlw	250
  1793  006FFE  010F               	movlb	15	; () banked
  1794  007000  6F55               	movwf	85,b	;volatile
  1795                           
  1796                           ; BSR set to: 15
  1797  007002  0012               	return		;funcret
  1798  007004                     __end_of_reverse:
  1799                           	opt callstack 0
  1800                           
  1801 ;; *************** function _pyCal *****************
  1802 ;; Defined at:
  1803 ;;		line 398 in file "./functions.c"
  1804 ;; Parameters:    Size  Location     Type
  1805 ;;		None
  1806 ;; Auto vars:     Size  Location     Type
  1807 ;;  a               1   19[COMRAM] unsigned char 
  1808 ;;  done            1    0        unsigned char 
  1809 ;; Return value:  Size  Location     Type
  1810 ;;                  1    wreg      void 
  1811 ;; Registers used:
  1812 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1813 ;; Tracked objects:
  1814 ;;		On entry : 0/0
  1815 ;;		On exit  : 0/0
  1816 ;;		Unchanged: 0/0
  1817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1818 ;;      Params:         0       0       0       0       0       0       0
  1819 ;;      Locals:         2       0       0       0       0       0       0
  1820 ;;      Temps:          0       0       0       0       0       0       0
  1821 ;;      Totals:         2       0       0       0       0       0       0
  1822 ;;Total ram usage:        2 bytes
  1823 ;; Hardware stack levels used:    1
  1824 ;; Hardware stack levels required when called:    3
  1825 ;; This function calls:
  1826 ;;		_msDelay
  1827 ;;		_readAllSensors
  1828 ;;		_setupADC
  1829 ;;		_trans
  1830 ;; This function is called by:
  1831 ;;		_RCE
  1832 ;; This function uses a non-reentrant model
  1833 ;;
  1834                           
  1835                           	psect	text9
  1836  007204                     __ptext9:
  1837                           	opt callstack 0
  1838  007204                     _pyCal:
  1839                           	opt callstack 26
  1840                           
  1841                           ;./functions.c: 400:     setupADC();
  1842                           
  1843                           ; BSR set to: 15
  1844                           ;incstack = 0
  1845  007204  EC3E  F038         	call	_setupADC	;wreg free
  1846                           
  1847                           ;./functions.c: 401:     PORTD = 0b00001100;
  1848  007208  0E0C               	movlw	12
  1849  00720A  6E83               	movwf	3971,c	;volatile
  1850  00720C                     
  1851                           ;./functions.c: 405:     {;./functions.c: 406:         msDelay(10);
  1852  00720C  0E0A               	movlw	10
  1853  00720E  EC1E  F038         	call	_msDelay
  1854                           
  1855                           ;./functions.c: 407:         readAllSensors();
  1856  007212  ECDE  F03B         	call	_readAllSensors	;wreg free
  1857                           
  1858                           ;./functions.c: 408:         for (a = 0; a < 5; a++){
  1859  007216  0E00               	movlw	0
  1860  007218  6E14               	movwf	pyCal@a,c
  1861  00721A                     l3433:
  1862                           
  1863                           ;./functions.c: 409:             trans(sensorVals[a]);
  1864  00721A  0E50               	movlw	low _sensorVals
  1865  00721C  2414               	addwf	pyCal@a,w,c
  1866  00721E  6ED9               	movwf	fsr2l,c
  1867  007220  6ADA               	clrf	fsr2h,c
  1868  007222  0E00               	movlw	high _sensorVals
  1869  007224  22DA               	addwfc	fsr2h,f,c
  1870  007226  50DF               	movf	indf2,w,c
  1871  007228  EC8E  F037         	call	_trans
  1872                           
  1873                           ;./functions.c: 410:         }
  1874  00722C  2A14               	incf	pyCal@a,f,c
  1875  00722E  0E04               	movlw	4
  1876  007230  6414               	cpfsgt	pyCal@a,c
  1877  007232  D7F3               	goto	l3433
  1878                           
  1879                           ;./functions.c: 411:         trans('\n');
  1880  007234  0E0A               	movlw	10
  1881  007236  EC8E  F037         	call	_trans
  1882                           
  1883                           ;./functions.c: 413:         if (PIR1bits.RC1IF)
  1884  00723A  AA9E               	btfss	3998,5,c	;volatile
  1885  00723C  D7E7               	goto	l3419
  1886                           
  1887                           ;./functions.c: 414:         {;./functions.c: 415:             PIR1bits.RC1IF = 0;
  1888  00723E  9A9E               	bcf	3998,5,c	;volatile
  1889                           
  1890                           ;./functions.c: 416:             if (RCREG == 'S' || RCREG == 's')
  1891  007240  0E53               	movlw	83
  1892  007242  18AE               	xorwf	4014,w,c	;volatile
  1893  007244  B4D8               	btfsc	status,2,c
  1894  007246  0012               	return	
  1895  007248  0E73               	movlw	115
  1896  00724A  18AE               	xorwf	4014,w,c	;volatile
  1897  00724C  B4D8               	btfsc	status,2,c
  1898  00724E  0012               	return	
  1899  007250  D7DD               	goto	l3419
  1900  007252                     __end_of_pyCal:
  1901                           	opt callstack 0
  1902                           
  1903 ;; *************** function _navigate *****************
  1904 ;; Defined at:
  1905 ;;		line 424 in file "./functions.c"
  1906 ;; Parameters:    Size  Location     Type
  1907 ;;		None
  1908 ;; Auto vars:     Size  Location     Type
  1909 ;;		None
  1910 ;; Return value:  Size  Location     Type
  1911 ;;                  1    wreg      void 
  1912 ;; Registers used:
  1913 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1914 ;; Tracked objects:
  1915 ;;		On entry : 0/0
  1916 ;;		On exit  : 0/0
  1917 ;;		Unchanged: 0/0
  1918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1919 ;;      Params:         0       0       0       0       0       0       0
  1920 ;;      Locals:         0       0       0       0       0       0       0
  1921 ;;      Temps:          0       0       0       0       0       0       0
  1922 ;;      Totals:         0       0       0       0       0       0       0
  1923 ;;Total ram usage:        0 bytes
  1924 ;; Hardware stack levels used:    1
  1925 ;; Hardware stack levels required when called:    3
  1926 ;; This function calls:
  1927 ;;		_classifyColors
  1928 ;;		_determineDirection
  1929 ;;		_displayColorDetected
  1930 ;;		_displayRaceColor
  1931 ;;		_msDelay
  1932 ;;		_readAllSensors
  1933 ;;		_setupADC
  1934 ;;		_setupPWMLeft
  1935 ;;		_setupPWMRight
  1936 ;;		_stopMotors
  1937 ;;		_testBlack
  1938 ;; This function is called by:
  1939 ;;		_RCE
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943                           	psect	text10
  1944  007252                     __ptext10:
  1945                           	opt callstack 0
  1946  007252                     _navigate:
  1947                           	opt callstack 26
  1948                           
  1949                           ;./functions.c: 425:     displayRaceColor();
  1950                           
  1951                           ;incstack = 0
  1952  007252  ECBD  F038         	call	_displayRaceColor	;wreg free
  1953                           
  1954                           ;./functions.c: 426:     setupPWMLeft();
  1955  007256  EC4F  F038         	call	_setupPWMLeft	;wreg free
  1956                           
  1957                           ;./functions.c: 427:     setupPWMRight();
  1958  00725A  EC60  F038         	call	_setupPWMRight	;wreg free
  1959                           
  1960                           ;./functions.c: 428:     setupADC();
  1961  00725E  EC3E  F038         	call	_setupADC	;wreg free
  1962  007262                     l3451:
  1963                           
  1964                           ;./functions.c: 430:         readAllSensors();
  1965  007262  ECDE  F03B         	call	_readAllSensors	;wreg free
  1966                           
  1967                           ;./functions.c: 431:         classifyColors();
  1968  007266  ECBF  F03C         	call	_classifyColors	;wreg free
  1969                           
  1970                           ;./functions.c: 432:         displayColorDetected(2);
  1971  00726A  0E02               	movlw	2
  1972  00726C  EC07  F03B         	call	_displayColorDetected
  1973                           
  1974                           ;./functions.c: 433:         determineDirection();
  1975  007270  EC90  F03B         	call	_determineDirection	;wreg free
  1976                           
  1977                           ;./functions.c: 434:         msDelay(50);
  1978  007274  0E32               	movlw	50
  1979  007276  EC1E  F038         	call	_msDelay
  1980                           
  1981                           ;./functions.c: 437:         if (PIR1bits.RC1IF)
  1982  00727A  AA9E               	btfss	3998,5,c	;volatile
  1983  00727C  D00C               	goto	l3473
  1984                           
  1985                           ;./functions.c: 438:         {;./functions.c: 439:             PIR1bits.RC1IF = 0;
  1986  00727E  9A9E               	bcf	3998,5,c	;volatile
  1987                           
  1988                           ;./functions.c: 440:             if (RCREG == 'S' || RCREG == 's')
  1989  007280  0E53               	movlw	83
  1990  007282  18AE               	xorwf	4014,w,c	;volatile
  1991  007284  B4D8               	btfsc	status,2,c
  1992  007286  D004               	goto	u2400
  1993  007288  0E73               	movlw	115
  1994  00728A  18AE               	xorwf	4014,w,c	;volatile
  1995  00728C  A4D8               	btfss	status,2,c
  1996  00728E  D7E9               	goto	l3451
  1997  007290                     u2400:
  1998                           
  1999                           ;./functions.c: 441:             {;./functions.c: 442:                 stopMotors();
  2000  007290  ECA1  F037         	call	_stopMotors	;wreg free
  2001  007294  0012               	return	
  2002  007296                     l3473:
  2003  007296  EC51  F039         	call	_testBlack	;wreg free
  2004  00729A  0AAA               	xorlw	170
  2005  00729C  B4D8               	btfsc	status,2,c
  2006  00729E  D7F8               	goto	u2400
  2007  0072A0  D7E0               	goto	l3451
  2008  0072A2                     __end_of_navigate:
  2009                           	opt callstack 0
  2010                           
  2011 ;; *************** function _testBlack *****************
  2012 ;; Defined at:
  2013 ;;		line 644 in file "./functions.c"
  2014 ;; Parameters:    Size  Location     Type
  2015 ;;		None
  2016 ;; Auto vars:     Size  Location     Type
  2017 ;;		None
  2018 ;; Return value:  Size  Location     Type
  2019 ;;                  1    wreg      unsigned char 
  2020 ;; Registers used:
  2021 ;;		wreg, status,2, status,0
  2022 ;; Tracked objects:
  2023 ;;		On entry : 0/0
  2024 ;;		On exit  : 0/0
  2025 ;;		Unchanged: 0/0
  2026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2027 ;;      Params:         0       0       0       0       0       0       0
  2028 ;;      Locals:         0       0       0       0       0       0       0
  2029 ;;      Temps:          0       0       0       0       0       0       0
  2030 ;;      Totals:         0       0       0       0       0       0       0
  2031 ;;Total ram usage:        0 bytes
  2032 ;; Hardware stack levels used:    1
  2033 ;; This function calls:
  2034 ;;		Nothing
  2035 ;; This function is called by:
  2036 ;;		_navigate
  2037 ;; This function uses a non-reentrant model
  2038 ;;
  2039                           
  2040                           	psect	text11
  2041  0072A2                     __ptext11:
  2042                           	opt callstack 0
  2043  0072A2                     _testBlack:
  2044                           	opt callstack 28
  2045                           
  2046                           ;./functions.c: 645:     if ((sensorVals[0] < LLranges[3]) || (sensorVals[0] < LLranges[
      +                          2])){
  2047                           
  2048                           ;incstack = 0
  2049  0072A2  0100               	movlb	0	; () banked
  2050  0072A4  51E7               	movf	(_LLranges+3)& (0+255),w,b
  2051  0072A6  5C50               	subwf	_sensorVals,w,c
  2052  0072A8  A0D8               	btfss	status,0,c
  2053  0072AA  D004               	goto	u1800
  2054                           
  2055                           ; BSR set to: 0
  2056  0072AC  51E6               	movf	(_LLranges+2)& (0+255),w,b
  2057  0072AE  5C50               	subwf	_sensorVals,w,c
  2058  0072B0  B0D8               	btfsc	status,0,c
  2059  0072B2  D002               	goto	l2953
  2060  0072B4                     u1800:
  2061                           
  2062                           ; BSR set to: 0
  2063                           ;./functions.c: 646:         return 0x0;
  2064  0072B4  0E00               	movlw	0
  2065  0072B6  0012               	return	
  2066  0072B8                     l2953:
  2067                           
  2068                           ; BSR set to: 0
  2069                           ;./functions.c: 648:     if ((sensorVals[1] < Lranges[3]) || (sensorVals[1] < Lranges[2]
      +                          )){
  2070  0072B8  51E2               	movf	(_Lranges+3)& (0+255),w,b
  2071  0072BA  5C51               	subwf	_sensorVals+1,w,c
  2072  0072BC  A0D8               	btfss	status,0,c
  2073  0072BE  D7FA               	goto	u1800
  2074                           
  2075                           ; BSR set to: 0
  2076  0072C0  51E1               	movf	(_Lranges+2)& (0+255),w,b
  2077  0072C2  5C51               	subwf	_sensorVals+1,w,c
  2078  0072C4  A0D8               	btfss	status,0,c
  2079  0072C6  D7F6               	goto	u1800
  2080                           
  2081                           ; BSR set to: 0
  2082                           ;./functions.c: 651:     if ((sensorVals[2] < Mranges[3]) || (sensorVals[2] < Mranges[2]
      +                          )){
  2083  0072C8  51DD               	movf	(_Mranges+3)& (0+255),w,b
  2084  0072CA  5C52               	subwf	_sensorVals+2,w,c
  2085  0072CC  A0D8               	btfss	status,0,c
  2086  0072CE  D7F2               	goto	u1800
  2087                           
  2088                           ; BSR set to: 0
  2089  0072D0  51DC               	movf	(_Mranges+2)& (0+255),w,b
  2090  0072D2  5C52               	subwf	_sensorVals+2,w,c
  2091  0072D4  A0D8               	btfss	status,0,c
  2092  0072D6  D7EE               	goto	u1800
  2093                           
  2094                           ; BSR set to: 0
  2095                           ;./functions.c: 654:     if ((sensorVals[3] < Rranges[3]) || (sensorVals[3] < Rranges[2]
      +                          )){
  2096  0072D8  505B               	movf	_Rranges+3,w,c
  2097  0072DA  5C53               	subwf	_sensorVals+3,w,c
  2098  0072DC  A0D8               	btfss	status,0,c
  2099  0072DE  D7EA               	goto	u1800
  2100                           
  2101                           ; BSR set to: 0
  2102  0072E0  505A               	movf	_Rranges+2,w,c
  2103  0072E2  5C53               	subwf	_sensorVals+3,w,c
  2104  0072E4  A0D8               	btfss	status,0,c
  2105  0072E6  D7E6               	goto	u1800
  2106                           
  2107                           ; BSR set to: 0
  2108                           ;./functions.c: 657:     if ((sensorVals[4] < RRranges[3]) || (sensorVals[4] < RRranges[
      +                          2])){
  2109  0072E8  51D8               	movf	(_RRranges+3)& (0+255),w,b
  2110  0072EA  5C54               	subwf	_sensorVals+4,w,c
  2111  0072EC  A0D8               	btfss	status,0,c
  2112  0072EE  D7E2               	goto	u1800
  2113                           
  2114                           ; BSR set to: 0
  2115  0072F0  51D7               	movf	(_RRranges+2)& (0+255),w,b
  2116  0072F2  5C54               	subwf	_sensorVals+4,w,c
  2117  0072F4  A0D8               	btfss	status,0,c
  2118  0072F6  D7DE               	goto	u1800
  2119                           
  2120                           ; BSR set to: 0
  2121                           ;./functions.c: 660:     return 0xAA;
  2122  0072F8  0EAA               	movlw	170
  2123                           
  2124                           ; BSR set to: 0
  2125  0072FA  0012               	return		;funcret
  2126  0072FC                     __end_of_testBlack:
  2127                           	opt callstack 0
  2128                           
  2129 ;; *************** function _stopMotors *****************
  2130 ;; Defined at:
  2131 ;;		line 740 in file "./functions.c"
  2132 ;; Parameters:    Size  Location     Type
  2133 ;;		None
  2134 ;; Auto vars:     Size  Location     Type
  2135 ;;		None
  2136 ;; Return value:  Size  Location     Type
  2137 ;;                  1    wreg      void 
  2138 ;; Registers used:
  2139 ;;		wreg, status,2
  2140 ;; Tracked objects:
  2141 ;;		On entry : 0/0
  2142 ;;		On exit  : 0/0
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2145 ;;      Params:         0       0       0       0       0       0       0
  2146 ;;      Locals:         0       0       0       0       0       0       0
  2147 ;;      Temps:          0       0       0       0       0       0       0
  2148 ;;      Totals:         0       0       0       0       0       0       0
  2149 ;;Total ram usage:        0 bytes
  2150 ;; Hardware stack levels used:    1
  2151 ;; This function calls:
  2152 ;;		Nothing
  2153 ;; This function is called by:
  2154 ;;		_navigate
  2155 ;;		_RCE
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159                           	psect	text12
  2160  006F42                     __ptext12:
  2161                           	opt callstack 0
  2162  006F42                     _stopMotors:
  2163                           	opt callstack 29
  2164                           
  2165                           ;./functions.c: 741:     PORTCbits.RC0 = 0;
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;incstack = 0
  2169  006F42  9082               	bcf	3970,0,c	;volatile
  2170                           
  2171                           ;./functions.c: 742:     PORTCbits.RC1 = 0;
  2172  006F44  9282               	bcf	3970,1,c	;volatile
  2173                           
  2174                           ;./functions.c: 743:     TRISCbits.TRISC2 = 1;
  2175  006F46  8494               	bsf	3988,2,c	;volatile
  2176                           
  2177                           ;./functions.c: 744:     PORTEbits.RE0 = 0;
  2178  006F48  9084               	bcf	3972,0,c	;volatile
  2179                           
  2180                           ;./functions.c: 745:     PORTEbits.RE1 = 0;
  2181  006F4A  9284               	bcf	3972,1,c	;volatile
  2182                           
  2183                           ;./functions.c: 746:     TRISEbits.TRISE2 = 1;
  2184  006F4C  8496               	bsf	3990,2,c	;volatile
  2185                           
  2186                           ;./functions.c: 747:     PORTA = 0;
  2187  006F4E  0E00               	movlw	0
  2188  006F50  6E80               	movwf	3968,c	;volatile
  2189  006F52  0012               	return		;funcret
  2190  006F54                     __end_of_stopMotors:
  2191                           	opt callstack 0
  2192                           
  2193 ;; *************** function _setupPWMRight *****************
  2194 ;; Defined at:
  2195 ;;		line 41 in file "./functions.c"
  2196 ;; Parameters:    Size  Location     Type
  2197 ;;		None
  2198 ;; Auto vars:     Size  Location     Type
  2199 ;;		None
  2200 ;; Return value:  Size  Location     Type
  2201 ;;                  1    wreg      void 
  2202 ;; Registers used:
  2203 ;;		wreg, status,2
  2204 ;; Tracked objects:
  2205 ;;		On entry : 0/0
  2206 ;;		On exit  : 0/0
  2207 ;;		Unchanged: 0/0
  2208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2209 ;;      Params:         0       0       0       0       0       0       0
  2210 ;;      Locals:         0       0       0       0       0       0       0
  2211 ;;      Temps:          0       0       0       0       0       0       0
  2212 ;;      Totals:         0       0       0       0       0       0       0
  2213 ;;Total ram usage:        0 bytes
  2214 ;; Hardware stack levels used:    1
  2215 ;; This function calls:
  2216 ;;		Nothing
  2217 ;; This function is called by:
  2218 ;;		_navigate
  2219 ;;		_RCE
  2220 ;; This function uses a non-reentrant model
  2221 ;;
  2222                           
  2223                           	psect	text13
  2224  0070C0                     __ptext13:
  2225                           	opt callstack 0
  2226  0070C0                     _setupPWMRight:
  2227                           	opt callstack 29
  2228                           
  2229                           ;./functions.c: 43:     CCP5CON = 0;
  2230                           
  2231                           ;incstack = 0
  2232  0070C0  0E00               	movlw	0
  2233  0070C2  010F               	movlb	15	; () banked
  2234  0070C4  6F54               	movwf	84,b	;volatile
  2235                           
  2236                           ; BSR set to: 15
  2237                           ;./functions.c: 44:     PR4 = 255;
  2238  0070C6  6952               	setf	82,b	;volatile
  2239                           
  2240                           ; BSR set to: 15
  2241                           ;./functions.c: 45:     CCPR5L = 255;
  2242  0070C8  6955               	setf	85,b	;volatile
  2243                           
  2244                           ; BSR set to: 15
  2245                           ;./functions.c: 47:     TRISEbits.RE2 = 0;
  2246  0070CA  9496               	bcf	3990,2,c	;volatile
  2247                           
  2248                           ;./functions.c: 49:     CCPTMRS1 = 0b00000100;
  2249  0070CC  0E04               	movlw	4
  2250  0070CE  6F48               	movwf	72,b	;volatile
  2251                           
  2252                           ;./functions.c: 50:     CCP5CON = 0b00001100;
  2253  0070D0  0E0C               	movlw	12
  2254  0070D2  6F54               	movwf	84,b	;volatile
  2255                           
  2256                           ;./functions.c: 51:     T4CON = 0b00000000;
  2257  0070D4  0E00               	movlw	0
  2258  0070D6  6F51               	movwf	81,b	;volatile
  2259                           
  2260                           ;./functions.c: 52:     TMR4 = 0;
  2261  0070D8  0E00               	movlw	0
  2262  0070DA  6F53               	movwf	83,b	;volatile
  2263                           
  2264                           ; BSR set to: 15
  2265                           ;./functions.c: 53:     PIE5bits.TMR4IE = 0;
  2266  0070DC  907D               	bcf	3965,0,c	;volatile
  2267                           
  2268                           ; BSR set to: 15
  2269                           ;./functions.c: 54:     T4CONbits.TMR4ON = 1;
  2270  0070DE  8551               	bsf	81,2,b	;volatile
  2271                           
  2272                           ; BSR set to: 15
  2273  0070E0  0012               	return		;funcret
  2274  0070E2                     __end_of_setupPWMRight:
  2275                           	opt callstack 0
  2276                           
  2277 ;; *************** function _setupPWMLeft *****************
  2278 ;; Defined at:
  2279 ;;		line 24 in file "./functions.c"
  2280 ;; Parameters:    Size  Location     Type
  2281 ;;		None
  2282 ;; Auto vars:     Size  Location     Type
  2283 ;;		None
  2284 ;; Return value:  Size  Location     Type
  2285 ;;                  1    wreg      void 
  2286 ;; Registers used:
  2287 ;;		wreg, status,2
  2288 ;; Tracked objects:
  2289 ;;		On entry : 0/0
  2290 ;;		On exit  : 0/0
  2291 ;;		Unchanged: 0/0
  2292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2293 ;;      Params:         0       0       0       0       0       0       0
  2294 ;;      Locals:         0       0       0       0       0       0       0
  2295 ;;      Temps:          0       0       0       0       0       0       0
  2296 ;;      Totals:         0       0       0       0       0       0       0
  2297 ;;Total ram usage:        0 bytes
  2298 ;; Hardware stack levels used:    1
  2299 ;; This function calls:
  2300 ;;		Nothing
  2301 ;; This function is called by:
  2302 ;;		_navigate
  2303 ;;		_RCE
  2304 ;; This function uses a non-reentrant model
  2305 ;;
  2306                           
  2307                           	psect	text14
  2308  00709E                     __ptext14:
  2309                           	opt callstack 0
  2310  00709E                     _setupPWMLeft:
  2311                           	opt callstack 29
  2312                           
  2313                           ;./functions.c: 26:     CCP1CON = 0;
  2314                           
  2315                           ; BSR set to: 15
  2316                           ;incstack = 0
  2317  00709E  0E00               	movlw	0
  2318  0070A0  6EBD               	movwf	4029,c	;volatile
  2319                           
  2320                           ;./functions.c: 27:     PR2 = 255;
  2321  0070A2  68BB               	setf	4027,c	;volatile
  2322                           
  2323                           ;./functions.c: 28:     CCPR1L = 255;
  2324  0070A4  68BE               	setf	4030,c	;volatile
  2325                           
  2326                           ;./functions.c: 30:     TRISCbits.RC2 = 0;
  2327  0070A6  9494               	bcf	3988,2,c	;volatile
  2328                           
  2329                           ;./functions.c: 32:     CCPTMRS0 = 0;
  2330  0070A8  0E00               	movlw	0
  2331  0070AA  010F               	movlb	15	; () banked
  2332  0070AC  6F49               	movwf	73,b	;volatile
  2333                           
  2334                           ;./functions.c: 33:     CCP1CON = 0b00001100;
  2335  0070AE  0E0C               	movlw	12
  2336  0070B0  6EBD               	movwf	4029,c	;volatile
  2337                           
  2338                           ;./functions.c: 34:     T2CON = 0b00000000;
  2339  0070B2  0E00               	movlw	0
  2340  0070B4  6EBA               	movwf	4026,c	;volatile
  2341                           
  2342                           ;./functions.c: 35:     TMR2 = 0;
  2343  0070B6  0E00               	movlw	0
  2344  0070B8  6EBC               	movwf	4028,c	;volatile
  2345                           
  2346                           ; BSR set to: 15
  2347                           ;./functions.c: 36:     PIE1bits.TMR1IE = 0;
  2348  0070BA  909D               	bcf	3997,0,c	;volatile
  2349                           
  2350                           ; BSR set to: 15
  2351                           ;./functions.c: 37:     T2CONbits.TMR2ON = 1;
  2352  0070BC  84BA               	bsf	4026,2,c	;volatile
  2353                           
  2354                           ; BSR set to: 15
  2355  0070BE  0012               	return		;funcret
  2356  0070C0                     __end_of_setupPWMLeft:
  2357                           	opt callstack 0
  2358                           
  2359 ;; *************** function _setupADC *****************
  2360 ;; Defined at:
  2361 ;;		line 120 in file "./functions.c"
  2362 ;; Parameters:    Size  Location     Type
  2363 ;;		None
  2364 ;; Auto vars:     Size  Location     Type
  2365 ;;		None
  2366 ;; Return value:  Size  Location     Type
  2367 ;;                  1    wreg      void 
  2368 ;; Registers used:
  2369 ;;		wreg, status,2
  2370 ;; Tracked objects:
  2371 ;;		On entry : 0/0
  2372 ;;		On exit  : 0/0
  2373 ;;		Unchanged: 0/0
  2374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2375 ;;      Params:         0       0       0       0       0       0       0
  2376 ;;      Locals:         0       0       0       0       0       0       0
  2377 ;;      Temps:          0       0       0       0       0       0       0
  2378 ;;      Totals:         0       0       0       0       0       0       0
  2379 ;;Total ram usage:        0 bytes
  2380 ;; Hardware stack levels used:    1
  2381 ;; This function calls:
  2382 ;;		Nothing
  2383 ;; This function is called by:
  2384 ;;		_pyCal
  2385 ;;		_navigate
  2386 ;;		_init
  2387 ;; This function uses a non-reentrant model
  2388 ;;
  2389                           
  2390                           	psect	text15
  2391  00707C                     __ptext15:
  2392                           	opt callstack 0
  2393  00707C                     _setupADC:
  2394                           	opt callstack 29
  2395                           
  2396                           ;./functions.c: 122:     ADCON2bits.ADCS = 0b100;
  2397                           
  2398                           ; BSR set to: 15
  2399                           ;incstack = 0
  2400  00707C  50C0               	movf	4032,w,c	;volatile
  2401  00707E  0BF8               	andlw	-8
  2402  007080  0904               	iorlw	4
  2403  007082  6EC0               	movwf	4032,c	;volatile
  2404                           
  2405                           ;./functions.c: 123:     ADCON1 = 0;
  2406  007084  0E00               	movlw	0
  2407  007086  6EC1               	movwf	4033,c	;volatile
  2408                           
  2409                           ;./functions.c: 124:     ADCON0bits.CHS = 0b01100;
  2410  007088  50C2               	movf	4034,w,c	;volatile
  2411  00708A  0B83               	andlw	-125
  2412  00708C  0930               	iorlw	48
  2413  00708E  6EC2               	movwf	4034,c	;volatile
  2414                           
  2415                           ;./functions.c: 125:     ADCON2bits.ADFM = 0;
  2416  007090  9EC0               	bcf	4032,7,c	;volatile
  2417                           
  2418                           ;./functions.c: 126:     ADCON2bits.ACQT = 0b101;
  2419  007092  50C0               	movf	4032,w,c	;volatile
  2420  007094  0BC7               	andlw	-57
  2421  007096  0928               	iorlw	40
  2422  007098  6EC0               	movwf	4032,c	;volatile
  2423                           
  2424                           ;./functions.c: 127:     ADCON0bits.ADON = 1;
  2425  00709A  80C2               	bsf	4034,0,c	;volatile
  2426  00709C  0012               	return		;funcret
  2427  00709E                     __end_of_setupADC:
  2428                           	opt callstack 0
  2429                           
  2430 ;; *************** function _readAllSensors *****************
  2431 ;; Defined at:
  2432 ;;		line 772 in file "./functions.c"
  2433 ;; Parameters:    Size  Location     Type
  2434 ;;		None
  2435 ;; Auto vars:     Size  Location     Type
  2436 ;;  tempSensorVa    5   12[COMRAM] unsigned char [5]
  2437 ;;  a               1   17[COMRAM] unsigned char 
  2438 ;; Return value:  Size  Location     Type
  2439 ;;                  1    wreg      void 
  2440 ;; Registers used:
  2441 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2442 ;; Tracked objects:
  2443 ;;		On entry : 0/0
  2444 ;;		On exit  : 0/0
  2445 ;;		Unchanged: 0/0
  2446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2447 ;;      Params:         0       0       0       0       0       0       0
  2448 ;;      Locals:         6       0       0       0       0       0       0
  2449 ;;      Temps:          2       0       0       0       0       0       0
  2450 ;;      Totals:         8       0       0       0       0       0       0
  2451 ;;Total ram usage:        8 bytes
  2452 ;; Hardware stack levels used:    1
  2453 ;; Hardware stack levels required when called:    2
  2454 ;; This function calls:
  2455 ;;		_abs
  2456 ;;		_aveSensor
  2457 ;; This function is called by:
  2458 ;;		_pyCal
  2459 ;;		_navigate
  2460 ;; This function uses a non-reentrant model
  2461 ;;
  2462                           
  2463                           	psect	text16
  2464  0077BC                     __ptext16:
  2465                           	opt callstack 0
  2466  0077BC                     _readAllSensors:
  2467                           	opt callstack 26
  2468                           
  2469                           ;./functions.c: 773:     unsigned char tempSensorVals[5];;./functions.c: 774:     unsign
      +                          ed char a;;./functions.c: 775:     for (a = 0; a < 5; a++){
  2470                           
  2471                           ;incstack = 0
  2472  0077BC  0E00               	movlw	0
  2473  0077BE  6E12               	movwf	readAllSensors@a,c
  2474  0077C0                     l2805:
  2475                           
  2476                           ;./functions.c: 776:         tempSensorVals[a] = aveSensor(sensorChannels[a]);
  2477  0077C0  0E0D               	movlw	low readAllSensors@tempSensorVals
  2478  0077C2  2412               	addwf	readAllSensors@a,w,c
  2479  0077C4  6ED9               	movwf	fsr2l,c
  2480  0077C6  6ADA               	clrf	fsr2h,c
  2481  0077C8  0E00               	movlw	high readAllSensors@tempSensorVals
  2482  0077CA  22DA               	addwfc	fsr2h,f,c
  2483  0077CC  0ECA               	movlw	low _sensorChannels
  2484  0077CE  2412               	addwf	readAllSensors@a,w,c
  2485  0077D0  6EE1               	movwf	fsr1l,c
  2486  0077D2  6AE2               	clrf	fsr1h,c
  2487  0077D4  0E00               	movlw	high _sensorChannels
  2488  0077D6  22E2               	addwfc	fsr1h,f,c
  2489  0077D8  50E7               	movf	indf1,w,c
  2490  0077DA  ECDC  F038         	call	_aveSensor
  2491  0077DE  6EDF               	movwf	indf2,c
  2492                           
  2493                           ;./functions.c: 777:     }
  2494  0077E0  2A12               	incf	readAllSensors@a,f,c
  2495  0077E2  0E04               	movlw	4
  2496  0077E4  6412               	cpfsgt	readAllSensors@a,c
  2497  0077E6  D7EC               	goto	l2805
  2498                           
  2499                           ;./functions.c: 778:     for (a = 0; a < 5; a++){
  2500  0077E8  0E00               	movlw	0
  2501  0077EA  6E12               	movwf	readAllSensors@a,c
  2502  0077EC                     l2817:
  2503                           
  2504                           ;./functions.c: 779:         sensorVals[a] = aveSensor(sensorChannels[a]);
  2505  0077EC  0E50               	movlw	low _sensorVals
  2506  0077EE  2412               	addwf	readAllSensors@a,w,c
  2507  0077F0  6ED9               	movwf	fsr2l,c
  2508  0077F2  6ADA               	clrf	fsr2h,c
  2509  0077F4  0E00               	movlw	high _sensorVals
  2510  0077F6  22DA               	addwfc	fsr2h,f,c
  2511  0077F8  0ECA               	movlw	low _sensorChannels
  2512  0077FA  2412               	addwf	readAllSensors@a,w,c
  2513  0077FC  6EE1               	movwf	fsr1l,c
  2514  0077FE  6AE2               	clrf	fsr1h,c
  2515  007800  0E00               	movlw	high _sensorChannels
  2516  007802  22E2               	addwfc	fsr1h,f,c
  2517  007804  50E7               	movf	indf1,w,c
  2518  007806  ECDC  F038         	call	_aveSensor
  2519  00780A  6EDF               	movwf	indf2,c
  2520                           
  2521                           ;./functions.c: 781:         if (abs(tempSensorVals[a] - sensorVals[a]) > 30){
  2522  00780C  0E0D               	movlw	low readAllSensors@tempSensorVals
  2523  00780E  2412               	addwf	readAllSensors@a,w,c
  2524  007810  6ED9               	movwf	fsr2l,c
  2525  007812  6ADA               	clrf	fsr2h,c
  2526  007814  0E00               	movlw	high readAllSensors@tempSensorVals
  2527  007816  22DA               	addwfc	fsr2h,f,c
  2528  007818  50DF               	movf	indf2,w,c
  2529  00781A  6E0B               	movwf	??_readAllSensors& (0+255),c
  2530  00781C  0E50               	movlw	low _sensorVals
  2531  00781E  2412               	addwf	readAllSensors@a,w,c
  2532  007820  6ED9               	movwf	fsr2l,c
  2533  007822  6ADA               	clrf	fsr2h,c
  2534  007824  0E00               	movlw	high _sensorVals
  2535  007826  22DA               	addwfc	fsr2h,f,c
  2536  007828  50DF               	movf	indf2,w,c
  2537  00782A  6E0C               	movwf	(??_readAllSensors+1)& (0+255),c
  2538  00782C  500C               	movf	??_readAllSensors+1,w,c
  2539  00782E  5C0B               	subwf	??_readAllSensors,w,c
  2540  007830  6E01               	movwf	abs@a,c
  2541  007832  6A02               	clrf	abs@a+1,c
  2542  007834  A0D8               	btfss	status,0,c
  2543  007836  0602               	decf	abs@a+1,f,c
  2544  007838  EC89  F038         	call	_abs	;wreg free
  2545  00783C  BE02               	btfsc	?_abs+1,7,c
  2546  00783E  D024               	goto	l2825
  2547  007840  5002               	movf	?_abs+1,w,c
  2548  007842  E104               	bnz	u1530
  2549  007844  0E1F               	movlw	31
  2550  007846  5C01               	subwf	?_abs,w,c
  2551  007848  A0D8               	btfss	status,0,c
  2552  00784A  D01E               	goto	l2825
  2553  00784C                     u1530:
  2554                           
  2555                           ;./functions.c: 782:             if (sensorVals[a] > tempSensorVals[a]){
  2556  00784C  0E50               	movlw	low _sensorVals
  2557  00784E  2412               	addwf	readAllSensors@a,w,c
  2558  007850  6ED9               	movwf	fsr2l,c
  2559  007852  6ADA               	clrf	fsr2h,c
  2560  007854  0E00               	movlw	high _sensorVals
  2561  007856  22DA               	addwfc	fsr2h,f,c
  2562  007858  0E0D               	movlw	low readAllSensors@tempSensorVals
  2563  00785A  2412               	addwf	readAllSensors@a,w,c
  2564  00785C  6EE1               	movwf	fsr1l,c
  2565  00785E  6AE2               	clrf	fsr1h,c
  2566  007860  0E00               	movlw	high readAllSensors@tempSensorVals
  2567  007862  22E2               	addwfc	fsr1h,f,c
  2568  007864  50DE               	movf	postinc2,w,c
  2569  007866  5CE6               	subwf	postinc1,w,c
  2570  007868  B0D8               	btfsc	status,0,c
  2571  00786A  D00E               	goto	l2825
  2572                           
  2573                           ;./functions.c: 783:                 sensorVals[a] = tempSensorVals[a];
  2574  00786C  0E0D               	movlw	low readAllSensors@tempSensorVals
  2575  00786E  2412               	addwf	readAllSensors@a,w,c
  2576  007870  6ED9               	movwf	fsr2l,c
  2577  007872  6ADA               	clrf	fsr2h,c
  2578  007874  0E00               	movlw	high readAllSensors@tempSensorVals
  2579  007876  22DA               	addwfc	fsr2h,f,c
  2580  007878  0E50               	movlw	low _sensorVals
  2581  00787A  2412               	addwf	readAllSensors@a,w,c
  2582  00787C  6EE1               	movwf	fsr1l,c
  2583  00787E  6AE2               	clrf	fsr1h,c
  2584  007880  0E00               	movlw	high _sensorVals
  2585  007882  22E2               	addwfc	fsr1h,f,c
  2586  007884  CFDF FFE7          	movff	indf2,indf1
  2587  007888                     l2825:
  2588                           
  2589                           ;./functions.c: 786:     }
  2590  007888  2A12               	incf	readAllSensors@a,f,c
  2591  00788A  0E04               	movlw	4
  2592  00788C  6412               	cpfsgt	readAllSensors@a,c
  2593  00788E  D7AE               	goto	l2817
  2594  007890  0012               	return	
  2595  007892                     __end_of_readAllSensors:
  2596                           	opt callstack 0
  2597                           
  2598 ;; *************** function _displayRaceColor *****************
  2599 ;; Defined at:
  2600 ;;		line 752 in file "./functions.c"
  2601 ;; Parameters:    Size  Location     Type
  2602 ;;		None
  2603 ;; Auto vars:     Size  Location     Type
  2604 ;;		None
  2605 ;; Return value:  Size  Location     Type
  2606 ;;                  1    wreg      void 
  2607 ;; Registers used:
  2608 ;;		wreg, status,2
  2609 ;; Tracked objects:
  2610 ;;		On entry : 0/0
  2611 ;;		On exit  : 0/0
  2612 ;;		Unchanged: 0/0
  2613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2614 ;;      Params:         0       0       0       0       0       0       0
  2615 ;;      Locals:         0       0       0       0       0       0       0
  2616 ;;      Temps:          0       0       0       0       0       0       0
  2617 ;;      Totals:         0       0       0       0       0       0       0
  2618 ;;Total ram usage:        0 bytes
  2619 ;; Hardware stack levels used:    1
  2620 ;; This function calls:
  2621 ;;		Nothing
  2622 ;; This function is called by:
  2623 ;;		_navigate
  2624 ;; This function uses a non-reentrant model
  2625 ;;
  2626                           
  2627                           	psect	text17
  2628  00717A                     __ptext17:
  2629                           	opt callstack 0
  2630  00717A                     _displayRaceColor:
  2631                           	opt callstack 28
  2632                           
  2633                           ;./functions.c: 753:     if (raceColor[0]){
  2634                           
  2635                           ;incstack = 0
  2636  00717A  0100               	movlb	0	; () banked
  2637  00717C  51BA               	movf	_raceColor& (0+255),w,b
  2638  00717E  B4D8               	btfsc	status,2,c
  2639  007180  D003               	goto	l2833
  2640                           
  2641                           ; BSR set to: 0
  2642                           ;./functions.c: 754:         PORTD = 0b10111111;
  2643  007182  0EBF               	movlw	191
  2644  007184  6E83               	movwf	3971,c	;volatile
  2645                           
  2646                           ;./functions.c: 755:     }
  2647  007186  0012               	return	
  2648  007188                     l2833:
  2649                           
  2650                           ; BSR set to: 0
  2651  007188  51BB               	movf	(_raceColor+1)& (0+255),w,b
  2652  00718A  B4D8               	btfsc	status,2,c
  2653  00718C  D003               	goto	l2837
  2654                           
  2655                           ; BSR set to: 0
  2656                           ;./functions.c: 757:         PORTD = 0b10000010;
  2657  00718E  0E82               	movlw	130
  2658  007190  6E83               	movwf	3971,c	;volatile
  2659                           
  2660                           ;./functions.c: 758:     }
  2661  007192  0012               	return	
  2662  007194                     l2837:
  2663                           
  2664                           ; BSR set to: 0
  2665  007194  51BC               	movf	(_raceColor+2)& (0+255),w,b
  2666  007196  B4D8               	btfsc	status,2,c
  2667  007198  D003               	goto	l2841
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;./functions.c: 760:         PORTD = 0b10001000;
  2671  00719A  0E88               	movlw	136
  2672  00719C  6E83               	movwf	3971,c	;volatile
  2673                           
  2674                           ;./functions.c: 761:     }
  2675  00719E  0012               	return	
  2676  0071A0                     l2841:
  2677                           
  2678                           ; BSR set to: 0
  2679  0071A0  51BD               	movf	(_raceColor+3)& (0+255),w,b
  2680  0071A2  B4D8               	btfsc	status,2,c
  2681  0071A4  D003               	goto	l2845
  2682                           
  2683                           ; BSR set to: 0
  2684                           ;./functions.c: 763:         PORTD = 0b10000000;
  2685  0071A6  0E80               	movlw	128
  2686  0071A8  6E83               	movwf	3971,c	;volatile
  2687                           
  2688                           ;./functions.c: 764:     }
  2689  0071AA  0012               	return	
  2690  0071AC                     l2845:
  2691                           
  2692                           ; BSR set to: 0
  2693  0071AC  51BE               	movf	(_raceColor+4)& (0+255),w,b
  2694  0071AE  B4D8               	btfsc	status,2,c
  2695  0071B0  0012               	return	
  2696                           
  2697                           ; BSR set to: 0
  2698                           ;./functions.c: 766:         PORTD = 0b11001000;
  2699  0071B2  0EC8               	movlw	200
  2700  0071B4  6E83               	movwf	3971,c	;volatile
  2701  0071B6  0012               	return	
  2702  0071B8                     __end_of_displayRaceColor:
  2703                           	opt callstack 0
  2704                           
  2705 ;; *************** function _displayColorDetected *****************
  2706 ;; Defined at:
  2707 ;;		line 687 in file "./functions.c"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;  sensor          1    wreg     unsigned char 
  2710 ;; Auto vars:     Size  Location     Type
  2711 ;;  sensor          1    2[COMRAM] unsigned char 
  2712 ;; Return value:  Size  Location     Type
  2713 ;;                  1    wreg      void 
  2714 ;; Registers used:
  2715 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2716 ;; Tracked objects:
  2717 ;;		On entry : 0/0
  2718 ;;		On exit  : 0/0
  2719 ;;		Unchanged: 0/0
  2720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2721 ;;      Params:         0       0       0       0       0       0       0
  2722 ;;      Locals:         1       0       0       0       0       0       0
  2723 ;;      Temps:          2       0       0       0       0       0       0
  2724 ;;      Totals:         3       0       0       0       0       0       0
  2725 ;;Total ram usage:        3 bytes
  2726 ;; Hardware stack levels used:    1
  2727 ;; This function calls:
  2728 ;;		Nothing
  2729 ;; This function is called by:
  2730 ;;		_navigate
  2731 ;; This function uses a non-reentrant model
  2732 ;;
  2733                           
  2734                           	psect	text18
  2735  00760E                     __ptext18:
  2736                           	opt callstack 0
  2737  00760E                     _displayColorDetected:
  2738                           	opt callstack 28
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;incstack = 0
  2742                           ;displayColorDetected@sensor stored from wreg
  2743  00760E  6E03               	movwf	displayColorDetected@sensor,c
  2744                           
  2745                           ;./functions.c: 688:     switch (colorsDetected[sensor])
  2746  007610  D024               	goto	l2881
  2747  007612                     l433:
  2748                           
  2749                           ;./functions.c: 691:         PORTAbits.RA0 = 1;
  2750  007612  8080               	bsf	3968,0,c	;volatile
  2751                           
  2752                           ;./functions.c: 692:         PORTAbits.RA1 = 0;
  2753  007614  9280               	bcf	3968,1,c	;volatile
  2754                           
  2755                           ;./functions.c: 693:         PORTAbits.RA2 = 0;
  2756  007616  9480               	bcf	3968,2,c	;volatile
  2757                           
  2758                           ;./functions.c: 694:         PORTAbits.RA3 = 0;
  2759  007618  9680               	bcf	3968,3,c	;volatile
  2760                           
  2761                           ;./functions.c: 695:         PORTAbits.RA4 = 0;
  2762  00761A  9880               	bcf	3968,4,c	;volatile
  2763                           
  2764                           ;./functions.c: 696:         break;
  2765  00761C  0012               	return	
  2766  00761E                     l435:
  2767                           
  2768                           ;./functions.c: 698:         PORTAbits.RA0 = 0;
  2769  00761E  9080               	bcf	3968,0,c	;volatile
  2770                           
  2771                           ;./functions.c: 699:         PORTAbits.RA1 = 1;
  2772  007620  8280               	bsf	3968,1,c	;volatile
  2773                           
  2774                           ;./functions.c: 700:         PORTAbits.RA2 = 0;
  2775  007622  9480               	bcf	3968,2,c	;volatile
  2776                           
  2777                           ;./functions.c: 701:         PORTAbits.RA3 = 0;
  2778  007624  9680               	bcf	3968,3,c	;volatile
  2779                           
  2780                           ;./functions.c: 702:         PORTAbits.RA4 = 0;
  2781  007626  9880               	bcf	3968,4,c	;volatile
  2782                           
  2783                           ;./functions.c: 703:         break;
  2784  007628  0012               	return	
  2785  00762A                     l436:
  2786                           
  2787                           ;./functions.c: 705:         PORTAbits.RA0 = 0;
  2788  00762A  9080               	bcf	3968,0,c	;volatile
  2789                           
  2790                           ;./functions.c: 706:         PORTAbits.RA1 = 0;
  2791  00762C  9280               	bcf	3968,1,c	;volatile
  2792                           
  2793                           ;./functions.c: 707:         PORTAbits.RA2 = 1;
  2794  00762E  8480               	bsf	3968,2,c	;volatile
  2795                           
  2796                           ;./functions.c: 708:         PORTAbits.RA3 = 0;
  2797  007630  9680               	bcf	3968,3,c	;volatile
  2798                           
  2799                           ;./functions.c: 709:         PORTAbits.RA4 = 0;
  2800  007632  9880               	bcf	3968,4,c	;volatile
  2801                           
  2802                           ;./functions.c: 710:         break;
  2803  007634  0012               	return	
  2804  007636                     l437:
  2805                           
  2806                           ;./functions.c: 712:         PORTAbits.RA0 = 0;
  2807  007636  9080               	bcf	3968,0,c	;volatile
  2808                           
  2809                           ;./functions.c: 713:         PORTAbits.RA1 = 0;
  2810  007638  9280               	bcf	3968,1,c	;volatile
  2811                           
  2812                           ;./functions.c: 714:         PORTAbits.RA2 = 0;
  2813  00763A  9480               	bcf	3968,2,c	;volatile
  2814                           
  2815                           ;./functions.c: 715:         PORTAbits.RA3 = 1;
  2816  00763C  8680               	bsf	3968,3,c	;volatile
  2817                           
  2818                           ;./functions.c: 716:         PORTAbits.RA4 = 0;
  2819  00763E  9880               	bcf	3968,4,c	;volatile
  2820                           
  2821                           ;./functions.c: 717:         break;
  2822  007640  0012               	return	
  2823  007642                     l438:
  2824                           
  2825                           ;./functions.c: 719:         PORTAbits.RA0 = 0;
  2826  007642  9080               	bcf	3968,0,c	;volatile
  2827                           
  2828                           ;./functions.c: 720:         PORTAbits.RA1 = 0;
  2829  007644  9280               	bcf	3968,1,c	;volatile
  2830                           
  2831                           ;./functions.c: 721:         PORTAbits.RA2 = 0;
  2832  007646  9480               	bcf	3968,2,c	;volatile
  2833                           
  2834                           ;./functions.c: 722:         PORTAbits.RA3 = 0;
  2835  007648  9680               	bcf	3968,3,c	;volatile
  2836                           
  2837                           ;./functions.c: 723:         PORTAbits.RA4 = 1;
  2838  00764A  8880               	bsf	3968,4,c	;volatile
  2839                           
  2840                           ;./functions.c: 724:         break;
  2841  00764C  0012               	return	
  2842  00764E                     l439:
  2843                           
  2844                           ;./functions.c: 727:         PORTAbits.RA0 = 1;
  2845  00764E  8080               	bsf	3968,0,c	;volatile
  2846                           
  2847                           ;./functions.c: 728:         PORTAbits.RA1 = 1;
  2848  007650  8280               	bsf	3968,1,c	;volatile
  2849                           
  2850                           ;./functions.c: 729:         PORTAbits.RA2 = 1;
  2851  007652  8480               	bsf	3968,2,c	;volatile
  2852                           
  2853                           ;./functions.c: 730:         PORTAbits.RA3 = 1;
  2854  007654  8680               	bsf	3968,3,c	;volatile
  2855                           
  2856                           ;./functions.c: 731:         PORTAbits.RA4 = 1;
  2857  007656  8880               	bsf	3968,4,c	;volatile
  2858                           
  2859                           ;./functions.c: 732:         break;
  2860  007658  0012               	return	
  2861  00765A                     l2881:
  2862  00765A  0EE9               	movlw	low _colorsDetected
  2863  00765C  2403               	addwf	displayColorDetected@sensor,w,c
  2864  00765E  6ED9               	movwf	fsr2l,c
  2865  007660  6ADA               	clrf	fsr2h,c
  2866  007662  0E00               	movlw	high _colorsDetected
  2867  007664  22DA               	addwfc	fsr2h,f,c
  2868  007666  50DF               	movf	indf2,w,c
  2869  007668  6E01               	movwf	??_displayColorDetected& (0+255),c
  2870  00766A  6A02               	clrf	(??_displayColorDetected+1)& (0+255),c
  2871                           
  2872                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2873                           ; Switch size 1, requested type "simple"
  2874                           ; Number of cases is 1, Range of values is 0 to 0
  2875                           ; switch strategies available:
  2876                           ; Name         Instructions Cycles
  2877                           ; simple_byte            4     3 (average)
  2878                           ;	Chosen strategy is simple_byte
  2879  00766C  5002               	movf	??_displayColorDetected+1,w,c
  2880  00766E  0A00               	xorlw	0	; case 0
  2881  007670  A4D8               	btfss	status,2,c
  2882  007672  D7ED               	goto	l439
  2883                           
  2884                           ; Switch size 1, requested type "simple"
  2885                           ; Number of cases is 5, Range of values is 66 to 110
  2886                           ; switch strategies available:
  2887                           ; Name         Instructions Cycles
  2888                           ; simple_byte           16     9 (average)
  2889                           ;	Chosen strategy is simple_byte
  2890  007674  5001               	movf	??_displayColorDetected,w,c
  2891  007676  0A42               	xorlw	66	; case 66
  2892  007678  B4D8               	btfsc	status,2,c
  2893  00767A  D7DD               	goto	l437
  2894  00767C  0A05               	xorlw	5	; case 71
  2895  00767E  B4D8               	btfsc	status,2,c
  2896  007680  D7CE               	goto	l435
  2897  007682  0A15               	xorlw	21	; case 82
  2898  007684  B4D8               	btfsc	status,2,c
  2899  007686  D7D1               	goto	l436
  2900  007688  0A05               	xorlw	5	; case 87
  2901  00768A  B4D8               	btfsc	status,2,c
  2902  00768C  D7C2               	goto	l433
  2903  00768E  0A39               	xorlw	57	; case 110
  2904  007690  B4D8               	btfsc	status,2,c
  2905  007692  D7D7               	goto	l438
  2906  007694  D7DC               	goto	l439
  2907  007696                     __end_of_displayColorDetected:
  2908                           	opt callstack 0
  2909                           
  2910 ;; *************** function _determineDirection *****************
  2911 ;; Defined at:
  2912 ;;		line 590 in file "./functions.c"
  2913 ;; Parameters:    Size  Location     Type
  2914 ;;		None
  2915 ;; Auto vars:     Size  Location     Type
  2916 ;;		None
  2917 ;; Return value:  Size  Location     Type
  2918 ;;                  1    wreg      void 
  2919 ;; Registers used:
  2920 ;;		wreg, status,2, status,0, cstack
  2921 ;; Tracked objects:
  2922 ;;		On entry : 0/0
  2923 ;;		On exit  : 0/0
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2926 ;;      Params:         0       0       0       0       0       0       0
  2927 ;;      Locals:         0       0       0       0       0       0       0
  2928 ;;      Temps:          0       0       0       0       0       0       0
  2929 ;;      Totals:         0       0       0       0       0       0       0
  2930 ;;Total ram usage:        0 bytes
  2931 ;; Hardware stack levels used:    1
  2932 ;; Hardware stack levels required when called:    2
  2933 ;; This function calls:
  2934 ;;		_hardLeft
  2935 ;;		_hardRight
  2936 ;;		_left
  2937 ;;		_right
  2938 ;;		_searchMode
  2939 ;;		_straight
  2940 ;; This function is called by:
  2941 ;;		_navigate
  2942 ;; This function uses a non-reentrant model
  2943 ;;
  2944                           
  2945                           	psect	text19
  2946  007720                     __ptext19:
  2947                           	opt callstack 0
  2948  007720                     _determineDirection:
  2949                           	opt callstack 26
  2950                           
  2951                           ;./functions.c: 593:     static unsigned char rc = 0;;./functions.c: 594:     if (rc == 
      +                          0){
  2952                           
  2953                           ;incstack = 0
  2954  007720  505D               	movf	determineDirection@rc,w,c
  2955  007722  A4D8               	btfss	status,2,c
  2956  007724  D018               	goto	l379
  2957                           
  2958                           ;./functions.c: 595:         if (raceColor[0])
  2959  007726  0100               	movlb	0	; () banked
  2960  007728  51BA               	movf	_raceColor& (0+255),w,b
  2961  00772A  B4D8               	btfsc	status,2,c
  2962  00772C  D002               	goto	l2893
  2963                           
  2964                           ; BSR set to: 0
  2965                           ;./functions.c: 596:         {;./functions.c: 597:             rc = 'W';
  2966  00772E  0E57               	movlw	87
  2967  007730  D011               	goto	L3
  2968  007732                     l2893:
  2969                           
  2970                           ; BSR set to: 0
  2971  007732  51BB               	movf	(_raceColor+1)& (0+255),w,b
  2972  007734  B4D8               	btfsc	status,2,c
  2973  007736  D002               	goto	l2897
  2974                           
  2975                           ; BSR set to: 0
  2976                           ;./functions.c: 600:         {;./functions.c: 601:             rc = 'G';
  2977  007738  0E47               	movlw	71
  2978  00773A  D00C               	goto	L3
  2979  00773C                     l2897:
  2980                           
  2981                           ; BSR set to: 0
  2982  00773C  51BC               	movf	(_raceColor+2)& (0+255),w,b
  2983  00773E  B4D8               	btfsc	status,2,c
  2984  007740  D002               	goto	l2901
  2985  007742                     u1690:
  2986                           
  2987                           ; BSR set to: 0
  2988                           ;./functions.c: 604:         {;./functions.c: 605:             rc = 'B';
  2989  007742  0E42               	movlw	66
  2990  007744  D007               	goto	L3
  2991  007746                     l2901:
  2992                           
  2993                           ; BSR set to: 0
  2994  007746  51BD               	movf	(_raceColor+3)& (0+255),w,b
  2995  007748  A4D8               	btfss	status,2,c
  2996  00774A  D7FB               	goto	u1690
  2997                           
  2998                           ; BSR set to: 0
  2999  00774C  51BE               	movf	(_raceColor+4)& (0+255),w,b
  3000  00774E  B4D8               	btfsc	status,2,c
  3001  007750  D002               	goto	l379
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;./functions.c: 612:         {;./functions.c: 613:             rc = 'n';
  3005  007752  0E6E               	movlw	110
  3006  007754                     L3:
  3007  007754  6E5D               	movwf	determineDirection@rc,c
  3008  007756                     l379:
  3009                           
  3010                           ;./functions.c: 617:     if (colorsDetected[2] == raceDayColor){
  3011                           
  3012                           ; BSR set to: 0
  3013  007756  5055               	movf	_raceDayColor,w,c
  3014  007758  0100               	movlb	0	; () banked
  3015  00775A  19EB               	xorwf	(_colorsDetected+2)& (0+255),w,b
  3016  00775C  A4D8               	btfss	status,2,c
  3017  00775E  D003               	goto	l2913
  3018                           
  3019                           ; BSR set to: 0
  3020                           ;./functions.c: 618:         straight();
  3021  007760  ECE8  F037         	call	_straight	;wreg free
  3022                           
  3023                           ;./functions.c: 619:     }
  3024  007764  0012               	return	
  3025  007766                     l2913:
  3026                           
  3027                           ; BSR set to: 0
  3028  007766  5055               	movf	_raceDayColor,w,c
  3029  007768  19EA               	xorwf	(_colorsDetected+1)& (0+255),w,b
  3030  00776A  A4D8               	btfss	status,2,c
  3031  00776C  D003               	goto	l2917
  3032                           
  3033                           ; BSR set to: 0
  3034                           ;./functions.c: 621:         left();
  3035  00776E  ECCE  F037         	call	_left	;wreg free
  3036                           
  3037                           ;./functions.c: 622:     }
  3038  007772  0012               	return	
  3039  007774                     l2917:
  3040                           
  3041                           ; BSR set to: 0
  3042  007774  5055               	movf	_raceDayColor,w,c
  3043  007776  19EC               	xorwf	(_colorsDetected+3)& (0+255),w,b
  3044  007778  A4D8               	btfss	status,2,c
  3045  00777A  D003               	goto	l2921
  3046                           
  3047                           ; BSR set to: 0
  3048                           ;./functions.c: 624:         right();
  3049  00777C  ECDB  F037         	call	_right	;wreg free
  3050                           
  3051                           ;./functions.c: 625:     }
  3052  007780  0012               	return	
  3053  007782                     l2921:
  3054                           
  3055                           ; BSR set to: 0
  3056  007782  5055               	movf	_raceDayColor,w,c
  3057  007784  19E9               	xorwf	_colorsDetected& (0+255),w,b
  3058  007786  A4D8               	btfss	status,2,c
  3059  007788  D003               	goto	l2925
  3060                           
  3061                           ; BSR set to: 0
  3062                           ;./functions.c: 627:         hardLeft();
  3063  00778A  ECB4  F037         	call	_hardLeft	;wreg free
  3064                           
  3065                           ;./functions.c: 628:     }
  3066  00778E  0012               	return	
  3067  007790                     l2925:
  3068                           
  3069                           ; BSR set to: 0
  3070  007790  5055               	movf	_raceDayColor,w,c
  3071  007792  19ED               	xorwf	(_colorsDetected+4)& (0+255),w,b
  3072  007794  A4D8               	btfss	status,2,c
  3073  007796  D003               	goto	l2929
  3074                           
  3075                           ; BSR set to: 0
  3076                           ;./functions.c: 630:         hardRight();
  3077  007798  ECC1  F037         	call	_hardRight	;wreg free
  3078                           
  3079                           ;./functions.c: 631:     }
  3080  00779C  0012               	return	
  3081  00779E                     l2929:
  3082                           
  3083                           ; BSR set to: 0
  3084                           ;./functions.c: 633:         if (sensorVals[3] > Rranges[0]){
  3085  00779E  5053               	movf	_sensorVals+3,w,c
  3086  0077A0  5C58               	subwf	_Rranges,w,c
  3087  0077A2  B0D8               	btfsc	status,0,c
  3088  0077A4  D003               	goto	l2933
  3089                           
  3090                           ; BSR set to: 0
  3091                           ;./functions.c: 634:             right();
  3092  0077A6  ECDB  F037         	call	_right	;wreg free
  3093                           
  3094                           ;./functions.c: 635:         } else if (sensorVals[4] > RRranges[0]){
  3095  0077AA  D005               	goto	l396
  3096  0077AC                     l2933:
  3097                           
  3098                           ; BSR set to: 0
  3099  0077AC  5054               	movf	_sensorVals+4,w,c
  3100  0077AE  5DD5               	subwf	_RRranges& (0+255),w,b
  3101  0077B0  A0D8               	btfss	status,0,c
  3102                           
  3103                           ; BSR set to: 0
  3104                           ;./functions.c: 636:             hardRight();
  3105  0077B2  ECC1  F037         	call	_hardRight	;wreg free
  3106  0077B6                     l396:
  3107                           
  3108                           ;./functions.c: 638:         searchMode();
  3109  0077B6  EC94  F037         	call	_searchMode	;wreg free
  3110  0077BA  0012               	return		;funcret
  3111  0077BC                     __end_of_determineDirection:
  3112                           	opt callstack 0
  3113                           
  3114 ;; *************** function _straight *****************
  3115 ;; Defined at:
  3116 ;;		line 496 in file "./functions.c"
  3117 ;; Parameters:    Size  Location     Type
  3118 ;;		None
  3119 ;; Auto vars:     Size  Location     Type
  3120 ;;		None
  3121 ;; Return value:  Size  Location     Type
  3122 ;;                  1    wreg      void 
  3123 ;; Registers used:
  3124 ;;		wreg, status,2
  3125 ;; Tracked objects:
  3126 ;;		On entry : 0/0
  3127 ;;		On exit  : 0/0
  3128 ;;		Unchanged: 0/0
  3129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3130 ;;      Params:         0       0       0       0       0       0       0
  3131 ;;      Locals:         0       0       0       0       0       0       0
  3132 ;;      Temps:          0       0       0       0       0       0       0
  3133 ;;      Totals:         0       0       0       0       0       0       0
  3134 ;;Total ram usage:        0 bytes
  3135 ;; Hardware stack levels used:    1
  3136 ;; This function calls:
  3137 ;;		Nothing
  3138 ;; This function is called by:
  3139 ;;		_determineDirection
  3140 ;; This function uses a non-reentrant model
  3141 ;;
  3142                           
  3143                           	psect	text20
  3144  006FD0                     __ptext20:
  3145                           	opt callstack 0
  3146  006FD0                     _straight:
  3147                           	opt callstack 27
  3148                           
  3149                           ;./functions.c: 497:     PORTAbits.RA5 = 1;
  3150                           
  3151                           ;incstack = 0
  3152  006FD0  8A80               	bsf	3968,5,c	;volatile
  3153                           
  3154                           ;./functions.c: 498:     PORTAbits.RA6 = 0;
  3155  006FD2  9C80               	bcf	3968,6,c	;volatile
  3156                           
  3157                           ;./functions.c: 499:     PORTAbits.RA7 = 0;
  3158  006FD4  9E80               	bcf	3968,7,c	;volatile
  3159                           
  3160                           ;./functions.c: 501:     PORTCbits.RC0 = 0;
  3161  006FD6  9082               	bcf	3970,0,c	;volatile
  3162                           
  3163                           ;./functions.c: 502:     PORTCbits.RC1 = 1;
  3164  006FD8  8282               	bsf	3970,1,c	;volatile
  3165                           
  3166                           ;./functions.c: 504:     PORTEbits.RE0 = 0;
  3167  006FDA  9084               	bcf	3972,0,c	;volatile
  3168                           
  3169                           ;./functions.c: 505:     PORTEbits.RE1 = 1;
  3170  006FDC  8284               	bsf	3972,1,c	;volatile
  3171                           
  3172                           ;./functions.c: 507:     CCPR1L = 250;
  3173  006FDE  0EFA               	movlw	250
  3174  006FE0  6EBE               	movwf	4030,c	;volatile
  3175                           
  3176                           ;./functions.c: 508:     CCPR5L = 250;
  3177  006FE2  0EFA               	movlw	250
  3178  006FE4  010F               	movlb	15	; () banked
  3179  006FE6  6F55               	movwf	85,b	;volatile
  3180                           
  3181                           ; BSR set to: 15
  3182  006FE8  0012               	return		;funcret
  3183  006FEA                     __end_of_straight:
  3184                           	opt callstack 0
  3185                           
  3186 ;; *************** function _searchMode *****************
  3187 ;; Defined at:
  3188 ;;		line 481 in file "./functions.c"
  3189 ;; Parameters:    Size  Location     Type
  3190 ;;		None
  3191 ;; Auto vars:     Size  Location     Type
  3192 ;;		None
  3193 ;; Return value:  Size  Location     Type
  3194 ;;                  1    wreg      void 
  3195 ;; Registers used:
  3196 ;;		wreg, status,2, cstack
  3197 ;; Tracked objects:
  3198 ;;		On entry : 0/0
  3199 ;;		On exit  : 0/0
  3200 ;;		Unchanged: 0/0
  3201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3202 ;;      Params:         0       0       0       0       0       0       0
  3203 ;;      Locals:         0       0       0       0       0       0       0
  3204 ;;      Temps:          0       0       0       0       0       0       0
  3205 ;;      Totals:         0       0       0       0       0       0       0
  3206 ;;Total ram usage:        0 bytes
  3207 ;; Hardware stack levels used:    1
  3208 ;; Hardware stack levels required when called:    1
  3209 ;; This function calls:
  3210 ;;		_right
  3211 ;; This function is called by:
  3212 ;;		_determineDirection
  3213 ;; This function uses a non-reentrant model
  3214 ;;
  3215                           
  3216                           	psect	text21
  3217  006F28                     __ptext21:
  3218                           	opt callstack 0
  3219  006F28                     _searchMode:
  3220                           	opt callstack 26
  3221                           
  3222                           ;./functions.c: 482:     PORTAbits.RA5 = 1;
  3223                           
  3224                           ; BSR set to: 15
  3225                           ;incstack = 0
  3226  006F28  8A80               	bsf	3968,5,c	;volatile
  3227                           
  3228                           ;./functions.c: 483:     PORTAbits.RA6 = 1;
  3229  006F2A  8C80               	bsf	3968,6,c	;volatile
  3230                           
  3231                           ;./functions.c: 484:     PORTAbits.RA7 = 1;
  3232  006F2C  8E80               	bsf	3968,7,c	;volatile
  3233                           
  3234                           ;./functions.c: 485:     right();
  3235  006F2E  ECDB  F037         	call	_right	;wreg free
  3236  006F32  0012               	return		;funcret
  3237  006F34                     __end_of_searchMode:
  3238                           	opt callstack 0
  3239                           
  3240 ;; *************** function _right *****************
  3241 ;; Defined at:
  3242 ;;		line 543 in file "./functions.c"
  3243 ;; Parameters:    Size  Location     Type
  3244 ;;		None
  3245 ;; Auto vars:     Size  Location     Type
  3246 ;;		None
  3247 ;; Return value:  Size  Location     Type
  3248 ;;                  1    wreg      void 
  3249 ;; Registers used:
  3250 ;;		wreg, status,2
  3251 ;; Tracked objects:
  3252 ;;		On entry : 0/0
  3253 ;;		On exit  : 0/0
  3254 ;;		Unchanged: 0/0
  3255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3256 ;;      Params:         0       0       0       0       0       0       0
  3257 ;;      Locals:         0       0       0       0       0       0       0
  3258 ;;      Temps:          0       0       0       0       0       0       0
  3259 ;;      Totals:         0       0       0       0       0       0       0
  3260 ;;Total ram usage:        0 bytes
  3261 ;; Hardware stack levels used:    1
  3262 ;; This function calls:
  3263 ;;		Nothing
  3264 ;; This function is called by:
  3265 ;;		_searchMode
  3266 ;;		_determineDirection
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           	psect	text22
  3271  006FB6                     __ptext22:
  3272                           	opt callstack 0
  3273  006FB6                     _right:
  3274                           	opt callstack 26
  3275                           
  3276                           ;./functions.c: 544:     PORTAbits.RA5 = 0;
  3277                           
  3278                           ;incstack = 0
  3279  006FB6  9A80               	bcf	3968,5,c	;volatile
  3280                           
  3281                           ;./functions.c: 545:     PORTAbits.RA6 = 1;
  3282  006FB8  8C80               	bsf	3968,6,c	;volatile
  3283                           
  3284                           ;./functions.c: 546:     PORTAbits.RA7 = 0;
  3285  006FBA  9E80               	bcf	3968,7,c	;volatile
  3286                           
  3287                           ;./functions.c: 548:     PORTCbits.RC0 = 0;
  3288  006FBC  9082               	bcf	3970,0,c	;volatile
  3289                           
  3290                           ;./functions.c: 549:     PORTCbits.RC1 = 1;
  3291  006FBE  8282               	bsf	3970,1,c	;volatile
  3292                           
  3293                           ;./functions.c: 551:     PORTEbits.RE0 = 0;
  3294  006FC0  9084               	bcf	3972,0,c	;volatile
  3295                           
  3296                           ;./functions.c: 552:     PORTEbits.RE1 = 1;
  3297  006FC2  8284               	bsf	3972,1,c	;volatile
  3298                           
  3299                           ;./functions.c: 554:     CCPR1L = 180;
  3300  006FC4  0EB4               	movlw	180
  3301  006FC6  6EBE               	movwf	4030,c	;volatile
  3302                           
  3303                           ;./functions.c: 555:     CCPR5L = 120;
  3304  006FC8  0E78               	movlw	120
  3305  006FCA  010F               	movlb	15	; () banked
  3306  006FCC  6F55               	movwf	85,b	;volatile
  3307                           
  3308                           ; BSR set to: 15
  3309  006FCE  0012               	return		;funcret
  3310  006FD0                     __end_of_right:
  3311                           	opt callstack 0
  3312                           
  3313 ;; *************** function _left *****************
  3314 ;; Defined at:
  3315 ;;		line 511 in file "./functions.c"
  3316 ;; Parameters:    Size  Location     Type
  3317 ;;		None
  3318 ;; Auto vars:     Size  Location     Type
  3319 ;;		None
  3320 ;; Return value:  Size  Location     Type
  3321 ;;                  1    wreg      void 
  3322 ;; Registers used:
  3323 ;;		wreg, status,2
  3324 ;; Tracked objects:
  3325 ;;		On entry : 0/0
  3326 ;;		On exit  : 0/0
  3327 ;;		Unchanged: 0/0
  3328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3329 ;;      Params:         0       0       0       0       0       0       0
  3330 ;;      Locals:         0       0       0       0       0       0       0
  3331 ;;      Temps:          0       0       0       0       0       0       0
  3332 ;;      Totals:         0       0       0       0       0       0       0
  3333 ;;Total ram usage:        0 bytes
  3334 ;; Hardware stack levels used:    1
  3335 ;; This function calls:
  3336 ;;		Nothing
  3337 ;; This function is called by:
  3338 ;;		_determineDirection
  3339 ;; This function uses a non-reentrant model
  3340 ;;
  3341                           
  3342                           	psect	text23
  3343  006F9C                     __ptext23:
  3344                           	opt callstack 0
  3345  006F9C                     _left:
  3346                           	opt callstack 27
  3347                           
  3348                           ;./functions.c: 512:     PORTAbits.RA5 = 0;
  3349                           
  3350                           ; BSR set to: 15
  3351                           ;incstack = 0
  3352  006F9C  9A80               	bcf	3968,5,c	;volatile
  3353                           
  3354                           ;./functions.c: 513:     PORTAbits.RA6 = 0;
  3355  006F9E  9C80               	bcf	3968,6,c	;volatile
  3356                           
  3357                           ;./functions.c: 514:     PORTAbits.RA7 = 1;
  3358  006FA0  8E80               	bsf	3968,7,c	;volatile
  3359                           
  3360                           ;./functions.c: 516:     PORTCbits.RC0 = 0;
  3361  006FA2  9082               	bcf	3970,0,c	;volatile
  3362                           
  3363                           ;./functions.c: 517:     PORTCbits.RC1 = 1;
  3364  006FA4  8282               	bsf	3970,1,c	;volatile
  3365                           
  3366                           ;./functions.c: 519:     PORTEbits.RE0 = 0;
  3367  006FA6  9084               	bcf	3972,0,c	;volatile
  3368                           
  3369                           ;./functions.c: 520:     PORTEbits.RE1 = 1;
  3370  006FA8  8284               	bsf	3972,1,c	;volatile
  3371                           
  3372                           ;./functions.c: 522:     CCPR1L = 120;
  3373  006FAA  0E78               	movlw	120
  3374  006FAC  6EBE               	movwf	4030,c	;volatile
  3375                           
  3376                           ;./functions.c: 523:     CCPR5L = 180;
  3377  006FAE  0EB4               	movlw	180
  3378  006FB0  010F               	movlb	15	; () banked
  3379  006FB2  6F55               	movwf	85,b	;volatile
  3380                           
  3381                           ; BSR set to: 15
  3382  006FB4  0012               	return		;funcret
  3383  006FB6                     __end_of_left:
  3384                           	opt callstack 0
  3385                           
  3386 ;; *************** function _hardRight *****************
  3387 ;; Defined at:
  3388 ;;		line 559 in file "./functions.c"
  3389 ;; Parameters:    Size  Location     Type
  3390 ;;		None
  3391 ;; Auto vars:     Size  Location     Type
  3392 ;;		None
  3393 ;; Return value:  Size  Location     Type
  3394 ;;                  1    wreg      void 
  3395 ;; Registers used:
  3396 ;;		wreg, status,2
  3397 ;; Tracked objects:
  3398 ;;		On entry : 0/0
  3399 ;;		On exit  : 0/0
  3400 ;;		Unchanged: 0/0
  3401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3402 ;;      Params:         0       0       0       0       0       0       0
  3403 ;;      Locals:         0       0       0       0       0       0       0
  3404 ;;      Temps:          0       0       0       0       0       0       0
  3405 ;;      Totals:         0       0       0       0       0       0       0
  3406 ;;Total ram usage:        0 bytes
  3407 ;; Hardware stack levels used:    1
  3408 ;; This function calls:
  3409 ;;		Nothing
  3410 ;; This function is called by:
  3411 ;;		_determineDirection
  3412 ;; This function uses a non-reentrant model
  3413 ;;
  3414                           
  3415                           	psect	text24
  3416  006F82                     __ptext24:
  3417                           	opt callstack 0
  3418  006F82                     _hardRight:
  3419                           	opt callstack 27
  3420                           
  3421                           ;./functions.c: 560:     PORTAbits.RA5 = 0;
  3422                           
  3423                           ; BSR set to: 15
  3424                           ;incstack = 0
  3425  006F82  9A80               	bcf	3968,5,c	;volatile
  3426                           
  3427                           ;./functions.c: 561:     PORTAbits.RA6 = 1;
  3428  006F84  8C80               	bsf	3968,6,c	;volatile
  3429                           
  3430                           ;./functions.c: 562:     PORTAbits.RA7 = 0;
  3431  006F86  9E80               	bcf	3968,7,c	;volatile
  3432                           
  3433                           ;./functions.c: 564:     PORTCbits.RC0 = 1;
  3434  006F88  8082               	bsf	3970,0,c	;volatile
  3435                           
  3436                           ;./functions.c: 565:     PORTCbits.RC1 = 0;
  3437  006F8A  9282               	bcf	3970,1,c	;volatile
  3438                           
  3439                           ;./functions.c: 567:     PORTEbits.RE0 = 0;
  3440  006F8C  9084               	bcf	3972,0,c	;volatile
  3441                           
  3442                           ;./functions.c: 568:     PORTEbits.RE1 = 1;
  3443  006F8E  8284               	bsf	3972,1,c	;volatile
  3444                           
  3445                           ;./functions.c: 570:     CCPR1L = 150;
  3446  006F90  0E96               	movlw	150
  3447  006F92  6EBE               	movwf	4030,c	;volatile
  3448                           
  3449                           ;./functions.c: 571:     CCPR5L = 50;
  3450  006F94  0E32               	movlw	50
  3451  006F96  010F               	movlb	15	; () banked
  3452  006F98  6F55               	movwf	85,b	;volatile
  3453                           
  3454                           ; BSR set to: 15
  3455  006F9A  0012               	return		;funcret
  3456  006F9C                     __end_of_hardRight:
  3457                           	opt callstack 0
  3458                           
  3459 ;; *************** function _hardLeft *****************
  3460 ;; Defined at:
  3461 ;;		line 527 in file "./functions.c"
  3462 ;; Parameters:    Size  Location     Type
  3463 ;;		None
  3464 ;; Auto vars:     Size  Location     Type
  3465 ;;		None
  3466 ;; Return value:  Size  Location     Type
  3467 ;;                  1    wreg      void 
  3468 ;; Registers used:
  3469 ;;		wreg, status,2
  3470 ;; Tracked objects:
  3471 ;;		On entry : 0/0
  3472 ;;		On exit  : 0/0
  3473 ;;		Unchanged: 0/0
  3474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3475 ;;      Params:         0       0       0       0       0       0       0
  3476 ;;      Locals:         0       0       0       0       0       0       0
  3477 ;;      Temps:          0       0       0       0       0       0       0
  3478 ;;      Totals:         0       0       0       0       0       0       0
  3479 ;;Total ram usage:        0 bytes
  3480 ;; Hardware stack levels used:    1
  3481 ;; This function calls:
  3482 ;;		Nothing
  3483 ;; This function is called by:
  3484 ;;		_determineDirection
  3485 ;; This function uses a non-reentrant model
  3486 ;;
  3487                           
  3488                           	psect	text25
  3489  006F68                     __ptext25:
  3490                           	opt callstack 0
  3491  006F68                     _hardLeft:
  3492                           	opt callstack 27
  3493                           
  3494                           ;./functions.c: 528:     PORTAbits.RA5 = 0;
  3495                           
  3496                           ; BSR set to: 15
  3497                           ;incstack = 0
  3498  006F68  9A80               	bcf	3968,5,c	;volatile
  3499                           
  3500                           ;./functions.c: 529:     PORTAbits.RA6 = 0;
  3501  006F6A  9C80               	bcf	3968,6,c	;volatile
  3502                           
  3503                           ;./functions.c: 530:     PORTAbits.RA7 = 1;
  3504  006F6C  8E80               	bsf	3968,7,c	;volatile
  3505                           
  3506                           ;./functions.c: 532:     PORTCbits.RC0 = 0;
  3507  006F6E  9082               	bcf	3970,0,c	;volatile
  3508                           
  3509                           ;./functions.c: 533:     PORTCbits.RC1 = 1;
  3510  006F70  8282               	bsf	3970,1,c	;volatile
  3511                           
  3512                           ;./functions.c: 535:     PORTEbits.RE0 = 1;
  3513  006F72  8084               	bsf	3972,0,c	;volatile
  3514                           
  3515                           ;./functions.c: 536:     PORTEbits.RE1 = 0;
  3516  006F74  9284               	bcf	3972,1,c	;volatile
  3517                           
  3518                           ;./functions.c: 538:     CCPR1L = 50;
  3519  006F76  0E32               	movlw	50
  3520  006F78  6EBE               	movwf	4030,c	;volatile
  3521                           
  3522                           ;./functions.c: 539:     CCPR5L = 150;
  3523  006F7A  0E96               	movlw	150
  3524  006F7C  010F               	movlb	15	; () banked
  3525  006F7E  6F55               	movwf	85,b	;volatile
  3526                           
  3527                           ; BSR set to: 15
  3528  006F80  0012               	return		;funcret
  3529  006F82                     __end_of_hardLeft:
  3530                           	opt callstack 0
  3531                           
  3532 ;; *************** function _classifyColors *****************
  3533 ;; Defined at:
  3534 ;;		line 665 in file "./functions.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;		None
  3537 ;; Auto vars:     Size  Location     Type
  3538 ;;  a               1   14[COMRAM] unsigned char 
  3539 ;;  sensorRanges   10    4[COMRAM] PTR unsigned char [5]
  3540 ;;		 -> RRranges(5), Rranges(5), Mranges(5), Lranges(5), 
  3541 ;;		 -> LLranges(5), 
  3542 ;; Return value:  Size  Location     Type
  3543 ;;                  1    wreg      void 
  3544 ;; Registers used:
  3545 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3546 ;; Tracked objects:
  3547 ;;		On entry : 0/0
  3548 ;;		On exit  : 0/0
  3549 ;;		Unchanged: 0/0
  3550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3551 ;;      Params:         0       0       0       0       0       0       0
  3552 ;;      Locals:        11       0       0       0       0       0       0
  3553 ;;      Temps:          4       0       0       0       0       0       0
  3554 ;;      Totals:        15       0       0       0       0       0       0
  3555 ;;Total ram usage:       15 bytes
  3556 ;; Hardware stack levels used:    1
  3557 ;; This function calls:
  3558 ;;		Nothing
  3559 ;; This function is called by:
  3560 ;;		_navigate
  3561 ;; This function uses a non-reentrant model
  3562 ;;
  3563                           
  3564                           	psect	text26
  3565  00797E                     __ptext26:
  3566                           	opt callstack 0
  3567  00797E                     _classifyColors:
  3568                           	opt callstack 28
  3569                           
  3570                           ;./functions.c: 666:     unsigned char* sensorRanges[] = {LLranges, Lranges, Mranges, Rr
      +                          anges, RRranges};
  3571                           
  3572                           ; BSR set to: 15
  3573                           ;incstack = 0
  3574  00797E  EE20  F0A6         	lfsr	2,classifyColors@F6064
  3575  007982  EE10  F005         	lfsr	1,classifyColors@sensorRanges
  3576  007986  0E09               	movlw	9
  3577  007988                     u1611:
  3578  007988  CFDB FFE3          	movff	plusw2,plusw1
  3579  00798C  06E8               	decf	wreg,f,c
  3580  00798E  E2FC               	bc	u1611
  3581                           
  3582                           ;./functions.c: 668:     for (unsigned char a = 0; a < 5; a++){
  3583  007990  0E00               	movlw	0
  3584  007992  6E0F               	movwf	classifyColors@a,c
  3585  007994                     l2859:
  3586                           
  3587                           ;./functions.c: 669:         if (sensorVals[a] < sensorRanges[a][0]){
  3588  007994  500F               	movf	classifyColors@a,w,c
  3589  007996  0D02               	mullw	2
  3590  007998  0E05               	movlw	low classifyColors@sensorRanges
  3591  00799A  24F3               	addwf	prodl,w,c
  3592  00799C  6ED9               	movwf	fsr2l,c
  3593  00799E  0E00               	movlw	high classifyColors@sensorRanges
  3594  0079A0  20F4               	addwfc	prodh,w,c
  3595  0079A2  6EDA               	movwf	fsr2h,c
  3596  0079A4  CFDE F001          	movff	postinc2,??_classifyColors
  3597  0079A8  CFDD F002          	movff	postdec2,??_classifyColors+1
  3598  0079AC  C001  FFD9         	movff	??_classifyColors,fsr2l
  3599  0079B0  C002  FFDA         	movff	??_classifyColors+1,fsr2h
  3600  0079B4  0E50               	movlw	low _sensorVals
  3601  0079B6  240F               	addwf	classifyColors@a,w,c
  3602  0079B8  6EE1               	movwf	fsr1l,c
  3603  0079BA  6AE2               	clrf	fsr1h,c
  3604  0079BC  0E00               	movlw	high _sensorVals
  3605  0079BE  22E2               	addwfc	fsr1h,f,c
  3606  0079C0  50DE               	movf	postinc2,w,c
  3607  0079C2  5CE6               	subwf	postinc1,w,c
  3608  0079C4  B0D8               	btfsc	status,0,c
  3609  0079C6  D008               	goto	l2863
  3610                           
  3611                           ;./functions.c: 670:             colorsDetected[a] = 'W';
  3612  0079C8  0EE9               	movlw	low _colorsDetected
  3613  0079CA  240F               	addwf	classifyColors@a,w,c
  3614  0079CC  6ED9               	movwf	fsr2l,c
  3615  0079CE  6ADA               	clrf	fsr2h,c
  3616  0079D0  0E00               	movlw	high _colorsDetected
  3617  0079D2  22DA               	addwfc	fsr2h,f,c
  3618  0079D4  0E57               	movlw	87
  3619  0079D6  D047               	goto	L4
  3620  0079D8                     l2863:
  3621  0079D8  500F               	movf	classifyColors@a,w,c
  3622  0079DA  0D02               	mullw	2
  3623  0079DC  0E05               	movlw	low classifyColors@sensorRanges
  3624  0079DE  24F3               	addwf	prodl,w,c
  3625  0079E0  6ED9               	movwf	fsr2l,c
  3626  0079E2  0E00               	movlw	high classifyColors@sensorRanges
  3627  0079E4  20F4               	addwfc	prodh,w,c
  3628  0079E6  6EDA               	movwf	fsr2h,c
  3629  0079E8  EE10 F001          	lfsr	1,1
  3630  0079EC  50DE               	movf	postinc2,w,c
  3631  0079EE  26E1               	addwf	fsr1l,f,c
  3632  0079F0  50DD               	movf	postdec2,w,c
  3633  0079F2  22E2               	addwfc	fsr1h,f,c
  3634  0079F4  0E50               	movlw	low _sensorVals
  3635  0079F6  240F               	addwf	classifyColors@a,w,c
  3636  0079F8  6ED9               	movwf	fsr2l,c
  3637  0079FA  6ADA               	clrf	fsr2h,c
  3638  0079FC  0E00               	movlw	high _sensorVals
  3639  0079FE  22DA               	addwfc	fsr2h,f,c
  3640  007A00  50E6               	movf	postinc1,w,c
  3641  007A02  5CDE               	subwf	postinc2,w,c
  3642  007A04  B0D8               	btfsc	status,0,c
  3643  007A06  D008               	goto	l2867
  3644                           
  3645                           ;./functions.c: 673:             colorsDetected[a] = 'G';
  3646  007A08  0EE9               	movlw	low _colorsDetected
  3647  007A0A  240F               	addwf	classifyColors@a,w,c
  3648  007A0C  6ED9               	movwf	fsr2l,c
  3649  007A0E  6ADA               	clrf	fsr2h,c
  3650  007A10  0E00               	movlw	high _colorsDetected
  3651  007A12  22DA               	addwfc	fsr2h,f,c
  3652  007A14  0E47               	movlw	71
  3653  007A16  D027               	goto	L4
  3654  007A18                     l2867:
  3655  007A18  500F               	movf	classifyColors@a,w,c
  3656  007A1A  0D02               	mullw	2
  3657  007A1C  0E05               	movlw	low classifyColors@sensorRanges
  3658  007A1E  24F3               	addwf	prodl,w,c
  3659  007A20  6ED9               	movwf	fsr2l,c
  3660  007A22  0E00               	movlw	high classifyColors@sensorRanges
  3661  007A24  20F4               	addwfc	prodh,w,c
  3662  007A26  6EDA               	movwf	fsr2h,c
  3663  007A28  EE10 F004          	lfsr	1,4
  3664  007A2C  50DE               	movf	postinc2,w,c
  3665  007A2E  26E1               	addwf	fsr1l,f,c
  3666  007A30  50DD               	movf	postdec2,w,c
  3667  007A32  22E2               	addwfc	fsr1h,f,c
  3668  007A34  0E50               	movlw	low _sensorVals
  3669  007A36  240F               	addwf	classifyColors@a,w,c
  3670  007A38  6ED9               	movwf	fsr2l,c
  3671  007A3A  6ADA               	clrf	fsr2h,c
  3672  007A3C  0E00               	movlw	high _sensorVals
  3673  007A3E  22DA               	addwfc	fsr2h,f,c
  3674  007A40  50E6               	movf	postinc1,w,c
  3675  007A42  5CDE               	subwf	postinc2,w,c
  3676  007A44  B0D8               	btfsc	status,0,c
  3677  007A46  D008               	goto	l2871
  3678                           
  3679                           ;./functions.c: 676:             colorsDetected[a] = 'B';
  3680  007A48  0EE9               	movlw	low _colorsDetected
  3681  007A4A  240F               	addwf	classifyColors@a,w,c
  3682  007A4C  6ED9               	movwf	fsr2l,c
  3683  007A4E  6ADA               	clrf	fsr2h,c
  3684  007A50  0E00               	movlw	high _colorsDetected
  3685  007A52  22DA               	addwfc	fsr2h,f,c
  3686  007A54  0E42               	movlw	66
  3687  007A56  D007               	goto	L4
  3688  007A58                     l2871:
  3689                           
  3690                           ;./functions.c: 679:             colorsDetected[a] = 'n';
  3691  007A58  0EE9               	movlw	low _colorsDetected
  3692  007A5A  240F               	addwf	classifyColors@a,w,c
  3693  007A5C  6ED9               	movwf	fsr2l,c
  3694  007A5E  6ADA               	clrf	fsr2h,c
  3695  007A60  0E00               	movlw	high _colorsDetected
  3696  007A62  22DA               	addwfc	fsr2h,f,c
  3697  007A64  0E6E               	movlw	110
  3698  007A66                     L4:
  3699  007A66  6EDF               	movwf	indf2,c
  3700                           
  3701                           ;./functions.c: 681:     }
  3702  007A68  2A0F               	incf	classifyColors@a,f,c
  3703  007A6A  0E04               	movlw	4
  3704  007A6C  640F               	cpfsgt	classifyColors@a,c
  3705  007A6E  D792               	goto	l2859
  3706  007A70  0012               	return	
  3707  007A72                     __end_of_classifyColors:
  3708                           	opt callstack 0
  3709                           
  3710 ;; *************** function _capTouch *****************
  3711 ;; Defined at:
  3712 ;;		line 452 in file "./functions.c"
  3713 ;; Parameters:    Size  Location     Type
  3714 ;;		None
  3715 ;; Auto vars:     Size  Location     Type
  3716 ;;  a               1   40[COMRAM] unsigned char 
  3717 ;;  message        26   10[COMRAM] unsigned char [26]
  3718 ;;  change          2    0        int 
  3719 ;;  touch2          1   39[COMRAM] unsigned char 
  3720 ;;  touch1          1   38[COMRAM] unsigned char 
  3721 ;; Return value:  Size  Location     Type
  3722 ;;                  1    wreg      void 
  3723 ;; Registers used:
  3724 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3725 ;; Tracked objects:
  3726 ;;		On entry : 0/0
  3727 ;;		On exit  : 0/0
  3728 ;;		Unchanged: 0/0
  3729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3730 ;;      Params:         0       0       0       0       0       0       0
  3731 ;;      Locals:        31       0       0       0       0       0       0
  3732 ;;      Temps:          0       0       0       0       0       0       0
  3733 ;;      Totals:        31       0       0       0       0       0       0
  3734 ;;Total ram usage:       31 bytes
  3735 ;; Hardware stack levels used:    1
  3736 ;; Hardware stack levels required when called:    2
  3737 ;; This function calls:
  3738 ;;		_abs
  3739 ;;		_aveSensor
  3740 ;;		_msDelay
  3741 ;;		_trans
  3742 ;; This function is called by:
  3743 ;;		_RCE
  3744 ;; This function uses a non-reentrant model
  3745 ;;
  3746                           
  3747                           	psect	text27
  3748  00741C                     __ptext27:
  3749                           	opt callstack 0
  3750  00741C                     _capTouch:
  3751                           	opt callstack 27
  3752                           
  3753                           ;./functions.c: 454:     unsigned char message[] = "\nSanic waits for a touch\n";
  3754                           
  3755                           ;incstack = 0
  3756  00741C  EE20  F060         	lfsr	2,capTouch@F6047
  3757  007420  EE10  F00B         	lfsr	1,capTouch@message
  3758  007424  0E19               	movlw	25
  3759  007426                     u2421:
  3760  007426  CFDB FFE3          	movff	plusw2,plusw1
  3761  00742A  06E8               	decf	wreg,f,c
  3762  00742C  E2FC               	bc	u2421
  3763                           
  3764                           ;./functions.c: 456:     for (unsigned char a = 0; a < 25; a++)
  3765  00742E  0E00               	movlw	0
  3766  007430  6E29               	movwf	capTouch@a,c
  3767  007432                     l3487:
  3768                           
  3769                           ;./functions.c: 457:     {;./functions.c: 458:         trans(message[a]);
  3770  007432  0E0B               	movlw	low capTouch@message
  3771  007434  2429               	addwf	capTouch@a,w,c
  3772  007436  6ED9               	movwf	fsr2l,c
  3773  007438  6ADA               	clrf	fsr2h,c
  3774  00743A  0E00               	movlw	high capTouch@message
  3775  00743C  22DA               	addwfc	fsr2h,f,c
  3776  00743E  50DF               	movf	indf2,w,c
  3777  007440  EC8E  F037         	call	_trans
  3778                           
  3779                           ;./functions.c: 459:     }
  3780  007444  2A29               	incf	capTouch@a,f,c
  3781  007446  0E18               	movlw	24
  3782  007448  6429               	cpfsgt	capTouch@a,c
  3783  00744A  D7F3               	goto	l3487
  3784                           
  3785                           ;./functions.c: 462:     unsigned char touch1 = 0;
  3786  00744C  0E00               	movlw	0
  3787  00744E  6E27               	movwf	capTouch@touch1,c
  3788                           
  3789                           ;./functions.c: 463:     unsigned char touch2 = 0;
  3790  007450  0E00               	movlw	0
  3791  007452  6E28               	movwf	capTouch@touch2,c
  3792  007454                     l3495:
  3793                           
  3794                           ;./functions.c: 466:         touch1 = aveSensor(15);
  3795  007454  0E0F               	movlw	15
  3796  007456  ECDC  F038         	call	_aveSensor
  3797  00745A  6E27               	movwf	capTouch@touch1,c
  3798                           
  3799                           ;./functions.c: 467:         msDelay(5);
  3800  00745C  0E05               	movlw	5
  3801  00745E  EC1E  F038         	call	_msDelay
  3802                           
  3803                           ;./functions.c: 468:         touch2 = aveSensor(15);
  3804  007462  0E0F               	movlw	15
  3805  007464  ECDC  F038         	call	_aveSensor
  3806  007468  6E28               	movwf	capTouch@touch2,c
  3807                           
  3808                           ;./functions.c: 472:         if (abs(touch2 - touch1) > 50){
  3809  00746A  5027               	movf	capTouch@touch1,w,c
  3810  00746C  5C28               	subwf	capTouch@touch2,w,c
  3811  00746E  6E01               	movwf	abs@a,c
  3812  007470  6A02               	clrf	abs@a+1,c
  3813  007472  A0D8               	btfss	status,0,c
  3814  007474  0602               	decf	abs@a+1,f,c
  3815  007476  EC89  F038         	call	_abs	;wreg free
  3816  00747A  BE02               	btfsc	?_abs+1,7,c
  3817  00747C  D7EB               	goto	l3495
  3818  00747E  5002               	movf	?_abs+1,w,c
  3819  007480  E105               	bnz	l346
  3820  007482  0E33               	movlw	51
  3821  007484  5C01               	subwf	?_abs,w,c
  3822  007486  B0D8               	btfsc	status,0,c
  3823  007488  0012               	return	
  3824  00748A  D7E4               	goto	l3495
  3825  00748C                     l346:
  3826  00748C  0012               	return		;funcret
  3827  00748E                     __end_of_capTouch:
  3828                           	opt callstack 0
  3829                           
  3830 ;; *************** function _abs *****************
  3831 ;; Defined at:
  3832 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  3833 ;; Parameters:    Size  Location     Type
  3834 ;;  a               2    0[COMRAM] int 
  3835 ;; Auto vars:     Size  Location     Type
  3836 ;;		None
  3837 ;; Return value:  Size  Location     Type
  3838 ;;                  2    0[COMRAM] int 
  3839 ;; Registers used:
  3840 ;;		wreg, status,2, status,0
  3841 ;; Tracked objects:
  3842 ;;		On entry : 0/0
  3843 ;;		On exit  : 0/0
  3844 ;;		Unchanged: 0/0
  3845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3846 ;;      Params:         2       0       0       0       0       0       0
  3847 ;;      Locals:         0       0       0       0       0       0       0
  3848 ;;      Temps:          2       0       0       0       0       0       0
  3849 ;;      Totals:         4       0       0       0       0       0       0
  3850 ;;Total ram usage:        4 bytes
  3851 ;; Hardware stack levels used:    1
  3852 ;; This function calls:
  3853 ;;		Nothing
  3854 ;; This function is called by:
  3855 ;;		_capTouch
  3856 ;;		_readAllSensors
  3857 ;; This function uses a non-reentrant model
  3858 ;;
  3859                           
  3860                           	psect	text28
  3861  007112                     __ptext28:
  3862                           	opt callstack 0
  3863  007112                     _abs:
  3864                           	opt callstack 27
  3865                           
  3866                           ;incstack = 0
  3867  007112  BE02               	btfsc	abs@a+1,7,c
  3868  007114  D005               	goto	u1360
  3869  007116  5002               	movf	abs@a+1,w,c
  3870  007118  E110               	bnz	l1282
  3871  00711A  0401               	decf	abs@a,w,c
  3872  00711C  B0D8               	btfsc	status,0,c
  3873  00711E  D00D               	goto	l1282
  3874  007120                     u1360:
  3875  007120  C001  F003         	movff	abs@a,??_abs
  3876  007124  C002  F004         	movff	abs@a+1,??_abs+1
  3877  007128  1E03               	comf	??_abs,f,c
  3878  00712A  1E04               	comf	??_abs+1,f,c
  3879  00712C  4A03               	infsnz	??_abs,f,c
  3880  00712E  2A04               	incf	??_abs+1,f,c
  3881  007130  C003  F001         	movff	??_abs,?_abs
  3882  007134  C004  F002         	movff	??_abs+1,?_abs+1
  3883  007138  0012               	return	
  3884  00713A                     l1282:
  3885  00713A  C001  F001         	movff	abs@a,?_abs
  3886  00713E  C002  F002         	movff	abs@a+1,?_abs+1
  3887  007142  0012               	return		;funcret
  3888  007144                     __end_of_abs:
  3889                           	opt callstack 0
  3890                           
  3891 ;; *************** function _calibrate *****************
  3892 ;; Defined at:
  3893 ;;		line 138 in file "./functions.c"
  3894 ;; Parameters:    Size  Location     Type
  3895 ;;		None
  3896 ;; Auto vars:     Size  Location     Type
  3897 ;;  b               1   47[COMRAM] unsigned char 
  3898 ;;  samples         1   45[COMRAM] unsigned char 
  3899 ;;  samples         1   44[COMRAM] unsigned char 
  3900 ;;  samples         1   43[COMRAM] unsigned char 
  3901 ;;  samples         1   42[COMRAM] unsigned char 
  3902 ;;  samples         1   41[COMRAM] unsigned char 
  3903 ;;  a               1   46[COMRAM] unsigned char 
  3904 ;;  rangeArray     10   31[COMRAM] PTR unsigned char [5]
  3905 ;;		 -> RRranges(5), Rranges(5), Mranges(5), Lranges(5), 
  3906 ;;		 -> LLranges(5), 
  3907 ;;  temp            1   48[COMRAM] unsigned char 
  3908 ;; Return value:  Size  Location     Type
  3909 ;;                  1    wreg      void 
  3910 ;; Registers used:
  3911 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3912 ;; Tracked objects:
  3913 ;;		On entry : 0/0
  3914 ;;		On exit  : 0/0
  3915 ;;		Unchanged: 0/0
  3916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3917 ;;      Params:         0       0       0       0       0       0       0
  3918 ;;      Locals:        18       0       0       0       0       0       0
  3919 ;;      Temps:          2       0       0       0       0       0       0
  3920 ;;      Totals:        20       0       0       0       0       0       0
  3921 ;;Total ram usage:       20 bytes
  3922 ;; Hardware stack levels used:    1
  3923 ;; Hardware stack levels required when called:    3
  3924 ;; This function calls:
  3925 ;;		_aveSensor
  3926 ;;		_ranges
  3927 ;;		_sixSecDelay
  3928 ;; This function is called by:
  3929 ;;		_RCE
  3930 ;; This function uses a non-reentrant model
  3931 ;;
  3932                           
  3933                           	psect	text29
  3934  007D44                     __ptext29:
  3935                           	opt callstack 0
  3936  007D44                     _calibrate:
  3937                           	opt callstack 26
  3938                           
  3939                           ;./functions.c: 140:     ranges();
  3940                           
  3941                           ;incstack = 0
  3942  007D44  EC49  F03C         	call	_ranges	;wreg free
  3943                           
  3944                           ;./functions.c: 141:     unsigned char *rangeArray[] = {LLranges, Lranges, Mranges, Rran
      +                          ges, RRranges};
  3945  007D48  EE20  F0B0         	lfsr	2,calibrate@F6018
  3946  007D4C  EE10  F020         	lfsr	1,calibrate@rangeArray
  3947  007D50  0E09               	movlw	9
  3948  007D52                     u1891:
  3949  007D52  CFDB FFE3          	movff	plusw2,plusw1
  3950  007D56  06E8               	decf	wreg,f,c
  3951  007D58  E2FC               	bc	u1891
  3952                           
  3953                           ;./functions.c: 142:     for (unsigned char a = 0; a < 5; a++)
  3954  007D5A  0E00               	movlw	0
  3955  007D5C  6E2F               	movwf	calibrate@a,c
  3956  007D5E                     l3025:
  3957                           
  3958                           ;./functions.c: 143:     {;./functions.c: 144:         for (unsigned char b = 0; b < 5; 
      +                          b++)
  3959  007D5E  0E00               	movlw	0
  3960  007D60  6E30               	movwf	calibrate@b,c
  3961  007D62                     l3031:
  3962                           
  3963                           ;./functions.c: 145:         {;./functions.c: 146:             rangeArray[a][b] = 0;
  3964  007D62  502F               	movf	calibrate@a,w,c
  3965  007D64  0D02               	mullw	2
  3966  007D66  0E20               	movlw	low calibrate@rangeArray
  3967  007D68  24F3               	addwf	prodl,w,c
  3968  007D6A  6ED9               	movwf	fsr2l,c
  3969  007D6C  0E00               	movlw	high calibrate@rangeArray
  3970  007D6E  20F4               	addwfc	prodh,w,c
  3971  007D70  6EDA               	movwf	fsr2h,c
  3972  007D72  CFDE F01E          	movff	postinc2,??_calibrate
  3973  007D76  CFDD F01F          	movff	postdec2,??_calibrate+1
  3974  007D7A  5030               	movf	calibrate@b,w,c
  3975  007D7C  241E               	addwf	??_calibrate,w,c
  3976  007D7E  6ED9               	movwf	fsr2l,c
  3977  007D80  0E00               	movlw	0
  3978  007D82  201F               	addwfc	??_calibrate+1,w,c
  3979  007D84  6EDA               	movwf	fsr2h,c
  3980  007D86  0E00               	movlw	0
  3981  007D88  6EDF               	movwf	indf2,c
  3982                           
  3983                           ;./functions.c: 147:         }
  3984  007D8A  2A30               	incf	calibrate@b,f,c
  3985  007D8C  0E04               	movlw	4
  3986  007D8E  6430               	cpfsgt	calibrate@b,c
  3987  007D90  D7E8               	goto	l3031
  3988                           
  3989                           ;./functions.c: 148:     }
  3990  007D92  2A2F               	incf	calibrate@a,f,c
  3991  007D94  0E04               	movlw	4
  3992  007D96  642F               	cpfsgt	calibrate@a,c
  3993  007D98  D7E2               	goto	l3025
  3994                           
  3995                           ;./functions.c: 150:     PORTA = 0;
  3996  007D9A  0E00               	movlw	0
  3997  007D9C  6E80               	movwf	3968,c	;volatile
  3998                           
  3999                           ;./functions.c: 154:     PORTD = 0b11000001;
  4000  007D9E  0EC1               	movlw	193
  4001  007DA0  6E83               	movwf	3971,c	;volatile
  4002                           
  4003                           ;./functions.c: 155:     sixSecDelay();
  4004  007DA2  ECAA  F037         	call	_sixSecDelay	;wreg free
  4005                           
  4006                           ;./functions.c: 156:     for (unsigned char samples = 0; samples < 250; samples++)
  4007  007DA6  0E00               	movlw	0
  4008  007DA8  6E2A               	movwf	calibrate@samples,c
  4009  007DAA                     l3051:
  4010                           
  4011                           ;./functions.c: 157:     {;./functions.c: 158:         temp = aveSensor(12);
  4012  007DAA  0E0C               	movlw	12
  4013  007DAC  ECDC  F038         	call	_aveSensor
  4014  007DB0  6E31               	movwf	calibrate@temp,c
  4015                           
  4016                           ;./functions.c: 159:         if (temp >= LLranges[0])
  4017  007DB2  0100               	movlb	0	; () banked
  4018  007DB4  51E4               	movf	_LLranges& (0+255),w,b
  4019  007DB6  5C31               	subwf	calibrate@temp,w,c
  4020  007DB8  B0D8               	btfsc	status,0,c
  4021                           
  4022                           ; BSR set to: 0
  4023                           ;./functions.c: 160:         {;./functions.c: 161:             LLranges[0] = temp;
  4024  007DBA  C031  F0E4         	movff	calibrate@temp,_LLranges
  4025                           
  4026                           ; BSR set to: 0
  4027                           ;./functions.c: 163:         temp = aveSensor(10);
  4028  007DBE  0E0A               	movlw	10
  4029  007DC0  ECDC  F038         	call	_aveSensor
  4030  007DC4  6E31               	movwf	calibrate@temp,c
  4031                           
  4032                           ;./functions.c: 164:         if (temp >= Lranges[0])
  4033  007DC6  0100               	movlb	0	; () banked
  4034  007DC8  51DF               	movf	_Lranges& (0+255),w,b
  4035  007DCA  5C31               	subwf	calibrate@temp,w,c
  4036  007DCC  B0D8               	btfsc	status,0,c
  4037                           
  4038                           ; BSR set to: 0
  4039                           ;./functions.c: 165:         {;./functions.c: 166:             Lranges[0] = temp;
  4040  007DCE  C031  F0DF         	movff	calibrate@temp,_Lranges
  4041                           
  4042                           ; BSR set to: 0
  4043                           ;./functions.c: 168:         temp = aveSensor(8);
  4044  007DD2  0E08               	movlw	8
  4045  007DD4  ECDC  F038         	call	_aveSensor
  4046  007DD8  6E31               	movwf	calibrate@temp,c
  4047                           
  4048                           ;./functions.c: 169:         if (temp >= Mranges[0])
  4049  007DDA  0100               	movlb	0	; () banked
  4050  007DDC  51DA               	movf	_Mranges& (0+255),w,b
  4051  007DDE  5C31               	subwf	calibrate@temp,w,c
  4052  007DE0  B0D8               	btfsc	status,0,c
  4053                           
  4054                           ; BSR set to: 0
  4055                           ;./functions.c: 170:         {;./functions.c: 171:             Mranges[0] = temp;
  4056  007DE2  C031  F0DA         	movff	calibrate@temp,_Mranges
  4057                           
  4058                           ; BSR set to: 0
  4059                           ;./functions.c: 173:         temp = aveSensor(9);
  4060  007DE6  0E09               	movlw	9
  4061  007DE8  ECDC  F038         	call	_aveSensor
  4062  007DEC  6E31               	movwf	calibrate@temp,c
  4063                           
  4064                           ;./functions.c: 174:         if (temp >= Rranges[0])
  4065  007DEE  5058               	movf	_Rranges,w,c
  4066  007DF0  5C31               	subwf	calibrate@temp,w,c
  4067  007DF2  B0D8               	btfsc	status,0,c
  4068                           
  4069                           ;./functions.c: 175:         {;./functions.c: 176:             Rranges[0] = temp;
  4070  007DF4  C031  F058         	movff	calibrate@temp,_Rranges
  4071                           
  4072                           ;./functions.c: 178:         temp = aveSensor(13);
  4073  007DF8  0E0D               	movlw	13
  4074  007DFA  ECDC  F038         	call	_aveSensor
  4075  007DFE  6E31               	movwf	calibrate@temp,c
  4076                           
  4077                           ;./functions.c: 179:         if (temp >= RRranges[0])
  4078  007E00  0100               	movlb	0	; () banked
  4079  007E02  51D5               	movf	_RRranges& (0+255),w,b
  4080  007E04  5C31               	subwf	calibrate@temp,w,c
  4081  007E06  B0D8               	btfsc	status,0,c
  4082                           
  4083                           ; BSR set to: 0
  4084                           ;./functions.c: 180:         {;./functions.c: 181:             RRranges[0] = temp;
  4085  007E08  C031  F0D5         	movff	calibrate@temp,_RRranges
  4086                           
  4087                           ; BSR set to: 0
  4088                           ;./functions.c: 183:     }
  4089  007E0C  2A2A               	incf	calibrate@samples,f,c
  4090                           
  4091                           ; BSR set to: 0
  4092  007E0E  0EF9               	movlw	249
  4093  007E10  642A               	cpfsgt	calibrate@samples,c
  4094  007E12  D7CB               	goto	l3051
  4095                           
  4096                           ; BSR set to: 0
  4097                           ;./functions.c: 184:     PORTAbits.RA0 = 1;
  4098  007E14  8080               	bsf	3968,0,c	;volatile
  4099                           
  4100                           ; BSR set to: 0
  4101                           ;./functions.c: 185:     PORTD = 0b10000010;
  4102  007E16  0E82               	movlw	130
  4103  007E18  6E83               	movwf	3971,c	;volatile
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;./functions.c: 187:     sixSecDelay();
  4107  007E1A  ECAA  F037         	call	_sixSecDelay	;wreg free
  4108                           
  4109                           ;./functions.c: 188:     for (unsigned char samples = 0; samples < 250; samples++)
  4110  007E1E  0E00               	movlw	0
  4111  007E20  6E2B               	movwf	calibrate@samples_1256,c
  4112  007E22                     l3095:
  4113                           
  4114                           ;./functions.c: 189:     {;./functions.c: 190:         temp = aveSensor(12);
  4115  007E22  0E0C               	movlw	12
  4116  007E24  ECDC  F038         	call	_aveSensor
  4117  007E28  6E31               	movwf	calibrate@temp,c
  4118                           
  4119                           ;./functions.c: 191:         if (temp >= LLranges[1])
  4120  007E2A  0100               	movlb	0	; () banked
  4121  007E2C  51E5               	movf	(_LLranges+1)& (0+255),w,b
  4122  007E2E  5C31               	subwf	calibrate@temp,w,c
  4123  007E30  B0D8               	btfsc	status,0,c
  4124                           
  4125                           ; BSR set to: 0
  4126                           ;./functions.c: 192:         {;./functions.c: 193:             LLranges[1] = temp;
  4127  007E32  C031  F0E5         	movff	calibrate@temp,_LLranges+1
  4128                           
  4129                           ; BSR set to: 0
  4130                           ;./functions.c: 195:         temp = aveSensor(10);
  4131  007E36  0E0A               	movlw	10
  4132  007E38  ECDC  F038         	call	_aveSensor
  4133  007E3C  6E31               	movwf	calibrate@temp,c
  4134                           
  4135                           ;./functions.c: 196:         if (temp >= Lranges[1])
  4136  007E3E  0100               	movlb	0	; () banked
  4137  007E40  51E0               	movf	(_Lranges+1)& (0+255),w,b
  4138  007E42  5C31               	subwf	calibrate@temp,w,c
  4139  007E44  B0D8               	btfsc	status,0,c
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;./functions.c: 197:         {;./functions.c: 198:             Lranges[1] = temp;
  4143  007E46  C031  F0E0         	movff	calibrate@temp,_Lranges+1
  4144                           
  4145                           ; BSR set to: 0
  4146                           ;./functions.c: 200:         temp = aveSensor(8);
  4147  007E4A  0E08               	movlw	8
  4148  007E4C  ECDC  F038         	call	_aveSensor
  4149  007E50  6E31               	movwf	calibrate@temp,c
  4150                           
  4151                           ;./functions.c: 201:         if (temp >= Mranges[1])
  4152  007E52  0100               	movlb	0	; () banked
  4153  007E54  51DB               	movf	(_Mranges+1)& (0+255),w,b
  4154  007E56  5C31               	subwf	calibrate@temp,w,c
  4155  007E58  B0D8               	btfsc	status,0,c
  4156                           
  4157                           ; BSR set to: 0
  4158                           ;./functions.c: 202:         {;./functions.c: 203:             Mranges[1] = temp;
  4159  007E5A  C031  F0DB         	movff	calibrate@temp,_Mranges+1
  4160                           
  4161                           ; BSR set to: 0
  4162                           ;./functions.c: 205:         temp = aveSensor(9);
  4163  007E5E  0E09               	movlw	9
  4164  007E60  ECDC  F038         	call	_aveSensor
  4165  007E64  6E31               	movwf	calibrate@temp,c
  4166                           
  4167                           ;./functions.c: 206:         if (temp >= Rranges[1])
  4168  007E66  5059               	movf	_Rranges+1,w,c
  4169  007E68  5C31               	subwf	calibrate@temp,w,c
  4170  007E6A  B0D8               	btfsc	status,0,c
  4171                           
  4172                           ;./functions.c: 207:         {;./functions.c: 208:             Rranges[1] = temp;
  4173  007E6C  C031  F059         	movff	calibrate@temp,_Rranges+1
  4174                           
  4175                           ;./functions.c: 210:         temp = aveSensor(13);
  4176  007E70  0E0D               	movlw	13
  4177  007E72  ECDC  F038         	call	_aveSensor
  4178  007E76  6E31               	movwf	calibrate@temp,c
  4179                           
  4180                           ;./functions.c: 211:         if (temp >= RRranges[1])
  4181  007E78  0100               	movlb	0	; () banked
  4182  007E7A  51D6               	movf	(_RRranges+1)& (0+255),w,b
  4183  007E7C  5C31               	subwf	calibrate@temp,w,c
  4184  007E7E  B0D8               	btfsc	status,0,c
  4185                           
  4186                           ; BSR set to: 0
  4187                           ;./functions.c: 212:         {;./functions.c: 213:             RRranges[1] = temp;
  4188  007E80  C031  F0D6         	movff	calibrate@temp,_RRranges+1
  4189                           
  4190                           ; BSR set to: 0
  4191                           ;./functions.c: 215:     }
  4192  007E84  2A2B               	incf	calibrate@samples_1256,f,c
  4193                           
  4194                           ; BSR set to: 0
  4195  007E86  0EF9               	movlw	249
  4196  007E88  642B               	cpfsgt	calibrate@samples_1256,c
  4197  007E8A  D7CB               	goto	l3095
  4198                           
  4199                           ; BSR set to: 0
  4200                           ;./functions.c: 216:     PORTAbits.RA1 = 1;
  4201  007E8C  8280               	bsf	3968,1,c	;volatile
  4202                           
  4203                           ; BSR set to: 0
  4204                           ;./functions.c: 217:     PORTD = 0b10001000;
  4205  007E8E  0E88               	movlw	136
  4206  007E90  6E83               	movwf	3971,c	;volatile
  4207                           
  4208                           ; BSR set to: 0
  4209                           ;./functions.c: 219:     sixSecDelay();
  4210  007E92  ECAA  F037         	call	_sixSecDelay	;wreg free
  4211                           
  4212                           ;./functions.c: 220:     for (unsigned char samples = 0; samples < 250; samples++)
  4213  007E96  0E00               	movlw	0
  4214  007E98  6E2C               	movwf	calibrate@samples_1257,c
  4215  007E9A                     l3139:
  4216                           
  4217                           ;./functions.c: 221:     {;./functions.c: 222:         temp = aveSensor(12);
  4218  007E9A  0E0C               	movlw	12
  4219  007E9C  ECDC  F038         	call	_aveSensor
  4220  007EA0  6E31               	movwf	calibrate@temp,c
  4221                           
  4222                           ;./functions.c: 223:         if (temp >= LLranges[2])
  4223  007EA2  0100               	movlb	0	; () banked
  4224  007EA4  51E6               	movf	(_LLranges+2)& (0+255),w,b
  4225  007EA6  5C31               	subwf	calibrate@temp,w,c
  4226  007EA8  B0D8               	btfsc	status,0,c
  4227                           
  4228                           ; BSR set to: 0
  4229                           ;./functions.c: 224:         {;./functions.c: 225:             LLranges[2] = temp;
  4230  007EAA  C031  F0E6         	movff	calibrate@temp,_LLranges+2
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;./functions.c: 227:         temp = aveSensor(10);
  4234  007EAE  0E0A               	movlw	10
  4235  007EB0  ECDC  F038         	call	_aveSensor
  4236  007EB4  6E31               	movwf	calibrate@temp,c
  4237                           
  4238                           ;./functions.c: 228:         if (temp >= Lranges[2])
  4239  007EB6  0100               	movlb	0	; () banked
  4240  007EB8  51E1               	movf	(_Lranges+2)& (0+255),w,b
  4241  007EBA  5C31               	subwf	calibrate@temp,w,c
  4242  007EBC  B0D8               	btfsc	status,0,c
  4243                           
  4244                           ; BSR set to: 0
  4245                           ;./functions.c: 229:         {;./functions.c: 230:             Lranges[2] = temp;
  4246  007EBE  C031  F0E1         	movff	calibrate@temp,_Lranges+2
  4247                           
  4248                           ; BSR set to: 0
  4249                           ;./functions.c: 232:         temp = aveSensor(8);
  4250  007EC2  0E08               	movlw	8
  4251  007EC4  ECDC  F038         	call	_aveSensor
  4252  007EC8  6E31               	movwf	calibrate@temp,c
  4253                           
  4254                           ;./functions.c: 233:         if (temp >= Mranges[2])
  4255  007ECA  0100               	movlb	0	; () banked
  4256  007ECC  51DC               	movf	(_Mranges+2)& (0+255),w,b
  4257  007ECE  5C31               	subwf	calibrate@temp,w,c
  4258  007ED0  B0D8               	btfsc	status,0,c
  4259                           
  4260                           ; BSR set to: 0
  4261                           ;./functions.c: 234:         {;./functions.c: 235:             Mranges[2] = temp;
  4262  007ED2  C031  F0DC         	movff	calibrate@temp,_Mranges+2
  4263                           
  4264                           ; BSR set to: 0
  4265                           ;./functions.c: 237:         temp = aveSensor(9);
  4266  007ED6  0E09               	movlw	9
  4267  007ED8  ECDC  F038         	call	_aveSensor
  4268  007EDC  6E31               	movwf	calibrate@temp,c
  4269                           
  4270                           ;./functions.c: 238:         if (temp >= Rranges[2])
  4271  007EDE  505A               	movf	_Rranges+2,w,c
  4272  007EE0  5C31               	subwf	calibrate@temp,w,c
  4273  007EE2  B0D8               	btfsc	status,0,c
  4274                           
  4275                           ;./functions.c: 239:         {;./functions.c: 240:             Rranges[2] = temp;
  4276  007EE4  C031  F05A         	movff	calibrate@temp,_Rranges+2
  4277                           
  4278                           ;./functions.c: 242:         temp = aveSensor(13);
  4279  007EE8  0E0D               	movlw	13
  4280  007EEA  ECDC  F038         	call	_aveSensor
  4281  007EEE  6E31               	movwf	calibrate@temp,c
  4282                           
  4283                           ;./functions.c: 243:         if (temp >= RRranges[2])
  4284  007EF0  0100               	movlb	0	; () banked
  4285  007EF2  51D7               	movf	(_RRranges+2)& (0+255),w,b
  4286  007EF4  5C31               	subwf	calibrate@temp,w,c
  4287  007EF6  B0D8               	btfsc	status,0,c
  4288                           
  4289                           ; BSR set to: 0
  4290                           ;./functions.c: 244:         {;./functions.c: 245:             RRranges[2] = temp;
  4291  007EF8  C031  F0D7         	movff	calibrate@temp,_RRranges+2
  4292                           
  4293                           ; BSR set to: 0
  4294                           ;./functions.c: 247:     }
  4295  007EFC  2A2C               	incf	calibrate@samples_1257,f,c
  4296                           
  4297                           ; BSR set to: 0
  4298  007EFE  0EF9               	movlw	249
  4299  007F00  642C               	cpfsgt	calibrate@samples_1257,c
  4300  007F02  D7CB               	goto	l3139
  4301                           
  4302                           ; BSR set to: 0
  4303                           ;./functions.c: 248:     PORTAbits.RA2 = 1;
  4304  007F04  8480               	bsf	3968,2,c	;volatile
  4305                           
  4306                           ; BSR set to: 0
  4307                           ;./functions.c: 249:     PORTD = 0b10000000;
  4308  007F06  0E80               	movlw	128
  4309  007F08  6E83               	movwf	3971,c	;volatile
  4310                           
  4311                           ; BSR set to: 0
  4312                           ;./functions.c: 251:     sixSecDelay();
  4313  007F0A  ECAA  F037         	call	_sixSecDelay	;wreg free
  4314                           
  4315                           ;./functions.c: 252:     for (unsigned char samples = 0; samples < 250; samples++)
  4316  007F0E  0E00               	movlw	0
  4317  007F10  6E2D               	movwf	calibrate@samples_1258,c
  4318  007F12                     l3183:
  4319                           
  4320                           ;./functions.c: 253:     {;./functions.c: 254:         temp = aveSensor(12);
  4321  007F12  0E0C               	movlw	12
  4322  007F14  ECDC  F038         	call	_aveSensor
  4323  007F18  6E31               	movwf	calibrate@temp,c
  4324                           
  4325                           ;./functions.c: 255:         if (temp >= LLranges[3])
  4326  007F1A  0100               	movlb	0	; () banked
  4327  007F1C  51E7               	movf	(_LLranges+3)& (0+255),w,b
  4328  007F1E  5C31               	subwf	calibrate@temp,w,c
  4329  007F20  B0D8               	btfsc	status,0,c
  4330                           
  4331                           ; BSR set to: 0
  4332                           ;./functions.c: 256:         {;./functions.c: 257:             LLranges[3] = temp;
  4333  007F22  C031  F0E7         	movff	calibrate@temp,_LLranges+3
  4334                           
  4335                           ; BSR set to: 0
  4336                           ;./functions.c: 259:         temp = aveSensor(10);
  4337  007F26  0E0A               	movlw	10
  4338  007F28  ECDC  F038         	call	_aveSensor
  4339  007F2C  6E31               	movwf	calibrate@temp,c
  4340                           
  4341                           ;./functions.c: 260:         if (temp >= Lranges[3])
  4342  007F2E  0100               	movlb	0	; () banked
  4343  007F30  51E2               	movf	(_Lranges+3)& (0+255),w,b
  4344  007F32  5C31               	subwf	calibrate@temp,w,c
  4345  007F34  B0D8               	btfsc	status,0,c
  4346                           
  4347                           ; BSR set to: 0
  4348                           ;./functions.c: 261:         {;./functions.c: 262:             Lranges[3] = temp;
  4349  007F36  C031  F0E2         	movff	calibrate@temp,_Lranges+3
  4350                           
  4351                           ; BSR set to: 0
  4352                           ;./functions.c: 264:         temp = aveSensor(8);
  4353  007F3A  0E08               	movlw	8
  4354  007F3C  ECDC  F038         	call	_aveSensor
  4355  007F40  6E31               	movwf	calibrate@temp,c
  4356                           
  4357                           ;./functions.c: 265:         if (temp >= Mranges[3])
  4358  007F42  0100               	movlb	0	; () banked
  4359  007F44  51DD               	movf	(_Mranges+3)& (0+255),w,b
  4360  007F46  5C31               	subwf	calibrate@temp,w,c
  4361  007F48  B0D8               	btfsc	status,0,c
  4362                           
  4363                           ; BSR set to: 0
  4364                           ;./functions.c: 266:         {;./functions.c: 267:             Mranges[3] = temp;
  4365  007F4A  C031  F0DD         	movff	calibrate@temp,_Mranges+3
  4366                           
  4367                           ; BSR set to: 0
  4368                           ;./functions.c: 269:         temp = aveSensor(9);
  4369  007F4E  0E09               	movlw	9
  4370  007F50  ECDC  F038         	call	_aveSensor
  4371  007F54  6E31               	movwf	calibrate@temp,c
  4372                           
  4373                           ;./functions.c: 270:         if (temp >= Rranges[3])
  4374  007F56  505B               	movf	_Rranges+3,w,c
  4375  007F58  5C31               	subwf	calibrate@temp,w,c
  4376  007F5A  B0D8               	btfsc	status,0,c
  4377                           
  4378                           ;./functions.c: 271:         {;./functions.c: 272:             Rranges[3] = temp;
  4379  007F5C  C031  F05B         	movff	calibrate@temp,_Rranges+3
  4380                           
  4381                           ;./functions.c: 274:         temp = aveSensor(13);
  4382  007F60  0E0D               	movlw	13
  4383  007F62  ECDC  F038         	call	_aveSensor
  4384  007F66  6E31               	movwf	calibrate@temp,c
  4385                           
  4386                           ;./functions.c: 275:         if (temp >= RRranges[3])
  4387  007F68  0100               	movlb	0	; () banked
  4388  007F6A  51D8               	movf	(_RRranges+3)& (0+255),w,b
  4389  007F6C  5C31               	subwf	calibrate@temp,w,c
  4390  007F6E  B0D8               	btfsc	status,0,c
  4391                           
  4392                           ; BSR set to: 0
  4393                           ;./functions.c: 276:         {;./functions.c: 277:             RRranges[3] = temp;
  4394  007F70  C031  F0D8         	movff	calibrate@temp,_RRranges+3
  4395                           
  4396                           ; BSR set to: 0
  4397                           ;./functions.c: 279:     }
  4398  007F74  2A2D               	incf	calibrate@samples_1258,f,c
  4399                           
  4400                           ; BSR set to: 0
  4401  007F76  0EF9               	movlw	249
  4402  007F78  642D               	cpfsgt	calibrate@samples_1258,c
  4403  007F7A  D7CB               	goto	l3183
  4404                           
  4405                           ; BSR set to: 0
  4406                           ;./functions.c: 280:     PORTAbits.RA3 = 1;
  4407  007F7C  8680               	bsf	3968,3,c	;volatile
  4408                           
  4409                           ; BSR set to: 0
  4410                           ;./functions.c: 281:     PORTD = 0b11001000;
  4411  007F7E  0EC8               	movlw	200
  4412  007F80  6E83               	movwf	3971,c	;volatile
  4413                           
  4414                           ; BSR set to: 0
  4415                           ;./functions.c: 283:     sixSecDelay();
  4416  007F82  ECAA  F037         	call	_sixSecDelay	;wreg free
  4417                           
  4418                           ;./functions.c: 284:     for (unsigned char samples = 0; samples < 250; samples++)
  4419  007F86  0E00               	movlw	0
  4420  007F88  6E2E               	movwf	calibrate@samples_1259,c
  4421  007F8A                     l3227:
  4422                           
  4423                           ;./functions.c: 285:     {;./functions.c: 286:         temp = aveSensor(12);
  4424  007F8A  0E0C               	movlw	12
  4425  007F8C  ECDC  F038         	call	_aveSensor
  4426  007F90  6E31               	movwf	calibrate@temp,c
  4427                           
  4428                           ;./functions.c: 287:         if (temp >= LLranges[4])
  4429  007F92  0100               	movlb	0	; () banked
  4430  007F94  51E8               	movf	(_LLranges+4)& (0+255),w,b
  4431  007F96  5C31               	subwf	calibrate@temp,w,c
  4432  007F98  B0D8               	btfsc	status,0,c
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;./functions.c: 288:         {;./functions.c: 289:             LLranges[4] = temp;
  4436  007F9A  C031  F0E8         	movff	calibrate@temp,_LLranges+4
  4437                           
  4438                           ; BSR set to: 0
  4439                           ;./functions.c: 291:         temp = aveSensor(10);
  4440  007F9E  0E0A               	movlw	10
  4441  007FA0  ECDC  F038         	call	_aveSensor
  4442  007FA4  6E31               	movwf	calibrate@temp,c
  4443                           
  4444                           ;./functions.c: 292:         if (temp >= Lranges[4])
  4445  007FA6  0100               	movlb	0	; () banked
  4446  007FA8  51E3               	movf	(_Lranges+4)& (0+255),w,b
  4447  007FAA  5C31               	subwf	calibrate@temp,w,c
  4448  007FAC  B0D8               	btfsc	status,0,c
  4449                           
  4450                           ; BSR set to: 0
  4451                           ;./functions.c: 293:         {;./functions.c: 294:             Lranges[4] = temp;
  4452  007FAE  C031  F0E3         	movff	calibrate@temp,_Lranges+4
  4453                           
  4454                           ; BSR set to: 0
  4455                           ;./functions.c: 296:         temp = aveSensor(8);
  4456  007FB2  0E08               	movlw	8
  4457  007FB4  ECDC  F038         	call	_aveSensor
  4458  007FB8  6E31               	movwf	calibrate@temp,c
  4459                           
  4460                           ;./functions.c: 297:         if (temp >= Mranges[4])
  4461  007FBA  0100               	movlb	0	; () banked
  4462  007FBC  51DE               	movf	(_Mranges+4)& (0+255),w,b
  4463  007FBE  5C31               	subwf	calibrate@temp,w,c
  4464  007FC0  B0D8               	btfsc	status,0,c
  4465                           
  4466                           ; BSR set to: 0
  4467                           ;./functions.c: 298:         {;./functions.c: 299:             Mranges[4] = temp;
  4468  007FC2  C031  F0DE         	movff	calibrate@temp,_Mranges+4
  4469                           
  4470                           ; BSR set to: 0
  4471                           ;./functions.c: 301:         temp = aveSensor(9);
  4472  007FC6  0E09               	movlw	9
  4473  007FC8  ECDC  F038         	call	_aveSensor
  4474  007FCC  6E31               	movwf	calibrate@temp,c
  4475                           
  4476                           ;./functions.c: 302:         if (temp >= Rranges[4])
  4477  007FCE  505C               	movf	_Rranges+4,w,c
  4478  007FD0  5C31               	subwf	calibrate@temp,w,c
  4479  007FD2  B0D8               	btfsc	status,0,c
  4480                           
  4481                           ;./functions.c: 303:         {;./functions.c: 304:             Rranges[4] = temp;
  4482  007FD4  C031  F05C         	movff	calibrate@temp,_Rranges+4
  4483                           
  4484                           ;./functions.c: 306:         temp = aveSensor(13);
  4485  007FD8  0E0D               	movlw	13
  4486  007FDA  ECDC  F038         	call	_aveSensor
  4487  007FDE  6E31               	movwf	calibrate@temp,c
  4488                           
  4489                           ;./functions.c: 307:         if (temp >= RRranges[4])
  4490  007FE0  0100               	movlb	0	; () banked
  4491  007FE2  51D9               	movf	(_RRranges+4)& (0+255),w,b
  4492  007FE4  5C31               	subwf	calibrate@temp,w,c
  4493  007FE6  B0D8               	btfsc	status,0,c
  4494                           
  4495                           ; BSR set to: 0
  4496                           ;./functions.c: 308:         {;./functions.c: 309:             RRranges[4] = temp;
  4497  007FE8  C031  F0D9         	movff	calibrate@temp,_RRranges+4
  4498                           
  4499                           ; BSR set to: 0
  4500                           ;./functions.c: 311:     }
  4501  007FEC  2A2E               	incf	calibrate@samples_1259,f,c
  4502                           
  4503                           ; BSR set to: 0
  4504  007FEE  0EF9               	movlw	249
  4505  007FF0  642E               	cpfsgt	calibrate@samples_1259,c
  4506  007FF2  D7CB               	goto	l3227
  4507                           
  4508                           ; BSR set to: 0
  4509                           ;./functions.c: 312:     PORTAbits.RA4 = 1;
  4510  007FF4  8880               	bsf	3968,4,c	;volatile
  4511                           
  4512                           ; BSR set to: 0
  4513                           ;./functions.c: 314:     ranges();
  4514  007FF6  EC49  F03C         	call	_ranges	;wreg free
  4515                           
  4516                           ;./functions.c: 315:     PORTA = 0;
  4517  007FFA  0E00               	movlw	0
  4518  007FFC  6E80               	movwf	3968,c	;volatile
  4519  007FFE  0012               	return		;funcret
  4520  008000                     __end_of_calibrate:
  4521                           	opt callstack 0
  4522                           
  4523 ;; *************** function _sixSecDelay *****************
  4524 ;; Defined at:
  4525 ;;		line 958 in file "./functions.c"
  4526 ;; Parameters:    Size  Location     Type
  4527 ;;		None
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;  a               1    1[COMRAM] unsigned char 
  4530 ;; Return value:  Size  Location     Type
  4531 ;;                  1    wreg      void 
  4532 ;; Registers used:
  4533 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4534 ;; Tracked objects:
  4535 ;;		On entry : 0/0
  4536 ;;		On exit  : 0/0
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4539 ;;      Params:         0       0       0       0       0       0       0
  4540 ;;      Locals:         1       0       0       0       0       0       0
  4541 ;;      Temps:          0       0       0       0       0       0       0
  4542 ;;      Totals:         1       0       0       0       0       0       0
  4543 ;;Total ram usage:        1 bytes
  4544 ;; Hardware stack levels used:    1
  4545 ;; Hardware stack levels required when called:    1
  4546 ;; This function calls:
  4547 ;;		_msDelay
  4548 ;; This function is called by:
  4549 ;;		_calibrate
  4550 ;; This function uses a non-reentrant model
  4551 ;;
  4552                           
  4553                           	psect	text30
  4554  006F54                     __ptext30:
  4555                           	opt callstack 0
  4556  006F54                     _sixSecDelay:
  4557                           	opt callstack 27
  4558                           
  4559                           ;./functions.c: 960:     for (unsigned char a = 0; a < 90; a++)
  4560                           
  4561                           ;incstack = 0
  4562  006F54  0E00               	movlw	0
  4563  006F56  6E02               	movwf	sixSecDelay@a,c
  4564  006F58                     l2777:
  4565                           
  4566                           ;./functions.c: 961:     {;./functions.c: 962:         msDelay(63);
  4567  006F58  0E3F               	movlw	63
  4568  006F5A  EC1E  F038         	call	_msDelay
  4569                           
  4570                           ;./functions.c: 963:     }
  4571  006F5E  2A02               	incf	sixSecDelay@a,f,c
  4572  006F60  0E59               	movlw	89
  4573  006F62  6402               	cpfsgt	sixSecDelay@a,c
  4574  006F64  D7F9               	goto	l2777
  4575  006F66  0012               	return	
  4576  006F68                     __end_of_sixSecDelay:
  4577                           	opt callstack 0
  4578                           
  4579 ;; *************** function _msDelay *****************
  4580 ;; Defined at:
  4581 ;;		line 968 in file "./functions.c"
  4582 ;; Parameters:    Size  Location     Type
  4583 ;;  delayInMs       1    wreg     unsigned char 
  4584 ;; Auto vars:     Size  Location     Type
  4585 ;;  delayInMs       1    0[COMRAM] unsigned char 
  4586 ;; Return value:  Size  Location     Type
  4587 ;;                  1    wreg      void 
  4588 ;; Registers used:
  4589 ;;		wreg, status,2, status,0, prodl, prodh
  4590 ;; Tracked objects:
  4591 ;;		On entry : 0/0
  4592 ;;		On exit  : 0/0
  4593 ;;		Unchanged: 0/0
  4594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4595 ;;      Params:         0       0       0       0       0       0       0
  4596 ;;      Locals:         1       0       0       0       0       0       0
  4597 ;;      Temps:          0       0       0       0       0       0       0
  4598 ;;      Totals:         1       0       0       0       0       0       0
  4599 ;;Total ram usage:        1 bytes
  4600 ;; Hardware stack levels used:    1
  4601 ;; This function calls:
  4602 ;;		Nothing
  4603 ;; This function is called by:
  4604 ;;		_pyCal
  4605 ;;		_navigate
  4606 ;;		_capTouch
  4607 ;;		_sixSecDelay
  4608 ;; This function uses a non-reentrant model
  4609 ;;
  4610                           
  4611                           	psect	text31
  4612  00703C                     __ptext31:
  4613                           	opt callstack 0
  4614  00703C                     _msDelay:
  4615                           	opt callstack 28
  4616                           
  4617                           ;incstack = 0
  4618                           ;msDelay@delayInMs stored from wreg
  4619  00703C  6E01               	movwf	msDelay@delayInMs,c
  4620                           
  4621                           ;./functions.c: 968: void msDelay(unsigned char delayInMs);./functions.c: 969: {;./funct
      +                          ions.c: 970:     TMR6 = 0;
  4622  00703E  0E00               	movlw	0
  4623  007040  010F               	movlb	15	; () banked
  4624  007042  6F4C               	movwf	76,b	;volatile
  4625                           
  4626                           ; BSR set to: 15
  4627                           ;./functions.c: 971:     PR6 = 4 * delayInMs;
  4628  007044  5001               	movf	msDelay@delayInMs,w,c
  4629  007046  0D04               	mullw	4
  4630  007048  CFF3 FF4B          	movff	prodl,3915	;volatile
  4631                           
  4632                           ; BSR set to: 15
  4633                           ;./functions.c: 972:     T6CON = 0xFF;
  4634  00704C  694A               	setf	74,b	;volatile
  4635  00704E                     l544:
  4636  00704E  A47E               	btfss	3966,2,c	;volatile
  4637  007050  D7FE               	goto	l544
  4638                           
  4639                           ;./functions.c: 975:     PIR5bits.TMR6IF = 0;
  4640  007052  947E               	bcf	3966,2,c	;volatile
  4641                           
  4642                           ;./functions.c: 976:     T6CON = 0;
  4643  007054  0E00               	movlw	0
  4644  007056  010F               	movlb	15	; () banked
  4645  007058  6F4A               	movwf	74,b	;volatile
  4646                           
  4647                           ; BSR set to: 15
  4648  00705A  0012               	return		;funcret
  4649  00705C                     __end_of_msDelay:
  4650                           	opt callstack 0
  4651                           
  4652 ;; *************** function _ranges *****************
  4653 ;; Defined at:
  4654 ;;		line 872 in file "./functions.c"
  4655 ;; Parameters:    Size  Location     Type
  4656 ;;		None
  4657 ;; Auto vars:     Size  Location     Type
  4658 ;;  b               1   27[COMRAM] unsigned char 
  4659 ;;  a               1   28[COMRAM] unsigned char 
  4660 ;;  rangeArray     10   17[COMRAM] PTR unsigned char [5]
  4661 ;;		 -> RRranges(5), Rranges(5), Mranges(5), Lranges(5), 
  4662 ;;		 -> LLranges(5), 
  4663 ;; Return value:  Size  Location     Type
  4664 ;;                  1    wreg      void 
  4665 ;; Registers used:
  4666 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4667 ;; Tracked objects:
  4668 ;;		On entry : 0/0
  4669 ;;		On exit  : 0/0
  4670 ;;		Unchanged: 0/0
  4671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4672 ;;      Params:         0       0       0       0       0       0       0
  4673 ;;      Locals:        12       0       0       0       0       0       0
  4674 ;;      Temps:          2       0       0       0       0       0       0
  4675 ;;      Totals:        14       0       0       0       0       0       0
  4676 ;;Total ram usage:       14 bytes
  4677 ;; Hardware stack levels used:    1
  4678 ;; Hardware stack levels required when called:    2
  4679 ;; This function calls:
  4680 ;;		___awdiv
  4681 ;;		_trans
  4682 ;;		_writeToEEP
  4683 ;; This function is called by:
  4684 ;;		_calibrate
  4685 ;; This function uses a non-reentrant model
  4686 ;;
  4687                           
  4688                           	psect	text32
  4689  007892                     __ptext32:
  4690                           	opt callstack 0
  4691  007892                     _ranges:
  4692                           	opt callstack 26
  4693                           
  4694                           ;./functions.c: 874:     unsigned char* rangeArray[] = {LLranges, Lranges, Mranges, Rran
      +                          ges, RRranges};
  4695                           
  4696                           ; BSR set to: 15
  4697                           ;incstack = 0
  4698  007892  EE20  F09C         	lfsr	2,ranges@F6085
  4699  007896  EE10  F012         	lfsr	1,ranges@rangeArray
  4700  00789A  0E09               	movlw	9
  4701  00789C                     u1461:
  4702  00789C  CFDB FFE3          	movff	plusw2,plusw1
  4703  0078A0  06E8               	decf	wreg,f,c
  4704  0078A2  E2FC               	bc	u1461
  4705                           
  4706                           ;./functions.c: 876:     for (unsigned char a = 0; a < 5; a++){
  4707  0078A4  0E00               	movlw	0
  4708  0078A6  6E1D               	movwf	ranges@a,c
  4709  0078A8                     l2745:
  4710                           
  4711                           ;./functions.c: 877:         rangeArray[a][1] = (rangeArray[a][1] + rangeArray[a][2]) / 
      +                          2;
  4712  0078A8  501D               	movf	ranges@a,w,c
  4713  0078AA  0D02               	mullw	2
  4714  0078AC  0E12               	movlw	low ranges@rangeArray
  4715  0078AE  24F3               	addwf	prodl,w,c
  4716  0078B0  6ED9               	movwf	fsr2l,c
  4717  0078B2  0E00               	movlw	high ranges@rangeArray
  4718  0078B4  20F4               	addwfc	prodh,w,c
  4719  0078B6  6EDA               	movwf	fsr2h,c
  4720  0078B8  EE10 F001          	lfsr	1,1
  4721  0078BC  50DE               	movf	postinc2,w,c
  4722  0078BE  26E1               	addwf	fsr1l,f,c
  4723  0078C0  50DD               	movf	postdec2,w,c
  4724  0078C2  22E2               	addwfc	fsr1h,f,c
  4725  0078C4  501D               	movf	ranges@a,w,c
  4726  0078C6  0D02               	mullw	2
  4727  0078C8  0E12               	movlw	low ranges@rangeArray
  4728  0078CA  24F3               	addwf	prodl,w,c
  4729  0078CC  6ED9               	movwf	fsr2l,c
  4730  0078CE  0E00               	movlw	high ranges@rangeArray
  4731  0078D0  20F4               	addwfc	prodh,w,c
  4732  0078D2  6EDA               	movwf	fsr2h,c
  4733  0078D4  EE00 F002          	lfsr	0,2
  4734  0078D8  50DE               	movf	postinc2,w,c
  4735  0078DA  26E9               	addwf	fsr0l,f,c
  4736  0078DC  50DD               	movf	postdec2,w,c
  4737  0078DE  22EA               	addwfc	fsr0h,f,c
  4738  0078E0  50EF               	movf	indf0,w,c
  4739  0078E2  6E10               	movwf	??_ranges& (0+255),c
  4740  0078E4  501D               	movf	ranges@a,w,c
  4741  0078E6  0D02               	mullw	2
  4742  0078E8  0E12               	movlw	low ranges@rangeArray
  4743  0078EA  24F3               	addwf	prodl,w,c
  4744  0078EC  6ED9               	movwf	fsr2l,c
  4745  0078EE  0E00               	movlw	high ranges@rangeArray
  4746  0078F0  20F4               	addwfc	prodh,w,c
  4747  0078F2  6EDA               	movwf	fsr2h,c
  4748  0078F4  EE00 F001          	lfsr	0,1
  4749  0078F8  50DE               	movf	postinc2,w,c
  4750  0078FA  26E9               	addwf	fsr0l,f,c
  4751  0078FC  50DD               	movf	postdec2,w,c
  4752  0078FE  22EA               	addwfc	fsr0h,f,c
  4753  007900  50EF               	movf	indf0,w,c
  4754  007902  6E11               	movwf	(??_ranges+1)& (0+255),c
  4755  007904  5011               	movf	??_ranges+1,w,c
  4756  007906  2410               	addwf	??_ranges,w,c
  4757  007908  6E01               	movwf	___awdiv@dividend,c
  4758  00790A  6A02               	clrf	___awdiv@dividend+1,c
  4759  00790C  3602               	rlcf	___awdiv@dividend+1,f,c
  4760  00790E  0E00               	movlw	0
  4761  007910  6E04               	movwf	___awdiv@divisor+1,c
  4762  007912  0E02               	movlw	2
  4763  007914  6E03               	movwf	___awdiv@divisor,c
  4764  007916  ECC5  F03A         	call	___awdiv	;wreg free
  4765  00791A  5001               	movf	?___awdiv,w,c
  4766  00791C  6EE7               	movwf	indf1,c
  4767                           
  4768                           ;./functions.c: 878:         for (unsigned char b = 0; b < 5; b++){
  4769  00791E  0E00               	movlw	0
  4770  007920  6E1C               	movwf	ranges@b,c
  4771  007922                     l2753:
  4772                           
  4773                           ;./functions.c: 879:             trans(rangeArray[a][b]);
  4774  007922  501D               	movf	ranges@a,w,c
  4775  007924  0D02               	mullw	2
  4776  007926  0E12               	movlw	low ranges@rangeArray
  4777  007928  24F3               	addwf	prodl,w,c
  4778  00792A  6ED9               	movwf	fsr2l,c
  4779  00792C  0E00               	movlw	high ranges@rangeArray
  4780  00792E  20F4               	addwfc	prodh,w,c
  4781  007930  6EDA               	movwf	fsr2h,c
  4782  007932  CFDE F010          	movff	postinc2,??_ranges
  4783  007936  CFDD F011          	movff	postdec2,??_ranges+1
  4784  00793A  501C               	movf	ranges@b,w,c
  4785  00793C  2410               	addwf	??_ranges,w,c
  4786  00793E  6ED9               	movwf	fsr2l,c
  4787  007940  0E00               	movlw	0
  4788  007942  2011               	addwfc	??_ranges+1,w,c
  4789  007944  6EDA               	movwf	fsr2h,c
  4790  007946  50DF               	movf	indf2,w,c
  4791  007948  EC8E  F037         	call	_trans
  4792                           
  4793                           ;./functions.c: 880:         }
  4794  00794C  2A1C               	incf	ranges@b,f,c
  4795  00794E  0E04               	movlw	4
  4796  007950  641C               	cpfsgt	ranges@b,c
  4797  007952  D7E7               	goto	l2753
  4798                           
  4799                           ;./functions.c: 881:         trans('\n');
  4800  007954  0E0A               	movlw	10
  4801  007956  EC8E  F037         	call	_trans
  4802                           
  4803                           ;./functions.c: 882:     }
  4804  00795A  2A1D               	incf	ranges@a,f,c
  4805  00795C  0E04               	movlw	4
  4806  00795E  641D               	cpfsgt	ranges@a,c
  4807  007960  D7A3               	goto	l2745
  4808                           
  4809                           ;./functions.c: 884:     LLranges[0] += 10;
  4810  007962  0E0A               	movlw	10
  4811  007964  0100               	movlb	0	; () banked
  4812  007966  27E4               	addwf	_LLranges& (0+255),f,b
  4813                           
  4814                           ;./functions.c: 885:     Lranges[0] += 10;
  4815  007968  0E0A               	movlw	10
  4816  00796A  27DF               	addwf	_Lranges& (0+255),f,b
  4817                           
  4818                           ;./functions.c: 886:     Mranges[0] += 10;
  4819  00796C  0E0A               	movlw	10
  4820  00796E  27DA               	addwf	_Mranges& (0+255),f,b
  4821                           
  4822                           ;./functions.c: 887:     Rranges[0] += 10;
  4823  007970  0E0A               	movlw	10
  4824  007972  2658               	addwf	_Rranges,f,c
  4825                           
  4826                           ;./functions.c: 888:     RRranges[0] += 10;
  4827  007974  0E0A               	movlw	10
  4828  007976  27D5               	addwf	_RRranges& (0+255),f,b
  4829                           
  4830                           ; BSR set to: 0
  4831                           ;./functions.c: 890:     writeToEEP();
  4832  007978  ECDC  F039         	call	_writeToEEP	;wreg free
  4833  00797C  0012               	return		;funcret
  4834  00797E                     __end_of_ranges:
  4835                           	opt callstack 0
  4836                           
  4837 ;; *************** function _writeToEEP *****************
  4838 ;; Defined at:
  4839 ;;		line 906 in file "./functions.c"
  4840 ;; Parameters:    Size  Location     Type
  4841 ;;		None
  4842 ;; Auto vars:     Size  Location     Type
  4843 ;;  b               1   14[COMRAM] unsigned char 
  4844 ;;  a               1   13[COMRAM] unsigned char 
  4845 ;;  rs             10    2[COMRAM] PTR unsigned char [5]
  4846 ;;		 -> RRranges(5), Rranges(5), Mranges(5), Lranges(5), 
  4847 ;;		 -> LLranges(5), 
  4848 ;;  address         1   12[COMRAM] unsigned char 
  4849 ;; Return value:  Size  Location     Type
  4850 ;;                  1    wreg      void 
  4851 ;; Registers used:
  4852 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4853 ;; Tracked objects:
  4854 ;;		On entry : 0/0
  4855 ;;		On exit  : 0/0
  4856 ;;		Unchanged: 0/0
  4857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4858 ;;      Params:         0       0       0       0       0       0       0
  4859 ;;      Locals:        13       0       0       0       0       0       0
  4860 ;;      Temps:          2       0       0       0       0       0       0
  4861 ;;      Totals:        15       0       0       0       0       0       0
  4862 ;;Total ram usage:       15 bytes
  4863 ;; Hardware stack levels used:    1
  4864 ;; Hardware stack levels required when called:    1
  4865 ;; This function calls:
  4866 ;;		_EE_WRT
  4867 ;; This function is called by:
  4868 ;;		_ranges
  4869 ;; This function uses a non-reentrant model
  4870 ;;
  4871                           
  4872                           	psect	text33
  4873  0073B8                     __ptext33:
  4874                           	opt callstack 0
  4875  0073B8                     _writeToEEP:
  4876                           	opt callstack 26
  4877                           
  4878                           ;./functions.c: 907:     unsigned char* rs[] = {LLranges, Lranges, Mranges, Rranges, RRr
      +                          anges};
  4879                           
  4880                           ;incstack = 0
  4881  0073B8  EE20  F092         	lfsr	2,writeToEEP@F6094
  4882  0073BC  EE10  F003         	lfsr	1,writeToEEP@rs
  4883  0073C0  0E09               	movlw	9
  4884  0073C2                     u1371:
  4885  0073C2  CFDB FFE3          	movff	plusw2,plusw1
  4886  0073C6  06E8               	decf	wreg,f,c
  4887  0073C8  E2FC               	bc	u1371
  4888                           
  4889                           ;./functions.c: 908:     unsigned char address = 0;
  4890  0073CA  0E00               	movlw	0
  4891  0073CC  6E0D               	movwf	writeToEEP@address,c
  4892                           
  4893                           ;./functions.c: 909:     for (unsigned char a = 0; a < 5; a++){
  4894  0073CE  0E00               	movlw	0
  4895  0073D0  6E0E               	movwf	writeToEEP@a,c
  4896  0073D2                     l2637:
  4897                           
  4898                           ;./functions.c: 910:         for (unsigned char b = 0; b < 5; b++){
  4899  0073D2  0E00               	movlw	0
  4900  0073D4  6E0F               	movwf	writeToEEP@b,c
  4901  0073D6                     l516:
  4902                           
  4903                           ;./functions.c: 911:             EEADR = address++;
  4904  0073D6  C00D  FFA9         	movff	writeToEEP@address,4009	;volatile
  4905  0073DA  2A0D               	incf	writeToEEP@address,f,c
  4906                           
  4907                           ;./functions.c: 912:             EEDATA = rs[a][b];
  4908  0073DC  500E               	movf	writeToEEP@a,w,c
  4909  0073DE  0D02               	mullw	2
  4910  0073E0  0E03               	movlw	low writeToEEP@rs
  4911  0073E2  24F3               	addwf	prodl,w,c
  4912  0073E4  6ED9               	movwf	fsr2l,c
  4913  0073E6  0E00               	movlw	high writeToEEP@rs
  4914  0073E8  20F4               	addwfc	prodh,w,c
  4915  0073EA  6EDA               	movwf	fsr2h,c
  4916  0073EC  CFDE F001          	movff	postinc2,??_writeToEEP
  4917  0073F0  CFDD F002          	movff	postdec2,??_writeToEEP+1
  4918  0073F4  500F               	movf	writeToEEP@b,w,c
  4919  0073F6  2401               	addwf	??_writeToEEP,w,c
  4920  0073F8  6ED9               	movwf	fsr2l,c
  4921  0073FA  0E00               	movlw	0
  4922  0073FC  2002               	addwfc	??_writeToEEP+1,w,c
  4923  0073FE  6EDA               	movwf	fsr2h,c
  4924  007400  50DF               	movf	indf2,w,c
  4925  007402  6EA8               	movwf	4008,c	;volatile
  4926                           
  4927                           ;./functions.c: 913:             EE_WRT();
  4928  007404  EC02  F038         	call	_EE_WRT	;wreg free
  4929                           
  4930                           ;./functions.c: 914:         }
  4931  007408  2A0F               	incf	writeToEEP@b,f,c
  4932  00740A  0E04               	movlw	4
  4933  00740C  640F               	cpfsgt	writeToEEP@b,c
  4934  00740E  D7E3               	goto	l516
  4935                           
  4936                           ;./functions.c: 915:     }
  4937  007410  2A0E               	incf	writeToEEP@a,f,c
  4938  007412  0E04               	movlw	4
  4939  007414  640E               	cpfsgt	writeToEEP@a,c
  4940  007416  D7DD               	goto	l2637
  4941                           
  4942                           ;./functions.c: 916:     EECON1bits.WREN = 0;
  4943  007418  94A6               	bcf	4006,2,c	;volsfr
  4944                           
  4945                           ;./functions.c: 917:     return;
  4946  00741A  0012               	return		;funcret
  4947  00741C                     __end_of_writeToEEP:
  4948                           	opt callstack 0
  4949                           
  4950 ;; *************** function _EE_WRT *****************
  4951 ;; Defined at:
  4952 ;;		line 920 in file "./functions.c"
  4953 ;; Parameters:    Size  Location     Type
  4954 ;;		None
  4955 ;; Auto vars:     Size  Location     Type
  4956 ;;		None
  4957 ;; Return value:  Size  Location     Type
  4958 ;;                  1    wreg      void 
  4959 ;; Registers used:
  4960 ;;		wreg, status,2
  4961 ;; Tracked objects:
  4962 ;;		On entry : 0/0
  4963 ;;		On exit  : 0/0
  4964 ;;		Unchanged: 0/0
  4965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4966 ;;      Params:         0       0       0       0       0       0       0
  4967 ;;      Locals:         0       0       0       0       0       0       0
  4968 ;;      Temps:          0       0       0       0       0       0       0
  4969 ;;      Totals:         0       0       0       0       0       0       0
  4970 ;;Total ram usage:        0 bytes
  4971 ;; Hardware stack levels used:    1
  4972 ;; This function calls:
  4973 ;;		Nothing
  4974 ;; This function is called by:
  4975 ;;		_writeToEEP
  4976 ;; This function uses a non-reentrant model
  4977 ;;
  4978                           
  4979                           	psect	text34
  4980  007004                     __ptext34:
  4981                           	opt callstack 0
  4982  007004                     _EE_WRT:
  4983                           	opt callstack 26
  4984                           
  4985                           ;./functions.c: 921:     EECON1bits.EEPGD = 0;
  4986                           
  4987                           ;incstack = 0
  4988  007004  9EA6               	bcf	4006,7,c	;volsfr
  4989                           
  4990                           ;./functions.c: 922:     EECON1bits.CFGS = 0;
  4991  007006  9CA6               	bcf	4006,6,c	;volsfr
  4992                           
  4993                           ;./functions.c: 923:     EECON1bits.WREN = 1;
  4994  007008  84A6               	bsf	4006,2,c	;volsfr
  4995                           
  4996                           ;./functions.c: 924:     INTCONbits.GIE = 0;
  4997  00700A  9EF2               	bcf	4082,7,c	;volatile
  4998                           
  4999                           ;./functions.c: 925:     EECON2 = 0x55;
  5000  00700C  0E55               	movlw	85
  5001  00700E  6EA7               	movwf	4007,c	;volsfr
  5002                           
  5003                           ;./functions.c: 926:     EECON2 = 0xAA;
  5004  007010  0EAA               	movlw	170
  5005  007012  6EA7               	movwf	4007,c	;volsfr
  5006                           
  5007                           ;./functions.c: 927:     EECON1bits.WR = 1;
  5008  007014  82A6               	bsf	4006,1,c	;volsfr
  5009                           
  5010                           ;./functions.c: 928:     INTCONbits.GIE = 1;
  5011  007016  8EF2               	bsf	4082,7,c	;volatile
  5012  007018                     l521:
  5013  007018  A8A1               	btfss	4001,4,c	;volatile
  5014  00701A  D7FE               	goto	l521
  5015                           
  5016                           ;./functions.c: 930:     PIR2bits.EEIF = 0;
  5017  00701C  98A1               	bcf	4001,4,c	;volatile
  5018  00701E  0012               	return		;funcret
  5019  007020                     __end_of_EE_WRT:
  5020                           	opt callstack 0
  5021                           
  5022 ;; *************** function ___awdiv *****************
  5023 ;; Defined at:
  5024 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  5025 ;; Parameters:    Size  Location     Type
  5026 ;;  dividend        2    0[COMRAM] int 
  5027 ;;  divisor         2    2[COMRAM] int 
  5028 ;; Auto vars:     Size  Location     Type
  5029 ;;  quotient        2    6[COMRAM] int 
  5030 ;;  sign            1    5[COMRAM] unsigned char 
  5031 ;;  counter         1    4[COMRAM] unsigned char 
  5032 ;; Return value:  Size  Location     Type
  5033 ;;                  2    0[COMRAM] int 
  5034 ;; Registers used:
  5035 ;;		wreg, status,2, status,0
  5036 ;; Tracked objects:
  5037 ;;		On entry : 0/0
  5038 ;;		On exit  : 0/0
  5039 ;;		Unchanged: 0/0
  5040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5041 ;;      Params:         4       0       0       0       0       0       0
  5042 ;;      Locals:         4       0       0       0       0       0       0
  5043 ;;      Temps:          0       0       0       0       0       0       0
  5044 ;;      Totals:         8       0       0       0       0       0       0
  5045 ;;Total ram usage:        8 bytes
  5046 ;; Hardware stack levels used:    1
  5047 ;; This function calls:
  5048 ;;		Nothing
  5049 ;; This function is called by:
  5050 ;;		_ranges
  5051 ;; This function uses a non-reentrant model
  5052 ;;
  5053                           
  5054                           	psect	text35
  5055  00758A                     __ptext35:
  5056                           	opt callstack 0
  5057  00758A                     ___awdiv:
  5058                           	opt callstack 27
  5059                           
  5060                           ;incstack = 0
  5061  00758A  0E00               	movlw	0
  5062  00758C  6E06               	movwf	___awdiv@sign,c
  5063  00758E  AE04               	btfss	___awdiv@divisor+1,7,c
  5064  007590  D006               	goto	l2665
  5065  007592  6C03               	negf	___awdiv@divisor,c
  5066  007594  1E04               	comf	___awdiv@divisor+1,f,c
  5067  007596  B0D8               	btfsc	status,0,c
  5068  007598  2A04               	incf	___awdiv@divisor+1,f,c
  5069  00759A  0E01               	movlw	1
  5070  00759C  6E06               	movwf	___awdiv@sign,c
  5071  00759E                     l2665:
  5072  00759E  AE02               	btfss	___awdiv@dividend+1,7,c
  5073  0075A0  D006               	goto	l2671
  5074  0075A2  6C01               	negf	___awdiv@dividend,c
  5075  0075A4  1E02               	comf	___awdiv@dividend+1,f,c
  5076  0075A6  B0D8               	btfsc	status,0,c
  5077  0075A8  2A02               	incf	___awdiv@dividend+1,f,c
  5078  0075AA  0E01               	movlw	1
  5079  0075AC  1A06               	xorwf	___awdiv@sign,f,c
  5080  0075AE                     l2671:
  5081  0075AE  0E00               	movlw	0
  5082  0075B0  6E08               	movwf	___awdiv@quotient+1,c
  5083  0075B2  0E00               	movlw	0
  5084  0075B4  6E07               	movwf	___awdiv@quotient,c
  5085  0075B6  5003               	movf	___awdiv@divisor,w,c
  5086  0075B8  1004               	iorwf	___awdiv@divisor+1,w,c
  5087  0075BA  B4D8               	btfsc	status,2,c
  5088  0075BC  D01C               	goto	l2693
  5089  0075BE  0E01               	movlw	1
  5090  0075C0  6E05               	movwf	___awdiv@counter,c
  5091  0075C2  D004               	goto	l2679
  5092  0075C4                     l2677:
  5093  0075C4  90D8               	bcf	status,0,c
  5094  0075C6  3603               	rlcf	___awdiv@divisor,f,c
  5095  0075C8  3604               	rlcf	___awdiv@divisor+1,f,c
  5096  0075CA  2A05               	incf	___awdiv@counter,f,c
  5097  0075CC                     l2679:
  5098  0075CC  AE04               	btfss	___awdiv@divisor+1,7,c
  5099  0075CE  D7FA               	goto	l2677
  5100  0075D0                     u1430:
  5101  0075D0  90D8               	bcf	status,0,c
  5102  0075D2  3607               	rlcf	___awdiv@quotient,f,c
  5103  0075D4  3608               	rlcf	___awdiv@quotient+1,f,c
  5104  0075D6  5003               	movf	___awdiv@divisor,w,c
  5105  0075D8  5C01               	subwf	___awdiv@dividend,w,c
  5106  0075DA  5004               	movf	___awdiv@divisor+1,w,c
  5107  0075DC  5802               	subwfb	___awdiv@dividend+1,w,c
  5108  0075DE  A0D8               	btfss	status,0,c
  5109  0075E0  D005               	goto	l2689
  5110  0075E2  5003               	movf	___awdiv@divisor,w,c
  5111  0075E4  5E01               	subwf	___awdiv@dividend,f,c
  5112  0075E6  5004               	movf	___awdiv@divisor+1,w,c
  5113  0075E8  5A02               	subwfb	___awdiv@dividend+1,f,c
  5114  0075EA  8007               	bsf	___awdiv@quotient,0,c
  5115  0075EC                     l2689:
  5116  0075EC  90D8               	bcf	status,0,c
  5117  0075EE  3204               	rrcf	___awdiv@divisor+1,f,c
  5118  0075F0  3203               	rrcf	___awdiv@divisor,f,c
  5119  0075F2  2E05               	decfsz	___awdiv@counter,f,c
  5120  0075F4  D7ED               	goto	u1430
  5121  0075F6                     l2693:
  5122  0075F6  5006               	movf	___awdiv@sign,w,c
  5123  0075F8  B4D8               	btfsc	status,2,c
  5124  0075FA  D004               	goto	l2697
  5125  0075FC  6C07               	negf	___awdiv@quotient,c
  5126  0075FE  1E08               	comf	___awdiv@quotient+1,f,c
  5127  007600  B0D8               	btfsc	status,0,c
  5128  007602  2A08               	incf	___awdiv@quotient+1,f,c
  5129  007604                     l2697:
  5130  007604  C007  F001         	movff	___awdiv@quotient,?___awdiv
  5131  007608  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  5132  00760C  0012               	return		;funcret
  5133  00760E                     __end_of___awdiv:
  5134                           	opt callstack 0
  5135                           
  5136 ;; *************** function _aveSensor *****************
  5137 ;; Defined at:
  5138 ;;		line 857 in file "./functions.c"
  5139 ;; Parameters:    Size  Location     Type
  5140 ;;  s               1    wreg     unsigned char 
  5141 ;; Auto vars:     Size  Location     Type
  5142 ;;  s               1    5[COMRAM] unsigned char 
  5143 ;;  a               1    9[COMRAM] unsigned char 
  5144 ;;  measurements    2    6[COMRAM] unsigned int 
  5145 ;;  result          1    8[COMRAM] unsigned char 
  5146 ;; Return value:  Size  Location     Type
  5147 ;;                  1    wreg      unsigned char 
  5148 ;; Registers used:
  5149 ;;		wreg, status,2, status,0, cstack
  5150 ;; Tracked objects:
  5151 ;;		On entry : 0/0
  5152 ;;		On exit  : 0/0
  5153 ;;		Unchanged: 0/0
  5154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5155 ;;      Params:         0       0       0       0       0       0       0
  5156 ;;      Locals:         5       0       0       0       0       0       0
  5157 ;;      Temps:          2       0       0       0       0       0       0
  5158 ;;      Totals:         7       0       0       0       0       0       0
  5159 ;;Total ram usage:        7 bytes
  5160 ;; Hardware stack levels used:    1
  5161 ;; Hardware stack levels required when called:    1
  5162 ;; This function calls:
  5163 ;;		_readADC
  5164 ;;		_setADCChannel
  5165 ;; This function is called by:
  5166 ;;		_calibrate
  5167 ;;		_capTouch
  5168 ;;		_readAllSensors
  5169 ;; This function uses a non-reentrant model
  5170 ;;
  5171                           
  5172                           	psect	text36
  5173  0071B8                     __ptext36:
  5174                           	opt callstack 0
  5175  0071B8                     _aveSensor:
  5176                           	opt callstack 26
  5177                           
  5178                           ;incstack = 0
  5179                           ;aveSensor@s stored from wreg
  5180  0071B8  6E06               	movwf	aveSensor@s,c
  5181                           
  5182                           ;./functions.c: 857: unsigned char aveSensor(unsigned char s);./functions.c: 858: {;./fu
      +                          nctions.c: 859:     setADCChannel(s);
  5183  0071BA  5006               	movf	aveSensor@s,w,c
  5184  0071BC  EC83  F03A         	call	_setADCChannel
  5185                           
  5186                           ;./functions.c: 860:     unsigned int measurements = 0;
  5187  0071C0  0E00               	movlw	0
  5188  0071C2  6E08               	movwf	aveSensor@measurements+1,c
  5189  0071C4  0E00               	movlw	0
  5190  0071C6  6E07               	movwf	aveSensor@measurements,c
  5191                           
  5192                           ;./functions.c: 862:     for (unsigned char a = 0; a < 8; a++)
  5193  0071C8  0E00               	movlw	0
  5194  0071CA  6E0A               	movwf	aveSensor@a,c
  5195  0071CC                     l2567:
  5196                           
  5197                           ;./functions.c: 863:     {;./functions.c: 864:         measurements += readADC();
  5198  0071CC  EC7A  F037         	call	_readADC	;wreg free
  5199  0071D0  6E04               	movwf	??_aveSensor& (0+255),c
  5200  0071D2  5004               	movf	??_aveSensor,w,c
  5201  0071D4  2607               	addwf	aveSensor@measurements,f,c
  5202  0071D6  0E00               	movlw	0
  5203  0071D8  2208               	addwfc	aveSensor@measurements+1,f,c
  5204                           
  5205                           ;./functions.c: 865:     }
  5206  0071DA  2A0A               	incf	aveSensor@a,f,c
  5207  0071DC  0E07               	movlw	7
  5208  0071DE  640A               	cpfsgt	aveSensor@a,c
  5209  0071E0  D7F5               	goto	l2567
  5210                           
  5211                           ;./functions.c: 867:     unsigned char result = measurements / 8;
  5212  0071E2  C007  F004         	movff	aveSensor@measurements,??_aveSensor
  5213  0071E6  C008  F005         	movff	aveSensor@measurements+1,??_aveSensor+1
  5214  0071EA  90D8               	bcf	status,0,c
  5215  0071EC  3205               	rrcf	??_aveSensor+1,f,c
  5216  0071EE  3204               	rrcf	??_aveSensor,f,c
  5217  0071F0  90D8               	bcf	status,0,c
  5218  0071F2  3205               	rrcf	??_aveSensor+1,f,c
  5219  0071F4  3204               	rrcf	??_aveSensor,f,c
  5220  0071F6  90D8               	bcf	status,0,c
  5221  0071F8  3205               	rrcf	??_aveSensor+1,f,c
  5222  0071FA  3204               	rrcf	??_aveSensor,f,c
  5223  0071FC  5004               	movf	??_aveSensor,w,c
  5224  0071FE  6E09               	movwf	aveSensor@result,c
  5225                           
  5226                           ;./functions.c: 869:     return result;
  5227  007200  5009               	movf	aveSensor@result,w,c
  5228  007202  0012               	return		;funcret
  5229  007204                     __end_of_aveSensor:
  5230                           	opt callstack 0
  5231                           
  5232 ;; *************** function _setADCChannel *****************
  5233 ;; Defined at:
  5234 ;;		line 806 in file "./functions.c"
  5235 ;; Parameters:    Size  Location     Type
  5236 ;;  channel         1    wreg     unsigned char 
  5237 ;; Auto vars:     Size  Location     Type
  5238 ;;  channel         1    2[COMRAM] unsigned char 
  5239 ;; Return value:  Size  Location     Type
  5240 ;;                  1    wreg      void 
  5241 ;; Registers used:
  5242 ;;		wreg, status,2, status,0
  5243 ;; Tracked objects:
  5244 ;;		On entry : 0/0
  5245 ;;		On exit  : 0/0
  5246 ;;		Unchanged: 0/0
  5247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5248 ;;      Params:         0       0       0       0       0       0       0
  5249 ;;      Locals:         1       0       0       0       0       0       0
  5250 ;;      Temps:          2       0       0       0       0       0       0
  5251 ;;      Totals:         3       0       0       0       0       0       0
  5252 ;;Total ram usage:        3 bytes
  5253 ;; Hardware stack levels used:    1
  5254 ;; This function calls:
  5255 ;;		Nothing
  5256 ;; This function is called by:
  5257 ;;		_aveSensor
  5258 ;; This function uses a non-reentrant model
  5259 ;;
  5260                           
  5261                           	psect	text37
  5262  007506                     __ptext37:
  5263                           	opt callstack 0
  5264  007506                     _setADCChannel:
  5265                           	opt callstack 26
  5266                           
  5267                           ;incstack = 0
  5268                           ;setADCChannel@channel stored from wreg
  5269  007506  6E03               	movwf	setADCChannel@channel,c
  5270                           
  5271                           ;./functions.c: 806: void setADCChannel(unsigned char channel);./functions.c: 807: {;./f
      +                          unctions.c: 808:     ADCON0bits.CHS = channel;
  5272  007508  C003  F001         	movff	setADCChannel@channel,??_setADCChannel
  5273  00750C  4601               	rlncf	??_setADCChannel,f,c
  5274  00750E  4601               	rlncf	??_setADCChannel,f,c
  5275  007510  50C2               	movf	4034,w,c	;volatile
  5276  007512  1801               	xorwf	??_setADCChannel,w,c
  5277  007514  0B83               	andlw	-125
  5278  007516  1801               	xorwf	??_setADCChannel,w,c
  5279  007518  6EC2               	movwf	4034,c	;volatile
  5280                           
  5281                           ;./functions.c: 810:     switch (channel)
  5282  00751A  D01C               	goto	l2537
  5283  00751C                     l474:
  5284                           
  5285                           ;./functions.c: 813:         TRISBbits.TRISB2 = 1;
  5286  00751C  8493               	bsf	3987,2,c	;volatile
  5287                           
  5288                           ;./functions.c: 814:         ANSELBbits.ANSB2 = 1;
  5289  00751E  010F               	movlb	15	; () banked
  5290  007520  8539               	bsf	57,2,b	;volatile
  5291                           
  5292                           ;./functions.c: 815:         break;
  5293  007522  0012               	return	
  5294  007524                     l476:
  5295                           
  5296                           ;./functions.c: 817:         TRISBbits.TRISB3 = 1;
  5297  007524  8693               	bsf	3987,3,c	;volatile
  5298                           
  5299                           ;./functions.c: 818:         ANSELBbits.ANSB3 = 1;
  5300  007526  010F               	movlb	15	; () banked
  5301  007528  8739               	bsf	57,3,b	;volatile
  5302                           
  5303                           ;./functions.c: 819:         break;
  5304  00752A  0012               	return	
  5305  00752C                     l477:
  5306                           
  5307                           ;./functions.c: 821:         TRISBbits.TRISB1 = 1;
  5308  00752C  8293               	bsf	3987,1,c	;volatile
  5309                           
  5310                           ;./functions.c: 822:         ANSELBbits.ANSB1 = 1;
  5311  00752E  010F               	movlb	15	; () banked
  5312  007530  8339               	bsf	57,1,b	;volatile
  5313                           
  5314                           ;./functions.c: 823:         break;
  5315  007532  0012               	return	
  5316  007534                     l478:
  5317                           
  5318                           ;./functions.c: 825:         TRISBbits.TRISB0 = 1;
  5319  007534  8093               	bsf	3987,0,c	;volatile
  5320                           
  5321                           ;./functions.c: 826:         ANSELBbits.ANSB0 = 1;
  5322  007536  010F               	movlb	15	; () banked
  5323  007538  8139               	bsf	57,0,b	;volatile
  5324                           
  5325                           ;./functions.c: 827:         break;
  5326  00753A  0012               	return	
  5327  00753C                     l479:
  5328                           
  5329                           ;./functions.c: 829:         TRISBbits.TRISB5 = 1;
  5330  00753C  8A93               	bsf	3987,5,c	;volatile
  5331                           
  5332                           ;./functions.c: 830:         ANSELBbits.ANSB5 = 1;
  5333  00753E  010F               	movlb	15	; () banked
  5334  007540  8B39               	bsf	57,5,b	;volatile
  5335                           
  5336                           ;./functions.c: 831:         break;
  5337  007542  0012               	return	
  5338  007544                     l480:
  5339                           
  5340                           ;./functions.c: 833:         TRISCbits.TRISC3 = 1;
  5341  007544  8694               	bsf	3988,3,c	;volatile
  5342                           
  5343                           ;./functions.c: 834:         ANSELCbits.ANSC3 = 1;
  5344  007546  010F               	movlb	15	; () banked
  5345  007548  873A               	bsf	58,3,b	;volatile
  5346                           
  5347                           ;./functions.c: 835:         break;
  5348  00754A  0012               	return	
  5349  00754C                     l481:
  5350                           
  5351                           ;./functions.c: 838:         TRISBbits.TRISB0 = 1;
  5352  00754C  8093               	bsf	3987,0,c	;volatile
  5353                           
  5354                           ;./functions.c: 839:         ANSELBbits.ANSB0 = 1;
  5355  00754E  010F               	movlb	15	; () banked
  5356  007550  8139               	bsf	57,0,b	;volatile
  5357                           
  5358                           ;./functions.c: 840:         break;
  5359  007552  0012               	return	
  5360  007554                     l2537:
  5361  007554  5003               	movf	setADCChannel@channel,w,c
  5362  007556  6E01               	movwf	??_setADCChannel& (0+255),c
  5363  007558  6A02               	clrf	(??_setADCChannel+1)& (0+255),c
  5364                           
  5365                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5366                           ; Switch size 1, requested type "simple"
  5367                           ; Number of cases is 1, Range of values is 0 to 0
  5368                           ; switch strategies available:
  5369                           ; Name         Instructions Cycles
  5370                           ; simple_byte            4     3 (average)
  5371                           ;	Chosen strategy is simple_byte
  5372  00755A  5002               	movf	??_setADCChannel+1,w,c
  5373  00755C  0A00               	xorlw	0	; case 0
  5374  00755E  A4D8               	btfss	status,2,c
  5375  007560  D7F5               	goto	l481
  5376                           
  5377                           ; Switch size 1, requested type "simple"
  5378                           ; Number of cases is 6, Range of values is 8 to 15
  5379                           ; switch strategies available:
  5380                           ; Name         Instructions Cycles
  5381                           ; simple_byte           19    10 (average)
  5382                           ;	Chosen strategy is simple_byte
  5383  007562  5001               	movf	??_setADCChannel,w,c
  5384  007564  0A08               	xorlw	8	; case 8
  5385  007566  B4D8               	btfsc	status,2,c
  5386  007568  D7D9               	goto	l474
  5387  00756A  0A01               	xorlw	1	; case 9
  5388  00756C  B4D8               	btfsc	status,2,c
  5389  00756E  D7DA               	goto	l476
  5390  007570  0A03               	xorlw	3	; case 10
  5391  007572  B4D8               	btfsc	status,2,c
  5392  007574  D7DB               	goto	l477
  5393  007576  0A06               	xorlw	6	; case 12
  5394  007578  B4D8               	btfsc	status,2,c
  5395  00757A  D7DC               	goto	l478
  5396  00757C  0A01               	xorlw	1	; case 13
  5397  00757E  B4D8               	btfsc	status,2,c
  5398  007580  D7DD               	goto	l479
  5399  007582  0A02               	xorlw	2	; case 15
  5400  007584  B4D8               	btfsc	status,2,c
  5401  007586  D7DE               	goto	l480
  5402  007588  D7E1               	goto	l481
  5403  00758A                     __end_of_setADCChannel:
  5404                           	opt callstack 0
  5405                           
  5406 ;; *************** function _readADC *****************
  5407 ;; Defined at:
  5408 ;;		line 847 in file "./functions.c"
  5409 ;; Parameters:    Size  Location     Type
  5410 ;;		None
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;		None
  5413 ;; Return value:  Size  Location     Type
  5414 ;;                  1    wreg      unsigned char 
  5415 ;; Registers used:
  5416 ;;		wreg, status,2
  5417 ;; Tracked objects:
  5418 ;;		On entry : 0/0
  5419 ;;		On exit  : 0/0
  5420 ;;		Unchanged: 0/0
  5421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5422 ;;      Params:         0       0       0       0       0       0       0
  5423 ;;      Locals:         0       0       0       0       0       0       0
  5424 ;;      Temps:          0       0       0       0       0       0       0
  5425 ;;      Totals:         0       0       0       0       0       0       0
  5426 ;;Total ram usage:        0 bytes
  5427 ;; Hardware stack levels used:    1
  5428 ;; This function calls:
  5429 ;;		Nothing
  5430 ;; This function is called by:
  5431 ;;		_aveSensor
  5432 ;; This function uses a non-reentrant model
  5433 ;;
  5434                           
  5435                           	psect	text38
  5436  006EF4                     __ptext38:
  5437                           	opt callstack 0
  5438  006EF4                     _readADC:
  5439                           	opt callstack 26
  5440                           
  5441                           ;./functions.c: 849:     ADCON0bits.GO = 1;
  5442                           
  5443                           ; BSR set to: 15
  5444                           ;incstack = 0
  5445  006EF4  82C2               	bsf	4034,1,c	;volatile
  5446  006EF6                     l485:
  5447                           
  5448                           ;./functions.c: 851:     while (ADCON0bits.GO)
  5449  006EF6  B2C2               	btfsc	4034,1,c	;volatile
  5450  006EF8  D7FE               	goto	l485
  5451                           
  5452                           ;./functions.c: 853:     return ADRESH;
  5453  006EFA  50C4               	movf	4036,w,c	;volatile
  5454  006EFC  0012               	return		;funcret
  5455  006EFE                     __end_of_readADC:
  5456                           	opt callstack 0
  5457                           
  5458 ;; *************** function _PRC *****************
  5459 ;; Defined at:
  5460 ;;		line 319 in file "./functions.c"
  5461 ;; Parameters:    Size  Location     Type
  5462 ;;		None
  5463 ;; Auto vars:     Size  Location     Type
  5464 ;;  a               1   56[COMRAM] unsigned char 
  5465 ;;  a               1   55[COMRAM] unsigned char 
  5466 ;;  a               1   54[COMRAM] unsigned char 
  5467 ;;  a               1   53[COMRAM] unsigned char 
  5468 ;;  a               1   52[COMRAM] unsigned char 
  5469 ;;  a               1   51[COMRAM] unsigned char 
  5470 ;;  a               1   50[COMRAM] unsigned char 
  5471 ;;  a               1   49[COMRAM] unsigned char 
  5472 ;;  a               1   48[COMRAM] unsigned char 
  5473 ;;  message        32   11[COMRAM] unsigned char [32]
  5474 ;;  message2        5   43[COMRAM] unsigned char [5]
  5475 ;; Return value:  Size  Location     Type
  5476 ;;                  1    wreg      void 
  5477 ;; Registers used:
  5478 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5479 ;; Tracked objects:
  5480 ;;		On entry : 0/0
  5481 ;;		On exit  : 0/0
  5482 ;;		Unchanged: 0/0
  5483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5484 ;;      Params:         0       0       0       0       0       0       0
  5485 ;;      Locals:        46       0       0       0       0       0       0
  5486 ;;      Temps:          2       0       0       0       0       0       0
  5487 ;;      Totals:        48       0       0       0       0       0       0
  5488 ;;Total ram usage:       48 bytes
  5489 ;; Hardware stack levels used:    1
  5490 ;; Hardware stack levels required when called:    2
  5491 ;; This function calls:
  5492 ;;		_error
  5493 ;;		_trans
  5494 ;; This function is called by:
  5495 ;;		_RCE
  5496 ;; This function uses a non-reentrant model
  5497 ;;
  5498                           
  5499                           	psect	text39
  5500  007BB0                     __ptext39:
  5501                           	opt callstack 0
  5502  007BB0                     _PRC:
  5503                           	opt callstack 27
  5504                           
  5505                           ;./functions.c: 321:     PORTD = 0b11111001;
  5506                           
  5507                           ;incstack = 0
  5508  007BB0  0EF9               	movlw	249
  5509  007BB2  6E83               	movwf	3971,c	;volatile
  5510  007BB4                     l3269:
  5511                           
  5512                           ;./functions.c: 323:     {;./functions.c: 324:         unsigned char message[] = "\nWhat
      +                           color should sanic race?\n";
  5513  007BB4  EE21  F000         	lfsr	2,PRC@F6029
  5514  007BB8  EE10  F00C         	lfsr	1,PRC@message
  5515  007BBC  0E1F               	movlw	31
  5516  007BBE                     u2221:
  5517  007BBE  CFDB FFE3          	movff	plusw2,plusw1
  5518  007BC2  06E8               	decf	wreg,f,c
  5519  007BC4  E2FC               	bc	u2221
  5520                           
  5521                           ;./functions.c: 325:         unsigned char message2[] = "\nSet";
  5522  007BC6  EE20  F0D0         	lfsr	2,PRC@F6031
  5523  007BCA  EE10  F02C         	lfsr	1,PRC@message2
  5524  007BCE  0E04               	movlw	4
  5525  007BD0                     u2231:
  5526  007BD0  CFDB FFE3          	movff	plusw2,plusw1
  5527  007BD4  06E8               	decf	wreg,f,c
  5528  007BD6  E2FC               	bc	u2231
  5529                           
  5530                           ;./functions.c: 327:         for (unsigned char a = 0; a < 31; a++)
  5531  007BD8  0E00               	movlw	0
  5532  007BDA  6E31               	movwf	PRC@a,c
  5533  007BDC                     l3277:
  5534                           
  5535                           ;./functions.c: 328:         {;./functions.c: 329:             trans(message[a]);
  5536  007BDC  0E0C               	movlw	low PRC@message
  5537  007BDE  2431               	addwf	PRC@a,w,c
  5538  007BE0  6ED9               	movwf	fsr2l,c
  5539  007BE2  6ADA               	clrf	fsr2h,c
  5540  007BE4  0E00               	movlw	high PRC@message
  5541  007BE6  22DA               	addwfc	fsr2h,f,c
  5542  007BE8  50DF               	movf	indf2,w,c
  5543  007BEA  EC8E  F037         	call	_trans
  5544                           
  5545                           ;./functions.c: 330:         }
  5546  007BEE  2A31               	incf	PRC@a,f,c
  5547  007BF0  0E1E               	movlw	30
  5548  007BF2  6431               	cpfsgt	PRC@a,c
  5549  007BF4  D7F3               	goto	l3277
  5550  007BF6                     u2240:
  5551  007BF6  BA9E               	btfsc	3998,5,c	;volatile
  5552  007BF8  D090               	goto	l3409
  5553  007BFA  D7FD               	goto	u2240
  5554  007BFC                     l3283:
  5555                           
  5556                           ;./functions.c: 336:             for (unsigned char a = 0; a < 8; a++)
  5557  007BFC  0E00               	movlw	0
  5558  007BFE  6E32               	movwf	PRC@a_1266,c
  5559  007C00                     l3289:
  5560                           
  5561                           ;./functions.c: 337:             {;./functions.c: 338:                 raceColor[a] = 0;
  5562  007C00  0EBA               	movlw	low _raceColor
  5563  007C02  2432               	addwf	PRC@a_1266,w,c
  5564  007C04  6ED9               	movwf	fsr2l,c
  5565  007C06  6ADA               	clrf	fsr2h,c
  5566  007C08  0E00               	movlw	high _raceColor
  5567  007C0A  22DA               	addwfc	fsr2h,f,c
  5568  007C0C  0E00               	movlw	0
  5569  007C0E  6EDF               	movwf	indf2,c
  5570                           
  5571                           ;./functions.c: 339:             }
  5572  007C10  2A32               	incf	PRC@a_1266,f,c
  5573  007C12  0E07               	movlw	7
  5574  007C14  6432               	cpfsgt	PRC@a_1266,c
  5575  007C16  D7F4               	goto	l3289
  5576                           
  5577                           ;./functions.c: 340:             raceColor[3] = 1;
  5578  007C18  0E01               	movlw	1
  5579  007C1A  0100               	movlb	0	; () banked
  5580  007C1C  6FBD               	movwf	(_raceColor+3)& (0+255),b
  5581                           
  5582                           ;./functions.c: 341:             for (unsigned char a = 0; a < 4; a++)
  5583  007C1E  0E00               	movlw	0
  5584  007C20  6E33               	movwf	PRC@a_1267,c
  5585  007C22                     l3301:
  5586                           
  5587                           ;./functions.c: 342:             {;./functions.c: 343:                 trans(message2[a]
      +                          );
  5588  007C22  0E2C               	movlw	low PRC@message2
  5589  007C24  2433               	addwf	PRC@a_1267,w,c
  5590  007C26  6ED9               	movwf	fsr2l,c
  5591  007C28  6ADA               	clrf	fsr2h,c
  5592  007C2A  0E00               	movlw	high PRC@message2
  5593  007C2C  22DA               	addwfc	fsr2h,f,c
  5594  007C2E  50DF               	movf	indf2,w,c
  5595  007C30  EC8E  F037         	call	_trans
  5596                           
  5597                           ;./functions.c: 344:             }
  5598  007C34  2A33               	incf	PRC@a_1267,f,c
  5599  007C36  0E03               	movlw	3
  5600  007C38  6433               	cpfsgt	PRC@a_1267,c
  5601  007C3A  D7F3               	goto	l3301
  5602                           
  5603                           ;./functions.c: 345:             raceDayColor = 'B';
  5604  007C3C  0E42               	movlw	66
  5605  007C3E  6E55               	movwf	_raceDayColor,c
  5606  007C40  0012               	return	
  5607  007C42                     l3313:
  5608                           
  5609                           ;./functions.c: 349:             for (unsigned char a = 0; a < 8; a++)
  5610  007C42  0E00               	movlw	0
  5611  007C44  6E34               	movwf	PRC@a_1268,c
  5612  007C46                     l3319:
  5613                           
  5614                           ;./functions.c: 350:             {;./functions.c: 351:                 raceColor[a] = 0;
  5615  007C46  0EBA               	movlw	low _raceColor
  5616  007C48  2434               	addwf	PRC@a_1268,w,c
  5617  007C4A  6ED9               	movwf	fsr2l,c
  5618  007C4C  6ADA               	clrf	fsr2h,c
  5619  007C4E  0E00               	movlw	high _raceColor
  5620  007C50  22DA               	addwfc	fsr2h,f,c
  5621  007C52  0E00               	movlw	0
  5622  007C54  6EDF               	movwf	indf2,c
  5623                           
  5624                           ;./functions.c: 352:             }
  5625  007C56  2A34               	incf	PRC@a_1268,f,c
  5626  007C58  0E07               	movlw	7
  5627  007C5A  6434               	cpfsgt	PRC@a_1268,c
  5628  007C5C  D7F4               	goto	l3319
  5629                           
  5630                           ;./functions.c: 353:             raceColor[1] = 1;
  5631  007C5E  0E01               	movlw	1
  5632  007C60  0100               	movlb	0	; () banked
  5633  007C62  6FBB               	movwf	(_raceColor+1)& (0+255),b
  5634                           
  5635                           ;./functions.c: 354:             for (unsigned char a = 0; a < 4; a++)
  5636  007C64  0E00               	movlw	0
  5637  007C66  6E35               	movwf	PRC@a_1269,c
  5638  007C68                     l3331:
  5639                           
  5640                           ;./functions.c: 355:             {;./functions.c: 356:                 trans(message2[a]
      +                          );
  5641  007C68  0E2C               	movlw	low PRC@message2
  5642  007C6A  2435               	addwf	PRC@a_1269,w,c
  5643  007C6C  6ED9               	movwf	fsr2l,c
  5644  007C6E  6ADA               	clrf	fsr2h,c
  5645  007C70  0E00               	movlw	high PRC@message2
  5646  007C72  22DA               	addwfc	fsr2h,f,c
  5647  007C74  50DF               	movf	indf2,w,c
  5648  007C76  EC8E  F037         	call	_trans
  5649                           
  5650                           ;./functions.c: 357:             }
  5651  007C7A  2A35               	incf	PRC@a_1269,f,c
  5652  007C7C  0E03               	movlw	3
  5653  007C7E  6435               	cpfsgt	PRC@a_1269,c
  5654  007C80  D7F3               	goto	l3331
  5655                           
  5656                           ;./functions.c: 358:             raceDayColor = 'G';
  5657  007C82  0E47               	movlw	71
  5658  007C84  6E55               	movwf	_raceDayColor,c
  5659  007C86  0012               	return	
  5660  007C88                     l3343:
  5661                           
  5662                           ;./functions.c: 362:             for (unsigned char a = 0; a < 8; a++)
  5663  007C88  0E00               	movlw	0
  5664  007C8A  6E36               	movwf	PRC@a_1270,c
  5665  007C8C                     l3349:
  5666                           
  5667                           ;./functions.c: 363:             {;./functions.c: 364:                 raceColor[a] = 0;
  5668  007C8C  0EBA               	movlw	low _raceColor
  5669  007C8E  2436               	addwf	PRC@a_1270,w,c
  5670  007C90  6ED9               	movwf	fsr2l,c
  5671  007C92  6ADA               	clrf	fsr2h,c
  5672  007C94  0E00               	movlw	high _raceColor
  5673  007C96  22DA               	addwfc	fsr2h,f,c
  5674  007C98  0E00               	movlw	0
  5675  007C9A  6EDF               	movwf	indf2,c
  5676                           
  5677                           ;./functions.c: 365:             }
  5678  007C9C  2A36               	incf	PRC@a_1270,f,c
  5679  007C9E  0E07               	movlw	7
  5680  007CA0  6436               	cpfsgt	PRC@a_1270,c
  5681  007CA2  D7F4               	goto	l3349
  5682                           
  5683                           ;./functions.c: 366:             raceColor[2] = 1;
  5684  007CA4  0E01               	movlw	1
  5685  007CA6  0100               	movlb	0	; () banked
  5686  007CA8  6FBC               	movwf	(_raceColor+2)& (0+255),b
  5687                           
  5688                           ;./functions.c: 367:             for (unsigned char a = 0; a < 4; a++)
  5689  007CAA  0E00               	movlw	0
  5690  007CAC  6E37               	movwf	PRC@a_1271,c
  5691  007CAE                     l3361:
  5692                           
  5693                           ;./functions.c: 368:             {;./functions.c: 369:                 trans(message2[a]
      +                          );
  5694  007CAE  0E2C               	movlw	low PRC@message2
  5695  007CB0  2437               	addwf	PRC@a_1271,w,c
  5696  007CB2  6ED9               	movwf	fsr2l,c
  5697  007CB4  6ADA               	clrf	fsr2h,c
  5698  007CB6  0E00               	movlw	high PRC@message2
  5699  007CB8  22DA               	addwfc	fsr2h,f,c
  5700  007CBA  50DF               	movf	indf2,w,c
  5701  007CBC  EC8E  F037         	call	_trans
  5702                           
  5703                           ;./functions.c: 370:             }
  5704  007CC0  2A37               	incf	PRC@a_1271,f,c
  5705  007CC2  0E03               	movlw	3
  5706  007CC4  6437               	cpfsgt	PRC@a_1271,c
  5707  007CC6  D7F3               	goto	l3361
  5708                           
  5709                           ;./functions.c: 371:             raceDayColor = 'R';
  5710  007CC8  0E52               	movlw	82
  5711  007CCA  6E55               	movwf	_raceDayColor,c
  5712  007CCC  0012               	return	
  5713  007CCE                     l3373:
  5714                           
  5715                           ;./functions.c: 375:             for (unsigned char a = 0; a < 8; a++)
  5716  007CCE  0E00               	movlw	0
  5717  007CD0  6E38               	movwf	PRC@a_1272,c
  5718  007CD2                     l3379:
  5719                           
  5720                           ;./functions.c: 376:             {;./functions.c: 377:                 raceColor[a] = 0;
  5721  007CD2  0EBA               	movlw	low _raceColor
  5722  007CD4  2438               	addwf	PRC@a_1272,w,c
  5723  007CD6  6ED9               	movwf	fsr2l,c
  5724  007CD8  6ADA               	clrf	fsr2h,c
  5725  007CDA  0E00               	movlw	high _raceColor
  5726  007CDC  22DA               	addwfc	fsr2h,f,c
  5727  007CDE  0E00               	movlw	0
  5728  007CE0  6EDF               	movwf	indf2,c
  5729                           
  5730                           ;./functions.c: 378:             }
  5731  007CE2  2A38               	incf	PRC@a_1272,f,c
  5732  007CE4  0E07               	movlw	7
  5733  007CE6  6438               	cpfsgt	PRC@a_1272,c
  5734  007CE8  D7F4               	goto	l3379
  5735                           
  5736                           ;./functions.c: 379:             raceColor[4] = 1;
  5737  007CEA  0E01               	movlw	1
  5738  007CEC  0100               	movlb	0	; () banked
  5739  007CEE  6FBE               	movwf	(_raceColor+4)& (0+255),b
  5740                           
  5741                           ;./functions.c: 380:             for (unsigned char a = 0; a < 4; a++)
  5742  007CF0  0E00               	movlw	0
  5743  007CF2  6E39               	movwf	PRC@a_1273,c
  5744  007CF4                     l3391:
  5745                           
  5746                           ;./functions.c: 381:             {;./functions.c: 382:                 trans(message2[a]
      +                          );
  5747  007CF4  0E2C               	movlw	low PRC@message2
  5748  007CF6  2439               	addwf	PRC@a_1273,w,c
  5749  007CF8  6ED9               	movwf	fsr2l,c
  5750  007CFA  6ADA               	clrf	fsr2h,c
  5751  007CFC  0E00               	movlw	high PRC@message2
  5752  007CFE  22DA               	addwfc	fsr2h,f,c
  5753  007D00  50DF               	movf	indf2,w,c
  5754  007D02  EC8E  F037         	call	_trans
  5755                           
  5756                           ;./functions.c: 383:             }
  5757  007D06  2A39               	incf	PRC@a_1273,f,c
  5758  007D08  0E03               	movlw	3
  5759  007D0A  6439               	cpfsgt	PRC@a_1273,c
  5760  007D0C  D7F3               	goto	l3391
  5761                           
  5762                           ;./functions.c: 384:             raceDayColor = 'n';
  5763  007D0E  0E6E               	movlw	110
  5764  007D10  6E55               	movwf	_raceDayColor,c
  5765  007D12  0012               	return	
  5766  007D14                     l3403:
  5767                           
  5768                           ;./functions.c: 389:             error();
  5769  007D14  ECA2  F038         	call	_error	;wreg free
  5770                           
  5771                           ;./functions.c: 390:             continue;
  5772  007D18  D74D               	goto	l3269
  5773  007D1A                     l3409:
  5774  007D1A  50AE               	movf	4014,w,c	;volatile
  5775  007D1C  6E0A               	movwf	??_PRC& (0+255),c
  5776  007D1E  6A0B               	clrf	(??_PRC+1)& (0+255),c
  5777                           
  5778                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5779                           ; Switch size 1, requested type "simple"
  5780                           ; Number of cases is 1, Range of values is 0 to 0
  5781                           ; switch strategies available:
  5782                           ; Name         Instructions Cycles
  5783                           ; simple_byte            4     3 (average)
  5784                           ;	Chosen strategy is simple_byte
  5785  007D20  500B               	movf	??_PRC+1,w,c
  5786  007D22  0A00               	xorlw	0	; case 0
  5787  007D24  A4D8               	btfss	status,2,c
  5788  007D26  D7F6               	goto	l3403
  5789                           
  5790                           ; Switch size 1, requested type "simple"
  5791                           ; Number of cases is 4, Range of values is 66 to 110
  5792                           ; switch strategies available:
  5793                           ; Name         Instructions Cycles
  5794                           ; simple_byte           13     7 (average)
  5795                           ;	Chosen strategy is simple_byte
  5796  007D28  500A               	movf	??_PRC,w,c
  5797  007D2A  0A42               	xorlw	66	; case 66
  5798  007D2C  B4D8               	btfsc	status,2,c
  5799  007D2E  D766               	goto	l3283
  5800  007D30  0A05               	xorlw	5	; case 71
  5801  007D32  B4D8               	btfsc	status,2,c
  5802  007D34  D786               	goto	l3313
  5803  007D36  0A15               	xorlw	21	; case 82
  5804  007D38  B4D8               	btfsc	status,2,c
  5805  007D3A  D7A6               	goto	l3343
  5806  007D3C  0A3C               	xorlw	60	; case 110
  5807  007D3E  B4D8               	btfsc	status,2,c
  5808  007D40  D7C6               	goto	l3373
  5809  007D42  D7E8               	goto	l3403
  5810  007D44                     __end_of_PRC:
  5811                           	opt callstack 0
  5812                           
  5813 ;; *************** function _error *****************
  5814 ;; Defined at:
  5815 ;;		line 894 in file "./functions.c"
  5816 ;; Parameters:    Size  Location     Type
  5817 ;;		None
  5818 ;; Auto vars:     Size  Location     Type
  5819 ;;  a               1    8[COMRAM] unsigned char 
  5820 ;;  message         7    1[COMRAM] unsigned char [7]
  5821 ;; Return value:  Size  Location     Type
  5822 ;;                  1    wreg      void 
  5823 ;; Registers used:
  5824 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5825 ;; Tracked objects:
  5826 ;;		On entry : 0/0
  5827 ;;		On exit  : 0/0
  5828 ;;		Unchanged: 0/0
  5829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5830 ;;      Params:         0       0       0       0       0       0       0
  5831 ;;      Locals:         8       0       0       0       0       0       0
  5832 ;;      Temps:          0       0       0       0       0       0       0
  5833 ;;      Totals:         8       0       0       0       0       0       0
  5834 ;;Total ram usage:        8 bytes
  5835 ;; Hardware stack levels used:    1
  5836 ;; Hardware stack levels required when called:    1
  5837 ;; This function calls:
  5838 ;;		_trans
  5839 ;; This function is called by:
  5840 ;;		_PRC
  5841 ;;		_RCE
  5842 ;; This function uses a non-reentrant model
  5843 ;;
  5844                           
  5845                           	psect	text40
  5846  007144                     __ptext40:
  5847                           	opt callstack 0
  5848  007144                     _error:
  5849                           	opt callstack 28
  5850                           
  5851                           ;./functions.c: 896:     unsigned char message[] = "ERROR\n";
  5852                           
  5853                           ;incstack = 0
  5854  007144  EE20  F0C3         	lfsr	2,error@F6090
  5855  007148  EE10  F002         	lfsr	1,error@message
  5856  00714C  0E06               	movlw	6
  5857  00714E                     u1501:
  5858  00714E  CFDB FFE3          	movff	plusw2,plusw1
  5859  007152  06E8               	decf	wreg,f,c
  5860  007154  E2FC               	bc	u1501
  5861                           
  5862                           ;./functions.c: 898:     for (unsigned char a = 0; a < 6; a++)
  5863  007156  0E00               	movlw	0
  5864  007158  6E09               	movwf	error@a,c
  5865  00715A                     l2791:
  5866                           
  5867                           ;./functions.c: 899:     {;./functions.c: 900:         trans(message[a]);
  5868  00715A  0E02               	movlw	low error@message
  5869  00715C  2409               	addwf	error@a,w,c
  5870  00715E  6ED9               	movwf	fsr2l,c
  5871  007160  6ADA               	clrf	fsr2h,c
  5872  007162  0E00               	movlw	high error@message
  5873  007164  22DA               	addwfc	fsr2h,f,c
  5874  007166  50DF               	movf	indf2,w,c
  5875  007168  EC8E  F037         	call	_trans
  5876                           
  5877                           ;./functions.c: 901:     }
  5878  00716C  2A09               	incf	error@a,f,c
  5879  00716E  0E05               	movlw	5
  5880  007170  6409               	cpfsgt	error@a,c
  5881  007172  D7F3               	goto	l2791
  5882                           
  5883                           ;./functions.c: 903:     RCREG = 0;
  5884  007174  0E00               	movlw	0
  5885  007176  6EAE               	movwf	4014,c	;volatile
  5886  007178  0012               	return		;funcret
  5887  00717A                     __end_of_error:
  5888                           	opt callstack 0
  5889                           
  5890 ;; *************** function _trans *****************
  5891 ;; Defined at:
  5892 ;;		line 790 in file "./functions.c"
  5893 ;; Parameters:    Size  Location     Type
  5894 ;;  s               1    wreg     unsigned char 
  5895 ;; Auto vars:     Size  Location     Type
  5896 ;;  s               1    0[COMRAM] unsigned char 
  5897 ;; Return value:  Size  Location     Type
  5898 ;;                  1    wreg      void 
  5899 ;; Registers used:
  5900 ;;		wreg
  5901 ;; Tracked objects:
  5902 ;;		On entry : 0/0
  5903 ;;		On exit  : 0/0
  5904 ;;		Unchanged: 0/0
  5905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5906 ;;      Params:         0       0       0       0       0       0       0
  5907 ;;      Locals:         1       0       0       0       0       0       0
  5908 ;;      Temps:          0       0       0       0       0       0       0
  5909 ;;      Totals:         1       0       0       0       0       0       0
  5910 ;;Total ram usage:        1 bytes
  5911 ;; Hardware stack levels used:    1
  5912 ;; This function calls:
  5913 ;;		Nothing
  5914 ;; This function is called by:
  5915 ;;		_PRC
  5916 ;;		_pyCal
  5917 ;;		_capTouch
  5918 ;;		_ranges
  5919 ;;		_error
  5920 ;;		_RCE
  5921 ;; This function uses a non-reentrant model
  5922 ;;
  5923                           
  5924                           	psect	text41
  5925  006F1C                     __ptext41:
  5926                           	opt callstack 0
  5927  006F1C                     _trans:
  5928                           	opt callstack 29
  5929                           
  5930                           ;incstack = 0
  5931                           ;trans@s stored from wreg
  5932  006F1C  6E01               	movwf	trans@s,c
  5933  006F1E                     
  5934                           ;./functions.c: 792:     while (!PIR1bits.TX1IF)
  5935                           
  5936                           ;./functions.c: 793:         ;
  5937  006F1E  A89E               	btfss	3998,4,c	;volatile
  5938  006F20  D7FE               	goto	l2579
  5939                           
  5940                           ;./functions.c: 794:     TXREG = s;
  5941  006F22  C001  FFAD         	movff	trans@s,4013	;volatile
  5942  006F26  0012               	return		;funcret
  5943  006F28                     __end_of_trans:
  5944                           	opt callstack 0
  5945  0000                     
  5946                           	psect	rparam
  5947  0000                     tosu	equ	0xFFF
  5948                           tosh	equ	0xFFE
  5949                           tosl	equ	0xFFD
  5950                           stkptr	equ	0xFFC
  5951                           pclatu	equ	0xFFB
  5952                           pclath	equ	0xFFA
  5953                           pcl	equ	0xFF9
  5954                           tblptru	equ	0xFF8
  5955                           tblptrh	equ	0xFF7
  5956                           tblptrl	equ	0xFF6
  5957                           tablat	equ	0xFF5
  5958                           prodh	equ	0xFF4
  5959                           prodl	equ	0xFF3
  5960                           indf0	equ	0xFEF
  5961                           postinc0	equ	0xFEE
  5962                           postdec0	equ	0xFED
  5963                           preinc0	equ	0xFEC
  5964                           plusw0	equ	0xFEB
  5965                           fsr0h	equ	0xFEA
  5966                           fsr0l	equ	0xFE9
  5967                           wreg	equ	0xFE8
  5968                           indf1	equ	0xFE7
  5969                           postinc1	equ	0xFE6
  5970                           postdec1	equ	0xFE5
  5971                           preinc1	equ	0xFE4
  5972                           plusw1	equ	0xFE3
  5973                           fsr1h	equ	0xFE2
  5974                           fsr1l	equ	0xFE1
  5975                           bsr	equ	0xFE0
  5976                           indf2	equ	0xFDF
  5977                           postinc2	equ	0xFDE
  5978                           postdec2	equ	0xFDD
  5979                           preinc2	equ	0xFDC
  5980                           plusw2	equ	0xFDB
  5981                           fsr2h	equ	0xFDA
  5982                           fsr2l	equ	0xFD9
  5983                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        182
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     79      93
    BANK0           160      0     142
    BANK1           256      0      32
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    readFromEEP@rs	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(COMRAM[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(BANK0[5]), 

    readFromEEP@F6101	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(COMRAM[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(BANK0[5]), 

    writeToEEP@rs	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(COMRAM[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(BANK0[5]), 

    writeToEEP@F6094	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(COMRAM[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(BANK0[5]), 

    ranges@rangeArray	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(COMRAM[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(BANK0[5]), 

    ranges@F6085	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(COMRAM[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(BANK0[5]), 

    classifyColors@sensorRanges	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(COMRAM[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(BANK0[5]), 

    classifyColors@F6064	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(COMRAM[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(BANK0[5]), 

    calibrate@rangeArray	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(COMRAM[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(BANK0[5]), 

    calibrate@F6018	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(COMRAM[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(BANK0[5]), 


Critical Paths under _main in COMRAM

    _main->_RCE
    _init->_readFromEEP
    _RCE->_PRC
    _pyCal->_readAllSensors
    _navigate->_readAllSensors
    _readAllSensors->_aveSensor
    _capTouch->_aveSensor
    _calibrate->_ranges
    _sixSecDelay->_msDelay
    _ranges->_writeToEEP
    _aveSensor->_setADCChannel
    _PRC->_error
    _error->_trans

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6772
                                _RCE
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     184
                         _clearPorts
                        _readFromEEP
                           _setupADC
                           _setupOSC
                        _setupSerial
 ---------------------------------------------------------------------------------
 (2) _setupSerial                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setupOSC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _readFromEEP                                         15    15      0     184
                                              0 COMRAM    15    15      0
                            _EE_READ
 ---------------------------------------------------------------------------------
 (3) _EE_READ                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clearPorts                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RCE                                                 22    22      0    6588
                                             57 COMRAM    22    22      0
                                _PRC
                          _calibrate
                           _capTouch
                              _error
                           _navigate
                              _pyCal
                            _reverse
                       _setupPWMLeft
                      _setupPWMRight
                         _stopMotors
                              _trans
 ---------------------------------------------------------------------------------
 (2) _reverse                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pyCal                                                2     2      0     896
                                             18 COMRAM     2     2      0
                            _msDelay
                     _readAllSensors
                           _setupADC
                              _trans
 ---------------------------------------------------------------------------------
 (2) _navigate                                             0     0      0    1162
                     _classifyColors
                 _determineDirection
               _displayColorDetected
                   _displayRaceColor
                            _msDelay
                     _readAllSensors
                           _setupADC
                       _setupPWMLeft
                      _setupPWMRight
                         _stopMotors
                          _testBlack
 ---------------------------------------------------------------------------------
 (3) _testBlack                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _stopMotors                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setupPWMRight                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setupPWMLeft                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setupADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _readAllSensors                                       8     8      0     782
                                             10 COMRAM     8     8      0
                                _abs
                          _aveSensor
 ---------------------------------------------------------------------------------
 (3) _displayRaceColor                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _displayColorDetected                                 3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _determineDirection                                   0     0      0       0
                           _hardLeft
                          _hardRight
                               _left
                              _right
                         _searchMode
                           _straight
 ---------------------------------------------------------------------------------
 (4) _straight                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _searchMode                                           0     0      0       0
                              _right
 ---------------------------------------------------------------------------------
 (5) _right                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _left                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _hardRight                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _hardLeft                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _classifyColors                                      15    15      0     336
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 (2) _capTouch                                            31    31      0     564
                                             10 COMRAM    31    31      0
                                _abs
                          _aveSensor
                            _msDelay
                              _trans
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     218
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _calibrate                                           20    20      0    2642
                                             29 COMRAM    20    20      0
                          _aveSensor
                             _ranges
                        _sixSecDelay
 ---------------------------------------------------------------------------------
 (3) _sixSecDelay                                          1     1      0      68
                                              1 COMRAM     1     1      0
                            _msDelay
 ---------------------------------------------------------------------------------
 (3) _msDelay                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ranges                                              14    14      0     899
                                             15 COMRAM    14    14      0
                            ___awdiv
                              _trans
                         _writeToEEP
 ---------------------------------------------------------------------------------
 (4) _writeToEEP                                          15    15      0     184
                                              0 COMRAM    15    15      0
                             _EE_WRT
 ---------------------------------------------------------------------------------
 (5) _EE_WRT                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     398
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (4) _aveSensor                                            7     7      0     159
                                              3 COMRAM     7     7      0
                            _readADC
                      _setADCChannel
 ---------------------------------------------------------------------------------
 (5) _setADCChannel                                        3     3      0      44
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) _readADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PRC                                                 48    48      0     865
                                              9 COMRAM    48    48      0
                              _error
                              _trans
 ---------------------------------------------------------------------------------
 (2) _error                                                8     8      0     114
                                              1 COMRAM     8     8      0
                              _trans
 ---------------------------------------------------------------------------------
 (2) _trans                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _RCE
     _PRC
       _error
         _trans
       _trans
     _calibrate
       _aveSensor
         _readADC
         _setADCChannel
       _ranges
         ___awdiv
         _trans
         _writeToEEP
           _EE_WRT
       _sixSecDelay
         _msDelay
     _capTouch
       _abs
       _aveSensor
         _readADC
         _setADCChannel
       _msDelay
       _trans
     _error
       _trans
     _navigate
       _classifyColors
       _determineDirection
         _hardLeft
         _hardRight
         _left
         _right
         _searchMode
           _right
         _straight
       _displayColorDetected
       _displayRaceColor
       _msDelay
       _readAllSensors
         _abs
         _aveSensor
           _readADC
           _setADCChannel
       _setupADC
       _setupPWMLeft
       _setupPWMRight
       _stopMotors
       _testBlack
     _pyCal
       _msDelay
       _readAllSensors
         _abs
         _aveSensor
           _readADC
           _setADCChannel
       _setupADC
       _trans
     _reverse
     _setupPWMLeft
     _setupPWMRight
     _stopMotors
     _trans
   _init
     _clearPorts
     _readFromEEP
       _EE_READ
     _setupADC
     _setupOSC
     _setupSerial

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      20       6       12.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      8E       4       88.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4F      5D       1       97.9%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10B       9        0.0%
DATA                 0      0     10B      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri May 31 19:44:23 2019

               _colorsDetected 00E9                  capTouch@F6047 0060                   ___awdiv@sign 0006  
             readFromEEP@F6101 0088                   __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000  
                 __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000                    __CFG_LVP$ON 000000  
                          l521 7018                            l433 7612                            l346 748C  
                          l435 761E                            l531 7376                            l516 73D6  
                          l436 762A                            l437 7636                            l438 7642  
                          l439 764E                            l480 7544                            l544 704E  
                          l481 754C                            l561 6F1A                            l474 751C  
                          l379 7756                            l476 7524                            l396 77B6  
                          l485 6EF6                            l477 752C                            l478 7534  
                          l582 7AE8                            l479 753C                            l576 7AD8  
                 __CFG_CPB$OFF 000000                            _RCE 7A72                            _PR2 000FBB  
                          _PR4 000F52                   __CFG_CPD$OFF 000000                            _PR6 000F4B  
                          _PRC 7BB0                            _abs 7112                            _col 0056  
                          prod 000FF3                            wreg 000FE8                __end_of_EE_READ 6F08  
              ??_setupPWMRight 0001                           ?_RCE 0001                           ?_PRC 0001  
                         RCE@a 004E                           PRC@a 0031                           ?_abs 0001  
                         l3031 7D62                           l3025 7D5E                           l1282 713A  
                         l3051 7DAA                           l3301 7C22                           l3313 7C42  
                         l3403 7D14                           l3331 7C68                           l3227 7F8A  
                         l3139 7E9A                           l3343 7C88                           l3319 7C46  
                         l3183 7F12                           l3095 7E22                           l3361 7CAE  
                         l3409 7D1A                           l2537 7554                           l3433 721A  
                         l3601 7B14                           l3283 7BFC                           l3451 7262  
                         l3419 720C                           l3373 7CCE                           l3349 7C8C  
                         l3277 7BDC                           l3269 7BB4                           l2637 73D2  
                         l2901 7746                           l2805 77C0                           l3621 7B56  
                         l3525 7372                           l3391 7CF4                           l2567 71CC  
                         l2671 75AE                           l3623 7B5C                           l3615 7B44  
                         l3289 7C00                           l2665 759E                           l2753 7922  
                         l2745 78A8                           l2921 7782                           l2913 7766  
                         l2841 71A0                           l2833 7188                           l2825 7888  
                         l2817 77EC                           l3473 7296                           l3617 7B4A  
                         l2579 6F1E                           l3379 7CD2                           l3635 7B96  
                         l3619 7B50                           l3627 7B62                           l2677 75C4  
                         l2693 75F6                           l2933 77AC                           l2925 7790  
                         l2917 7774                           l2845 71AC                           l2837 7194  
                         l3629 7B92                           l3565 7A8C                           l2791 715A  
                         l2679 75CC                           l3495 7454                           l3487 7432  
                         l2871 7A58                           l2863 79D8                           l3583 7AD2  
                         l3575 7AB6                           l2697 7604                           l2689 75EC  
                         l2777 6F58                           l2929 779E                           l2881 765A  
                         l2953 72B8                           l2867 7A18                           l2859 7994  
                         l3595 7AFE                           l3579 7AC4                           l2893 7732  
                         l3597 7B06                           l2897 773C                           u1501 714E  
                         u2221 7BBE                           _LATA 000F89                           u1430 75D0  
                         _LATB 000F8A                           u2231 7BD0                           _LATC 000F8B  
                         u2240 7BF6                           u1360 7120                           u2400 7290  
                         _LATD 000F8C                           _FSR0 000FE9                           _LATE 000F8D  
                         u1530 784C                           u1371 73C2                           u1611 7988  
                         u1461 789C                           u2421 7426                           u1800 72B4  
                         u2451 7360                           u2481 7A80                           u1690 7742  
                         u2590 7B3E                           u1891 7D52                           _TMR1 000FCE  
                         _TMR2 000FBC                           _TMR4 000F53                           _TMR6 000F4C  
                         abs@a 0001                           _main 6F12                           _left 6F9C  
                         _init 7020                           _size 0057                           fsr0h 000FEA  
                         fsr1h 000FE2                           indf0 000FEF                           fsr2h 000FDA  
                         fsr0l 000FE9                           indf1 000FE7                           indf2 000FDF  
                         fsr1l 000FE1                           fsr2l 000FD9                  __CFG_BORV$190 000000  
                         prodl 000FF3                           start 0000                  __CFG_IESO$OFF 000000  
        ?_displayColorDetected 0001                   ___param_bank 000000                 capTouch@touch1 0027  
               capTouch@touch2 0028                          ??_RCE 003A                          ??_PRC 000A  
                        ??_abs 0003                   ?_readFromEEP 0001                   _BAUDCON1bits 000FB8  
                        ?_main 0001                          ?_left 0001                          ?_init 0001  
              __end_of___awdiv 760E                          _EEADR 000FA9                ___awdiv@divisor 0003  
                        _T1CON 000FCD                          _T2CON 000FBA                          _T4CON 000F51  
                        _T6CON 000F4A                ___awdiv@counter 0005                          _RCREG 000FAE  
                        _PORTA 000F80                          _PORTB 000F81                          _PORTC 000F82  
                        _PORTD 000F83                          _PORTE 000F84                          _TRISA 000F92  
                        _TRISB 000F93                          _TRISC 000F94                          _TRISD 000F95  
                        _TRISE 000F96                          _TXREG 000FAD         __size_of_setADCChannel 0084  
                __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000  
                __CFG_WRT3$OFF 000000                 __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000  
               __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000  
                __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000  
              __end_of_msDelay 705C                __end_of_readADC 6EFE                 __CFG_EBTRB$OFF 000000  
                        _error 7144                          _pyCal 7204                          _right 6FB6  
           __CFG_MCLRE$EXTMCLR 000000                          _trans 6F1C                          tablat 000FF5  
              __end_of_reverse 7004                          plusw1 000FE3                          plusw2 000FDB  
                        status 000FD8                 __CFG_HFOFST$ON 000000                 __CFG_PBADEN$ON 000000  
              capTouch@message 000B                __initialization 748E                   __end_of_main 6F1C  
                 __end_of_left 6FB6                   __end_of_init 703C                  calibrate@temp 0031  
           readFromEEP@address 000D                         ??_main 0050                         ??_left 0001  
                       ??_init 0010                      ??_EE_READ 0001                  __activetblptr 000002  
                       _ADCON1 000FC1                         ?_error 0001                         ?_pyCal 0001  
                       _ADRESH 000FC4                         _EEDATA 000FA8                         _CCPR1L 000FBE  
                       _CCPR5L 000F55                         _EECON2 000FA7    __size_of_determineDirection 009C  
                       ?_right 0001               ___awdiv@dividend 0001                         ?_trans 0001  
                       _ANSELA 000F38                         _ANSELB 000F39                         _ANSELC 000F3A  
                       _ANSELD 000F3B                         _ANSELE 000F3C               calibrate@samples 002A  
                       _EE_WRT 7004                 __CFG_WDTEN$OFF 000000                         _RCSTA1 000FAB  
                       _SPBRG1 000FAF               __end_of_capTouch 748E   readAllSensors@tempSensorVals 000D  
                       _TXSTA1 000FAC         ??_displayColorDetected 0001                  _setADCChannel 7506  
             __end_of_hardLeft 6F82                 __CFG_XINST$OFF 000000              writeToEEP@address 000D  
                 ?_sixSecDelay 0001                      ??___awdiv 0005                 __CFG_STVREN$ON 000000  
                       _ranges 7892               __end_of_navigate 72A2               ___awdiv@quotient 0007  
              classifyColors@a 000F        __size_of_readAllSensors 00D6                      ??_msDelay 0001  
                    ??_readADC 0001                         error@a 0009                         pyCal@a 0014  
                 __pdataCOMRAM 0050               __end_of_setupADC 709E               __end_of_setupOSC 6F12  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
           RCE@commandReceived 004A                      ??_reverse 0001                         trans@s 0001  
                 ?_setupSerial 0001               __end_of_straight 6FEA                     __accesstop 0060  
      __end_of__initialization 74FC                 ?_setADCChannel 0001                  ___rparam_used 000001  
            ?_displayRaceColor 0001                 __pcstackCOMRAM 0001                 calibrate@F6018 00B0  
                  ranges@F6085 009C             __size_of_calibrate 02BC                   __pidataBANK0 7697  
                 __pidataBANK1 705C             ??_displayRaceColor 0001           setADCChannel@channel 0003  
                __end_of_error 717A                  __end_of_pyCal 7252                  __end_of_right 6FD0  
                __end_of_trans 6F28                      RCE@a_1465 004F           __size_of_readFromEEP 0062  
           __size_of_aveSensor 004C             __size_of_hardRight 001A                        ??_error 0002  
                      ??_pyCal 0013                        ??_right 0001                        ??_trans 0001  
                   __pbssBANK0 00E9                        ?_EE_WRT 0001                __CFG_PLLCFG$OFF 000000  
                    PRC@a_1270 0036                      PRC@a_1271 0037                      PRC@a_1272 0038  
                    PRC@a_1273 0039                      PRC@a_1266 0032                      PRC@a_1267 0033  
                    PRC@a_1268 0034                      PRC@a_1269 0035                     _clearPorts 72FC  
           __CFG_CCP2MX$PORTC1 000000        __size_of_classifyColors 00F4             __CFG_CCP3MX$PORTB5 000000  
                      _CCP1CON 000FBD                        _CCP5CON 000F54                        ?_ranges 0001  
           __size_of_testBlack 005A                        _EE_READ 6EFE                      ?_capTouch 0001  
                    ?_hardLeft 0001                        _SPBRGH1 000FB0              __end_of_calibrate 8000  
   displayColorDetected@sensor 0003                   readFromEEP@a 000E                   readFromEEP@b 000F  
        __end_of_setupPWMRight 70E2                __size_of_EE_WRT 001C                ??_setADCChannel 0001  
                    ?_navigate 0001                    PRC@message2 002C              __end_of_aveSensor 7204  
            __end_of_hardRight 6F9C                     calibrate@a 002F                     calibrate@b 0030  
              __CFG_PWRTEN$OFF 000000                        _Lranges 00DF                        __Hparam 0000  
                      _Mranges 00DA                        __Lparam 0000            calibrate@rangeArray 0020  
                    ?_setupADC 0001                        _Rranges 0058              RCE@nCharsReceived 004D  
                    ?_setupOSC 0001                        ___awdiv 758A                   error@message 0002  
         __size_of_sixSecDelay 0014                      ?_straight 0001                        __pcinit 748E  
                      __ramtop 0600                __size_of_ranges 00EC                        __ptext0 6F12  
                      __ptext1 7020                        __ptext2 70E2                        __ptext3 6F08  
                      __ptext4 7356                        __ptext5 6EFE                        __ptext6 72FC  
                      __ptext7 7A72                        __ptext8 6FEA                        __ptext9 7204  
               _readAllSensors 77BC               ranges@rangeArray 0012                        _msDelay 703C  
                      _readADC 6EF4                   __size_of_RCE 013E                   __size_of_PRC 0194  
                    _T1CONbits 000FCD                     ??_capTouch 000B                      _T2CONbits 000FBA  
                 __size_of_abs 0032                      _T4CONbits 000F51                        _reverse 6FEA  
                   ??_hardLeft 0001                     _searchMode 6F28           end_of_initialization 74FC  
         __size_of_setupSerial 0030                  __Lmediumconst 0000                     ??_navigate 0013  
                      ranges@a 001D                        ranges@b 001C                  ?_setupPWMLeft 0001  
            __end_of_testBlack 72FC                    ?_clearPorts 0001                     aveSensor@a 000A  
                   aveSensor@s 0006                     ??_setupADC 0001                     ??_setupOSC 0001  
                      postdec1 000FE5                        postdec2 000FDD                        postinc0 000FEE  
                      postinc1 000FE6                        postinc2 000FDE                   writeToEEP@rs 0003  
                   _sensorVals 0050         __end_of_readAllSensors 7892                     ??_straight 0001  
                    _PORTAbits 000F80                      _PORTCbits 000F82                      _PORTEbits 000F84  
          classifyColors@F6064 00A6     __end_of_determineDirection 77BC                      _TRISBbits 000F93  
                    _TRISCbits 000F94                      _TRISEbits 000F96          aveSensor@measurements 0007  
               ??_setupPWMLeft 0001               msDelay@delayInMs 0001                 __end_of_EE_WRT 7020  
                   _stopMotors 6F42  __size_of_displayColorDetected 0088                 _classifyColors 797E  
                   _writeToEEP 73B8                ?_readAllSensors 0001                  __pidataCOMRAM 6F35  
               __end_of_ranges 797E                   _raceDayColor 0055            start_initialization 748E  
    __size_of_displayRaceColor 003E                    __end_of_RCE 7BB0                    __end_of_PRC 7D44  
          __size_of_clearPorts 005A                    __end_of_abs 7144                    ?_searchMode 0001  
                     ??_EE_WRT 0001                     error@F6090 00C3         __end_of_classifyColors 7A72  
               _sensorChannels 00CA                  ??_readFromEEP 0001                     RCE@message 003C  
                  __pdataBANK0 0060                    __pdataBANK1 0100                       ??_ranges 0010  
                     ?_EE_READ 0001                       RCE@F6120 007A                    __pbssCOMRAM 005D  
            __size_of_capTouch 0072              __size_of_hardLeft 001A     classifyColors@sensorRanges 0005  
                     PRC@F6031 00D0                       PRC@F6029 0100                      _calibrate 7D44  
                  ?_stopMotors 0001                ?_classifyColors 0001              __size_of_navigate 0050  
                    _aveSensor 71B8                      _hardRight 6F82                       ?___awdiv 0001  
                  ?_writeToEEP 0001            __size_of_searchMode 000C              __size_of_setupADC 0022  
            __size_of_setupOSC 000A               __CFG_PRICLKEN$ON 000000           __end_of_setupPWMLeft 70C0  
                     ?_msDelay 0001                      capTouch@a 0029                       ?_readADC 0001  
            __size_of_straight 001A            __end_of_readFromEEP 73B8                     PRC@message 000C  
                    _raceColor 00BA                       _CCPTMRS0 000F49                       _CCPTMRS1 000F48  
                     ?_reverse 0001          calibrate@samples_1256 002B          calibrate@samples_1257 002C  
        calibrate@samples_1258 002D          calibrate@samples_1259 002E                 __size_of_error 0036  
               __size_of_pyCal 004E                 __size_of_right 001A                 __size_of_trans 000C  
                   ?_calibrate 0001          __end_of_setADCChannel 758A                       _PIE1bits 000F9D  
                     _PIE5bits 000F7D                   ??_clearPorts 0001                       _PIR1bits 000F9E  
                     _PIR2bits 000FA1                       _PIR5bits 000F7E                      _testBlack 72A2  
                ??_sixSecDelay 0002               __CFG_WDTPS$32768 000000                    writeToEEP@a 000E  
                  writeToEEP@b 000F                     ?_aveSensor 0001                     ?_hardRight 0001  
       __size_of_setupPWMRight 0022                     _ADCON0bits 000FC2                     _ADCON2bits 000FC0  
                readFromEEP@rs 0003                readAllSensors@a 0012                       _LLranges 00E4  
             __size_of_EE_READ 000A               _displayRaceColor 717A            __size_of_stopMotors 0012  
                ??_setupSerial 0001             __end_of_clearPorts 7356                      copy_data0 74A2  
                    copy_data1 74C2                      copy_data2 74E2                       _RRranges 00D5  
              writeToEEP@F6094 0092            __size_of_writeToEEP 0064                     _EECON1bits 000FA6  
           _determineDirection 7720                       __Hrparam 0000               ??_readAllSensors 000B  
                     __Lrparam 0000             __CFG_BOREN$SBORDIS 000000                     ?_testBlack 0001  
            __CFG_P2BMX$PORTD2 000000            ?_determineDirection 0001                    _readFromEEP 7356  
             __size_of___awdiv 0084                     _ANSELBbits 000F39            __end_of_sixSecDelay 6F68  
                   _ANSELCbits 000F3A                       _capTouch 741C               __size_of_msDelay 0020  
             __size_of_readADC 000A   __end_of_displayColorDetected 7696                       _hardLeft 6F68  
                     __ptext10 7252                       __ptext11 72A2                       __ptext20 6FD0  
                     __ptext12 6F42                       __ptext21 6F28                       __ptext13 70C0  
                     __ptext30 6F54                       __ptext22 6FB6                       __ptext14 709E  
                     __ptext31 703C                       __ptext23 6F9C                       __ptext15 707C  
                     __ptext40 7144                       __ptext32 7892                       __ptext24 6F82  
                     __ptext16 77BC                       __ptext41 6F1C                       __ptext33 73B8  
                     __ptext25 6F68                       __ptext17 717A                       __ptext34 7004  
                     __ptext26 797E                       __ptext18 760E                       __ptext35 758A  
                     __ptext27 741C                       __ptext19 7720                       __ptext36 71B8  
                     __ptext28 7112                   ??_searchMode 0001                       __ptext37 7506  
                     __ptext29 7D44                       __ptext38 6EF4                       __ptext39 7BB0  
             __size_of_reverse 001A           ??_determineDirection 0001                  _setupPWMRight 70C0  
                  ??_calibrate 001E                  __size_of_main 000A                  __size_of_left 001A  
                __size_of_init 001C                       _navigate 7252            __end_of_setupSerial 7112  
                     _setupADC 707C                       _setupOSC 6F08                    ??_aveSensor 0004  
                  ??_hardRight 0001          __size_of_setupPWMLeft 0022             __end_of_searchMode 6F34  
                     _straight 6FD0                   sixSecDelay@a 0002                     _INTCONbits 000FF2  
         determineDirection@rc 005D               ??_classifyColors 0001                 ?_setupPWMRight 0001  
                 _setupPWMLeft 709E                   ??_stopMotors 0001                     _OSCCONbits 000FD3  
                  ??_testBlack 0001                    _sixSecDelay 6F54                   ??_writeToEEP 0001  
              aveSensor@result 0009              __CFG_T3CMX$PORTC0 000000             __end_of_stopMotors 6F54  
                  _setupSerial 70E2             __end_of_writeToEEP 741C              __CFG_FOSC$INTIO67 000000  
     __end_of_displayRaceColor 71B8           _displayColorDetected 760E  
