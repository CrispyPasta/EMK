

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri May 24 15:41:22 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22  0000                     
    23                           ; Version 2.05
    24                           ; Generated 20/12/2018 GMT
    25                           ; 
    26                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F45K22 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     
    58                           	psect	idataCOMRAM
    59  007C0C                     __pidataCOMRAM:
    60                           	opt callstack 0
    61                           
    62                           ;initializer for _Lranges
    63  007C0C  82                 	db	130
    64  007C0D  B2                 	db	178
    65  007C0E  B4                 	db	180
    66  007C0F  BC                 	db	188
    67  007C10  FF                 	db	255
    68                           
    69                           ;initializer for _LLranges
    70  007C11  8C                 	db	140
    71  007C12  A8                 	db	168
    72  007C13  B9                 	db	185
    73  007C14  B9                 	db	185
    74  007C15  FF                 	db	255
    75                           
    76                           ;initializer for _col
    77  007C16  42                 	db	66
    78                           
    79                           ;initializer for _size
    80  007C17  05                 	db	5
    81                           
    82                           	psect	idataBANK0
    83  007D33                     __pidataBANK0:
    84                           	opt callstack 0
    85                           
    86                           ;initializer for PRC@F6019
    87  007D33  0A                 	db	10
    88  007D34  57                 	db	87
    89  007D35  68                 	db	104
    90  007D36  61                 	db	97
    91  007D37  74                 	db	116
    92  007D38  20                 	db	32
    93  007D39  63                 	db	99
    94  007D3A  6F                 	db	111
    95  007D3B  6C                 	db	108
    96  007D3C  6F                 	db	111
    97  007D3D  72                 	db	114
    98  007D3E  20                 	db	32
    99  007D3F  73                 	db	115
   100  007D40  68                 	db	104
   101  007D41  6F                 	db	111
   102  007D42  75                 	db	117
   103  007D43  6C                 	db	108
   104  007D44  64                 	db	100
   105  007D45  20                 	db	32
   106  007D46  73                 	db	115
   107  007D47  61                 	db	97
   108  007D48  6E                 	db	110
   109  007D49  69                 	db	105
   110  007D4A  63                 	db	99
   111  007D4B  20                 	db	32
   112  007D4C  72                 	db	114
   113  007D4D  61                 	db	97
   114  007D4E  63                 	db	99
   115  007D4F  65                 	db	101
   116  007D50  3F                 	db	63
   117  007D51  0A                 	db	10
   118  007D52  00                 	db	0
   119                           
   120                           ;initializer for RCE@F6041
   121  007D53  0A                 	db	10
   122  007D54  53                 	db	83
   123  007D55  61                 	db	97
   124  007D56  6E                 	db	110
   125  007D57  69                 	db	105
   126  007D58  63                 	db	99
   127  007D59  20                 	db	32
   128  007D5A  72                 	db	114
   129  007D5B  61                 	db	97
   130  007D5C  63                 	db	99
   131  007D5D  65                 	db	101
   132  007D5E  73                 	db	115
   133  007D5F  20                 	db	32
   134  007D60  00                 	db	0
   135                           
   136                           ;initializer for _raceColor
   137  007D61  30                 	db	48
   138  007D62  30                 	db	48
   139  007D63  30                 	db	48
   140  007D64  30                 	db	48
   141  007D65  31                 	db	49
   142  007D66  30                 	db	48
   143  007D67  30                 	db	48
   144  007D68  30                 	db	48
   145  007D69  00                 	db	0
   146                           
   147                           ;initializer for error@F6015
   148  007D6A  45                 	db	69
   149  007D6B  52                 	db	82
   150  007D6C  52                 	db	82
   151  007D6D  4F                 	db	79
   152  007D6E  52                 	db	82
   153  007D6F  0A                 	db	10
   154  007D70  00                 	db	0
   155                           
   156                           ;initializer for PRC@F6021
   157  007D71  0A                 	db	10
   158  007D72  53                 	db	83
   159  007D73  65                 	db	101
   160  007D74  74                 	db	116
   161  007D75  0A                 	db	10
   162  007D76  00                 	db	0
   163                           
   164                           ;initializer for calibrate@F6007
   165  007D77  0C                 	db	12
   166  007D78  08                 	db	8
   167  007D79  09                 	db	9
   168  007D7A  0A                 	db	10
   169  007D7B  0D                 	db	13
   170                           
   171                           ;initializer for _sensorVals
   172  007D7C  FF                 	db	255
   173  007D7D  FF                 	db	255
   174  007D7E  FF                 	db	255
   175  007D7F  FF                 	db	255
   176  007D80  FF                 	db	255
   177                           
   178                           ;initializer for _RRranges
   179  007D81  8C                 	db	140
   180  007D82  B9                 	db	185
   181  007D83  C3                 	db	195
   182  007D84  C3                 	db	195
   183  007D85  FF                 	db	255
   184                           
   185                           ;initializer for _Rranges
   186  007D86  8C                 	db	140
   187  007D87  AA                 	db	170
   188  007D88  D2                 	db	210
   189  007D89  AF                 	db	175
   190  007D8A  FF                 	db	255
   191                           
   192                           ;initializer for _Mranges
   193  007D8B  82                 	db	130
   194  007D8C  A5                 	db	165
   195  007D8D  AF                 	db	175
   196  007D8E  BC                 	db	188
   197  007D8F  FF                 	db	255
   198  0000                     _ANSELE	set	3900
   199  0000                     _ANSELD	set	3899
   200  0000                     _ANSELB	set	3897
   201  0000                     _ANSELA	set	3896
   202  0000                     _ANSELCbits	set	3898
   203  0000                     _ANSELBbits	set	3897
   204  0000                     _ANSELC	set	3898
   205  0000                     _FSR0	set	4073
   206  0000                     _INTCONbits	set	4082
   207  0000                     _RCREG	set	4014
   208  0000                     _PORTAbits	set	3968
   209  0000                     _OSCCONbits	set	4051
   210  0000                     _TRISE	set	3990
   211  0000                     _LATE	set	3981
   212  0000                     _PORTE	set	3972
   213  0000                     _TRISD	set	3989
   214  0000                     _LATD	set	3980
   215  0000                     _PORTD	set	3971
   216  0000                     _TRISC	set	3988
   217  0000                     _LATC	set	3979
   218  0000                     _TRISB	set	3987
   219  0000                     _LATB	set	3978
   220  0000                     _PORTB	set	3969
   221  0000                     _TRISA	set	3986
   222  0000                     _LATA	set	3977
   223  0000                     _PORTA	set	3968
   224  0000                     _ADRESH	set	4036
   225  0000                     _TRISBbits	set	3987
   226  0000                     _ADCON0bits	set	4034
   227  0000                     _ADCON1	set	4033
   228  0000                     _ADCON2bits	set	4032
   229  0000                     _TXREG	set	4013
   230  0000                     _PORTC	set	3970
   231  0000                     _TRISCbits	set	3988
   232  0000                     _BAUDCON1bits	set	4024
   233  0000                     _SPBRGH1	set	4016
   234  0000                     _SPBRG1	set	4015
   235  0000                     _RCSTA1	set	4011
   236  0000                     _TXSTA1	set	4012
   237  0000                     _PIR1bits	set	3998
   238  0000                     _PIE1bits	set	3997
   239                           
   240                           ; #config settings
   241  0000                     
   242                           	psect	cinit
   243  007C8E                     __pcinit:
   244                           	opt callstack 0
   245  007C8E                     start_initialization:
   246                           	opt callstack 0
   247  007C8E                     __initialization:
   248                           	opt callstack 0
   249                           
   250                           ; Initialize objects allocated to BANK0 (93 bytes)
   251                           ; load TBLPTR registers with __pidataBANK0
   252  007C8E  0E33               	movlw	low __pidataBANK0
   253  007C90  6EF6               	movwf	tblptrl,c
   254  007C92  0E7D               	movlw	high __pidataBANK0
   255  007C94  6EF7               	movwf	tblptrh,c
   256  007C96  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   257  007C98  6EF8               	movwf	tblptru,c
   258  007C9A  EE00  F060         	lfsr	0,__pdataBANK0
   259  007C9E  EE10 F05D          	lfsr	1,93
   260  007CA2                     copy_data0:
   261  007CA2  0009               	tblrd		*+
   262  007CA4  CFF5 FFEE          	movff	tablat,postinc0
   263  007CA8  50E5               	movf	postdec1,w,c
   264  007CAA  50E1               	movf	fsr1l,w,c
   265  007CAC  E1FA               	bnz	copy_data0
   266                           
   267                           ; Initialize objects allocated to COMRAM (12 bytes)
   268                           ; load TBLPTR registers with __pidataCOMRAM
   269  007CAE  0E0C               	movlw	low __pidataCOMRAM
   270  007CB0  6EF6               	movwf	tblptrl,c
   271  007CB2  0E7C               	movlw	high __pidataCOMRAM
   272  007CB4  6EF7               	movwf	tblptrh,c
   273  007CB6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   274  007CB8  6EF8               	movwf	tblptru,c
   275  007CBA  EE00  F051         	lfsr	0,__pdataCOMRAM
   276  007CBE  EE10 F00C          	lfsr	1,12
   277  007CC2                     copy_data1:
   278  007CC2  0009               	tblrd		*+
   279  007CC4  CFF5 FFEE          	movff	tablat,postinc0
   280  007CC8  50E5               	movf	postdec1,w,c
   281  007CCA  50E1               	movf	fsr1l,w,c
   282  007CCC  E1FA               	bnz	copy_data1
   283  007CCE                     end_of_initialization:
   284                           	opt callstack 0
   285  007CCE                     __end_of__initialization:
   286                           	opt callstack 0
   287  007CCE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   288  007CD0  6EF8               	movwf	tblptru,c
   289  007CD2  0100               	movlb	0
   290  007CD4  EFFB  F03D         	goto	_main	;jump to C main() function
   291                           
   292                           	psect	dataCOMRAM
   293  000051                     __pdataCOMRAM:
   294                           	opt callstack 0
   295  000051                     _Lranges:
   296                           	opt callstack 0
   297  000051                     	ds	5
   298  000056                     _LLranges:
   299                           	opt callstack 0
   300  000056                     	ds	5
   301  00005B                     _col:
   302                           	opt callstack 0
   303  00005B                     	ds	1
   304  00005C                     _size:
   305                           	opt callstack 0
   306  00005C                     	ds	1
   307                           
   308                           	psect	dataBANK0
   309  000060                     __pdataBANK0:
   310                           	opt callstack 0
   311  000060                     PRC@F6019:
   312                           	opt callstack 0
   313  000060                     	ds	32
   314  000080                     RCE@F6041:
   315                           	opt callstack 0
   316  000080                     	ds	14
   317  00008E                     _raceColor:
   318                           	opt callstack 0
   319  00008E                     	ds	9
   320  000097                     error@F6015:
   321                           	opt callstack 0
   322  000097                     	ds	7
   323  00009E                     PRC@F6021:
   324                           	opt callstack 0
   325  00009E                     	ds	6
   326  0000A4                     calibrate@F6007:
   327                           	opt callstack 0
   328  0000A4                     	ds	5
   329  0000A9                     _sensorVals:
   330                           	opt callstack 0
   331  0000A9                     	ds	5
   332  0000AE                     _RRranges:
   333                           	opt callstack 0
   334  0000AE                     	ds	5
   335  0000B3                     _Rranges:
   336                           	opt callstack 0
   337  0000B3                     	ds	5
   338  0000B8                     _Mranges:
   339                           	opt callstack 0
   340  0000B8                     	ds	5
   341                           
   342                           	psect	cstackCOMRAM
   343  000001                     __pcstackCOMRAM:
   344                           	opt callstack 0
   345  000001                     trans@s:
   346                           	opt callstack 0
   347                           
   348                           ; 1 bytes @ 0x0
   349  000001                     	ds	1
   350  000002                     error@message:
   351                           	opt callstack 0
   352                           
   353                           ; 7 bytes @ 0x1
   354  000002                     	ds	7
   355  000009                     error@a:
   356                           	opt callstack 0
   357                           
   358                           ; 1 bytes @ 0x8
   359  000009                     	ds	1
   360  00000A                     ??_PRC:
   361                           
   362                           ; 1 bytes @ 0x9
   363  00000A                     	ds	2
   364  00000C                     PRC@message:
   365                           	opt callstack 0
   366                           
   367                           ; 32 bytes @ 0xB
   368  00000C                     	ds	32
   369  00002C                     PRC@message2:
   370                           	opt callstack 0
   371                           
   372                           ; 6 bytes @ 0x2B
   373  00002C                     	ds	6
   374  000032                     PRC@a:
   375                           	opt callstack 0
   376                           
   377                           ; 1 bytes @ 0x31
   378  000032                     	ds	1
   379  000033                     PRC@a_791:
   380                           	opt callstack 0
   381                           
   382                           ; 1 bytes @ 0x32
   383  000033                     	ds	1
   384  000034                     PRC@a_792:
   385                           	opt callstack 0
   386                           
   387                           ; 1 bytes @ 0x33
   388  000034                     	ds	1
   389  000035                     PRC@a_793:
   390                           	opt callstack 0
   391                           
   392                           ; 1 bytes @ 0x34
   393  000035                     	ds	1
   394  000036                     PRC@a_794:
   395                           	opt callstack 0
   396                           
   397                           ; 1 bytes @ 0x35
   398  000036                     	ds	1
   399  000037                     PRC@a_795:
   400                           	opt callstack 0
   401                           
   402                           ; 1 bytes @ 0x36
   403  000037                     	ds	1
   404  000038                     PRC@a_796:
   405                           	opt callstack 0
   406                           
   407                           ; 1 bytes @ 0x37
   408  000038                     	ds	1
   409  000039                     PRC@a_797:
   410                           	opt callstack 0
   411                           
   412                           ; 1 bytes @ 0x38
   413  000039                     	ds	1
   414  00003A                     PRC@a_798:
   415                           	opt callstack 0
   416                           
   417                           ; 1 bytes @ 0x39
   418  00003A                     	ds	1
   419  00003B                     ??_RCE:
   420                           
   421                           ; 1 bytes @ 0x3A
   422  00003B                     	ds	2
   423  00003D                     RCE@message:
   424                           	opt callstack 0
   425                           
   426                           ; 14 bytes @ 0x3C
   427  00003D                     	ds	14
   428  00004B                     RCE@commandReceived:
   429                           	opt callstack 0
   430                           
   431                           ; 3 bytes @ 0x4A
   432  00004B                     	ds	3
   433  00004E                     RCE@nCharsReceived:
   434                           	opt callstack 0
   435                           
   436                           ; 1 bytes @ 0x4D
   437  00004E                     	ds	1
   438  00004F                     RCE@a:
   439                           	opt callstack 0
   440                           
   441                           ; 1 bytes @ 0x4E
   442  00004F                     	ds	1
   443  000050                     RCE@a_827:
   444                           	opt callstack 0
   445                           
   446                           ; 1 bytes @ 0x4F
   447  000050                     	ds	1
   448  000051                     
   449                           ; 1 bytes @ 0x50
   450 ;;
   451 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   452 ;;
   453 ;; *************** function _main *****************
   454 ;; Defined at:
   455 ;;		line 79 in file "sanic.c"
   456 ;; Parameters:    Size  Location     Type
   457 ;;		None
   458 ;; Auto vars:     Size  Location     Type
   459 ;;		None
   460 ;; Return value:  Size  Location     Type
   461 ;;                  1    wreg      void 
   462 ;; Registers used:
   463 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   464 ;; Tracked objects:
   465 ;;		On entry : 0/0
   466 ;;		On exit  : 0/0
   467 ;;		Unchanged: 0/0
   468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   469 ;;      Params:         0       0       0       0       0       0       0
   470 ;;      Locals:         0       0       0       0       0       0       0
   471 ;;      Temps:          0       0       0       0       0       0       0
   472 ;;      Totals:         0       0       0       0       0       0       0
   473 ;;Total ram usage:        0 bytes
   474 ;; Hardware stack levels required when called:    4
   475 ;; This function calls:
   476 ;;		_RCE
   477 ;;		_init
   478 ;; This function is called by:
   479 ;;		Startup code after reset
   480 ;; This function uses a non-reentrant model
   481 ;;
   482                           
   483                           	psect	text0
   484  007BF6                     __ptext0:
   485                           	opt callstack 0
   486  007BF6                     _main:
   487                           	opt callstack 27
   488                           
   489                           ;sanic.c: 96:     init();
   490                           
   491                           ;incstack = 0
   492  007BF6  EC0C  F03E         	call	_init	;wreg free
   493                           
   494                           ;sanic.c: 97:     RCE();
   495  007BFA  ECC8  F03E         	call	_RCE	;wreg free
   496  007BFE                     l220:
   497  007BFE  D7FF               	goto	l220
   498  007C00                     __end_of_main:
   499                           	opt callstack 0
   500                           
   501 ;; *************** function _init *****************
   502 ;; Defined at:
   503 ;;		line 115 in file "sanic.c"
   504 ;; Parameters:    Size  Location     Type
   505 ;;		None
   506 ;; Auto vars:     Size  Location     Type
   507 ;;		None
   508 ;; Return value:  Size  Location     Type
   509 ;;                  1    wreg      void 
   510 ;; Registers used:
   511 ;;		wreg, status,2, cstack
   512 ;; Tracked objects:
   513 ;;		On entry : 0/0
   514 ;;		On exit  : 0/0
   515 ;;		Unchanged: 0/0
   516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   517 ;;      Params:         0       0       0       0       0       0       0
   518 ;;      Locals:         0       0       0       0       0       0       0
   519 ;;      Temps:          0       0       0       0       0       0       0
   520 ;;      Totals:         0       0       0       0       0       0       0
   521 ;;Total ram usage:        0 bytes
   522 ;; Hardware stack levels used:    1
   523 ;; Hardware stack levels required when called:    1
   524 ;; This function calls:
   525 ;;		_clearPorts
   526 ;;		_setupOSC
   527 ;;		_setupSerial
   528 ;; This function is called by:
   529 ;;		_main
   530 ;; This function uses a non-reentrant model
   531 ;;
   532                           
   533                           	psect	text1
   534  007C18                     __ptext1:
   535                           	opt callstack 0
   536  007C18                     _init:
   537                           	opt callstack 29
   538                           
   539                           ;sanic.c: 116:     raceColor[3] = 1;
   540                           
   541                           ;incstack = 0
   542  007C18  0E01               	movlw	1
   543  007C1A  0100               	movlb	0	; () banked
   544  007C1C  6F91               	movwf	(_raceColor+3)& (0+255),b
   545                           
   546                           ; BSR set to: 0
   547                           ;sanic.c: 117:     setupOSC();
   548  007C1E  ECF6  F03D         	call	_setupOSC	;wreg free
   549                           
   550                           ;sanic.c: 118:     clearPorts();
   551  007C22  EC6C  F03E         	call	_clearPorts	;wreg free
   552                           
   553                           ;sanic.c: 119:     setupSerial();
   554  007C26  EC16  F03E         	call	_setupSerial	;wreg free
   555  007C2A  0012               	return		;funcret
   556  007C2C                     __end_of_init:
   557                           	opt callstack 0
   558                           
   559 ;; *************** function _setupSerial *****************
   560 ;; Defined at:
   561 ;;		line 22 in file "./functions.c"
   562 ;; Parameters:    Size  Location     Type
   563 ;;		None
   564 ;; Auto vars:     Size  Location     Type
   565 ;;		None
   566 ;; Return value:  Size  Location     Type
   567 ;;                  1    wreg      void 
   568 ;; Registers used:
   569 ;;		wreg, status,2
   570 ;; Tracked objects:
   571 ;;		On entry : 0/0
   572 ;;		On exit  : 0/0
   573 ;;		Unchanged: 0/0
   574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   575 ;;      Params:         0       0       0       0       0       0       0
   576 ;;      Locals:         0       0       0       0       0       0       0
   577 ;;      Temps:          0       0       0       0       0       0       0
   578 ;;      Totals:         0       0       0       0       0       0       0
   579 ;;Total ram usage:        0 bytes
   580 ;; Hardware stack levels used:    1
   581 ;; This function calls:
   582 ;;		Nothing
   583 ;; This function is called by:
   584 ;;		_init
   585 ;; This function uses a non-reentrant model
   586 ;;
   587                           
   588                           	psect	text2
   589  007C2C                     __ptext2:
   590                           	opt callstack 0
   591  007C2C                     _setupSerial:
   592                           	opt callstack 29
   593                           
   594                           ;./functions.c: 23:     PIE1bits.RC1IE = 0;
   595                           
   596                           ;incstack = 0
   597  007C2C  9A9D               	bcf	3997,5,c	;volatile
   598                           
   599                           ;./functions.c: 24:     PIE1bits.TX1IE = 0;
   600  007C2E  989D               	bcf	3997,4,c	;volatile
   601                           
   602                           ;./functions.c: 25:     PIR1bits.RCIF = 0;
   603  007C30  9A9E               	bcf	3998,5,c	;volatile
   604                           
   605                           ;./functions.c: 27:     FSR0 = 0;
   606  007C32  0E00               	movlw	0
   607  007C34  6EEA               	movwf	fsr0h,c	;volatile
   608  007C36  0E00               	movlw	0
   609  007C38  6EE9               	movwf	fsr0l,c	;volatile
   610                           
   611                           ;./functions.c: 28:     TXSTA1 = 0b00100100;
   612  007C3A  0E24               	movlw	36
   613  007C3C  6EAC               	movwf	4012,c	;volatile
   614                           
   615                           ;./functions.c: 29:     RCSTA1 = 0b10010000;
   616  007C3E  0E90               	movlw	144
   617  007C40  6EAB               	movwf	4011,c	;volatile
   618                           
   619                           ;./functions.c: 31:     SPBRG1 = 25;
   620  007C42  0E19               	movlw	25
   621  007C44  6EAF               	movwf	4015,c	;volatile
   622                           
   623                           ;./functions.c: 32:     SPBRGH1 = 0;
   624  007C46  0E00               	movlw	0
   625  007C48  6EB0               	movwf	4016,c	;volatile
   626                           
   627                           ;./functions.c: 33:     BAUDCON1bits.BRG16 = 0;
   628  007C4A  96B8               	bcf	4024,3,c	;volatile
   629                           
   630                           ;./functions.c: 34:     TRISCbits.RC6 = 1;
   631  007C4C  8C94               	bsf	3988,6,c	;volatile
   632                           
   633                           ;./functions.c: 35:     TRISCbits.RC7 = 1;
   634  007C4E  8E94               	bsf	3988,7,c	;volatile
   635                           
   636                           ;./functions.c: 37:     PORTC = 0;
   637  007C50  0E00               	movlw	0
   638  007C52  6E82               	movwf	3970,c	;volatile
   639                           
   640                           ;./functions.c: 38:     ANSELC = 0;
   641  007C54  0E00               	movlw	0
   642  007C56  010F               	movlb	15	; () banked
   643  007C58  6F3A               	movwf	58,b	;volatile
   644                           
   645                           ; BSR set to: 15
   646  007C5A  0012               	return		;funcret
   647  007C5C                     __end_of_setupSerial:
   648                           	opt callstack 0
   649                           
   650 ;; *************** function _setupOSC *****************
   651 ;; Defined at:
   652 ;;		line 173 in file "./functions.c"
   653 ;; Parameters:    Size  Location     Type
   654 ;;		None
   655 ;; Auto vars:     Size  Location     Type
   656 ;;		None
   657 ;; Return value:  Size  Location     Type
   658 ;;                  1    wreg      void 
   659 ;; Registers used:
   660 ;;		wreg, status,2
   661 ;; Tracked objects:
   662 ;;		On entry : 0/0
   663 ;;		On exit  : 0/0
   664 ;;		Unchanged: 0/0
   665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   666 ;;      Params:         0       0       0       0       0       0       0
   667 ;;      Locals:         0       0       0       0       0       0       0
   668 ;;      Temps:          0       0       0       0       0       0       0
   669 ;;      Totals:         0       0       0       0       0       0       0
   670 ;;Total ram usage:        0 bytes
   671 ;; Hardware stack levels used:    1
   672 ;; This function calls:
   673 ;;		Nothing
   674 ;; This function is called by:
   675 ;;		_init
   676 ;; This function uses a non-reentrant model
   677 ;;
   678                           
   679                           	psect	text3
   680  007BEC                     __ptext3:
   681                           	opt callstack 0
   682  007BEC                     _setupOSC:
   683                           	opt callstack 29
   684                           
   685                           ;./functions.c: 174:     OSCCONbits.IRCF = 0b101;
   686                           
   687                           ; BSR set to: 15
   688                           ;incstack = 0
   689  007BEC  50D3               	movf	4051,w,c	;volatile
   690  007BEE  0B8F               	andlw	-113
   691  007BF0  0950               	iorlw	80
   692  007BF2  6ED3               	movwf	4051,c	;volatile
   693  007BF4  0012               	return		;funcret
   694  007BF6                     __end_of_setupOSC:
   695                           	opt callstack 0
   696                           
   697 ;; *************** function _clearPorts *****************
   698 ;; Defined at:
   699 ;;		line 143 in file "./functions.c"
   700 ;; Parameters:    Size  Location     Type
   701 ;;		None
   702 ;; Auto vars:     Size  Location     Type
   703 ;;		None
   704 ;; Return value:  Size  Location     Type
   705 ;;                  1    wreg      void 
   706 ;; Registers used:
   707 ;;		wreg, status,2
   708 ;; Tracked objects:
   709 ;;		On entry : 0/0
   710 ;;		On exit  : 0/0
   711 ;;		Unchanged: 0/0
   712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   713 ;;      Params:         0       0       0       0       0       0       0
   714 ;;      Locals:         0       0       0       0       0       0       0
   715 ;;      Temps:          0       0       0       0       0       0       0
   716 ;;      Totals:         0       0       0       0       0       0       0
   717 ;;Total ram usage:        0 bytes
   718 ;; Hardware stack levels used:    1
   719 ;; This function calls:
   720 ;;		Nothing
   721 ;; This function is called by:
   722 ;;		_init
   723 ;; This function uses a non-reentrant model
   724 ;;
   725                           
   726                           	psect	text4
   727  007CD8                     __ptext4:
   728                           	opt callstack 0
   729  007CD8                     _clearPorts:
   730                           	opt callstack 29
   731                           
   732                           ;./functions.c: 144:     PORTA = 0;
   733                           
   734                           ;incstack = 0
   735  007CD8  0E00               	movlw	0
   736  007CDA  6E80               	movwf	3968,c	;volatile
   737                           
   738                           ;./functions.c: 145:     LATA = 0;
   739  007CDC  0E00               	movlw	0
   740  007CDE  6E89               	movwf	3977,c	;volatile
   741                           
   742                           ;./functions.c: 146:     TRISA = 0;
   743  007CE0  0E00               	movlw	0
   744  007CE2  6E92               	movwf	3986,c	;volatile
   745                           
   746                           ;./functions.c: 147:     ANSELA = 0;
   747  007CE4  0E00               	movlw	0
   748  007CE6  010F               	movlb	15	; () banked
   749  007CE8  6F38               	movwf	56,b	;volatile
   750                           
   751                           ;./functions.c: 149:     PORTB = 0;
   752  007CEA  0E00               	movlw	0
   753  007CEC  6E81               	movwf	3969,c	;volatile
   754                           
   755                           ;./functions.c: 150:     LATB = 0;
   756  007CEE  0E00               	movlw	0
   757  007CF0  6E8A               	movwf	3978,c	;volatile
   758                           
   759                           ;./functions.c: 151:     TRISB = 0;
   760  007CF2  0E00               	movlw	0
   761  007CF4  6E93               	movwf	3987,c	;volatile
   762                           
   763                           ;./functions.c: 152:     ANSELB = 0;
   764  007CF6  0E00               	movlw	0
   765  007CF8  6F39               	movwf	57,b	;volatile
   766                           
   767                           ;./functions.c: 154:     PORTC = 0;
   768  007CFA  0E00               	movlw	0
   769  007CFC  6E82               	movwf	3970,c	;volatile
   770                           
   771                           ;./functions.c: 155:     LATC = 0;
   772  007CFE  0E00               	movlw	0
   773  007D00  6E8B               	movwf	3979,c	;volatile
   774                           
   775                           ;./functions.c: 156:     TRISC = 0;
   776  007D02  0E00               	movlw	0
   777  007D04  6E94               	movwf	3988,c	;volatile
   778                           
   779                           ;./functions.c: 157:     ANSELC = 0;
   780  007D06  0E00               	movlw	0
   781  007D08  6F3A               	movwf	58,b	;volatile
   782                           
   783                           ;./functions.c: 159:     PORTD = 0;
   784  007D0A  0E00               	movlw	0
   785  007D0C  6E83               	movwf	3971,c	;volatile
   786                           
   787                           ;./functions.c: 160:     LATD = 0;
   788  007D0E  0E00               	movlw	0
   789  007D10  6E8C               	movwf	3980,c	;volatile
   790                           
   791                           ;./functions.c: 161:     TRISD = 0;
   792  007D12  0E00               	movlw	0
   793  007D14  6E95               	movwf	3989,c	;volatile
   794                           
   795                           ;./functions.c: 162:     ANSELD = 0;
   796  007D16  0E00               	movlw	0
   797  007D18  6F3B               	movwf	59,b	;volatile
   798                           
   799                           ;./functions.c: 164:     PORTE = 0;
   800  007D1A  0E00               	movlw	0
   801  007D1C  6E84               	movwf	3972,c	;volatile
   802                           
   803                           ;./functions.c: 165:     LATE = 0;
   804  007D1E  0E00               	movlw	0
   805  007D20  6E8D               	movwf	3981,c	;volatile
   806                           
   807                           ;./functions.c: 166:     TRISE = 0;
   808  007D22  0E00               	movlw	0
   809  007D24  6E96               	movwf	3990,c	;volatile
   810                           
   811                           ;./functions.c: 167:     ANSELE = 0;
   812  007D26  0E00               	movlw	0
   813  007D28  6F3C               	movwf	60,b	;volatile
   814                           
   815                           ;./functions.c: 168:     raceColor[3] = 1;
   816  007D2A  0E01               	movlw	1
   817  007D2C  0100               	movlb	0	; () banked
   818  007D2E  6F91               	movwf	(_raceColor+3)& (0+255),b
   819                           
   820                           ; BSR set to: 0
   821  007D30  0012               	return		;funcret
   822  007D32                     __end_of_clearPorts:
   823                           	opt callstack 0
   824                           
   825 ;; *************** function _RCE *****************
   826 ;; Defined at:
   827 ;;		line 122 in file "sanic.c"
   828 ;; Parameters:    Size  Location     Type
   829 ;;		None
   830 ;; Auto vars:     Size  Location     Type
   831 ;;  a               1   79[COMRAM] unsigned char 
   832 ;;  a               1   78[COMRAM] unsigned char 
   833 ;;  message        14   60[COMRAM] unsigned char [14]
   834 ;;  commandRecei    3   74[COMRAM] unsigned char [3]
   835 ;;  nCharsReceiv    1   77[COMRAM] unsigned char 
   836 ;; Return value:  Size  Location     Type
   837 ;;                  1    wreg      void 
   838 ;; Registers used:
   839 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   840 ;; Tracked objects:
   841 ;;		On entry : 0/0
   842 ;;		On exit  : 0/0
   843 ;;		Unchanged: 0/0
   844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   845 ;;      Params:         0       0       0       0       0       0       0
   846 ;;      Locals:        20       0       0       0       0       0       0
   847 ;;      Temps:          2       0       0       0       0       0       0
   848 ;;      Totals:        22       0       0       0       0       0       0
   849 ;;Total ram usage:       22 bytes
   850 ;; Hardware stack levels used:    1
   851 ;; Hardware stack levels required when called:    3
   852 ;; This function calls:
   853 ;;		_PRC
   854 ;;		_error
   855 ;;		_trans
   856 ;; This function is called by:
   857 ;;		_main
   858 ;; This function uses a non-reentrant model
   859 ;;
   860                           
   861                           	psect	text5
   862  007D90                     __ptext5:
   863                           	opt callstack 0
   864  007D90                     _RCE:
   865                           	opt callstack 27
   866                           
   867                           ;sanic.c: 124:         PORTD = 0b10100100;
   868                           
   869                           ; BSR set to: 0
   870                           ;incstack = 0
   871                           ;sanic.c: 123:     while(1){
   872  007D90  0EA4               	movlw	164
   873  007D92  6E83               	movwf	3971,c	;volatile
   874                           
   875                           ;sanic.c: 126:         unsigned char message[] = "\nSanic races ";
   876  007D94  EE20  F080         	lfsr	2,RCE@F6041
   877  007D98  EE10  F03D         	lfsr	1,RCE@message
   878  007D9C  0E0D               	movlw	13
   879  007D9E                     u491:
   880  007D9E  CFDB FFE3          	movff	plusw2,plusw1
   881  007DA2  06E8               	decf	wreg,f,c
   882  007DA4  E2FC               	bc	u491
   883                           
   884                           ;sanic.c: 128:         for (unsigned char a = 0; a < 13; a++)
   885  007DA6  0E00               	movlw	0
   886  007DA8  6E4F               	movwf	RCE@a,c
   887  007DAA                     l1631:
   888                           
   889                           ;sanic.c: 129:         {;sanic.c: 130:             trans(message[a]);
   890  007DAA  0E3D               	movlw	low RCE@message
   891  007DAC  244F               	addwf	RCE@a,w,c
   892  007DAE  6ED9               	movwf	fsr2l,c
   893  007DB0  6ADA               	clrf	fsr2h,c
   894  007DB2  0E00               	movlw	high RCE@message
   895  007DB4  22DA               	addwfc	fsr2h,f,c
   896  007DB6  50DF               	movf	indf2,w,c
   897  007DB8  EC00  F03E         	call	_trans
   898                           
   899                           ;sanic.c: 131:         }
   900  007DBC  2A4F               	incf	RCE@a,f,c
   901  007DBE  0E0C               	movlw	12
   902  007DC0  644F               	cpfsgt	RCE@a,c
   903  007DC2  D7F3               	goto	l1631
   904                           
   905                           ;sanic.c: 133:         if (raceColor[3] == 1){
   906  007DC4  0100               	movlb	0	; () banked
   907  007DC6  0591               	decf	(_raceColor+3)& (0+255),w,b
   908  007DC8  A4D8               	btfss	status,2,c
   909  007DCA  D004               	goto	l1641
   910                           
   911                           ; BSR set to: 0
   912                           ;sanic.c: 134:             trans('B');
   913  007DCC  0E42               	movlw	66
   914  007DCE  EC00  F03E         	call	_trans
   915                           
   916                           ;sanic.c: 135:         }
   917  007DD2  D011               	goto	l242
   918  007DD4                     l1641:
   919                           
   920                           ; BSR set to: 0
   921  007DD4  0590               	decf	(_raceColor+2)& (0+255),w,b
   922  007DD6  A4D8               	btfss	status,2,c
   923  007DD8  D004               	goto	l1645
   924                           
   925                           ; BSR set to: 0
   926                           ;sanic.c: 137:             trans('R');
   927  007DDA  0E52               	movlw	82
   928  007DDC  EC00  F03E         	call	_trans
   929                           
   930                           ;sanic.c: 138:         }
   931  007DE0  D00A               	goto	l242
   932  007DE2                     l1645:
   933                           
   934                           ; BSR set to: 0
   935  007DE2  058F               	decf	(_raceColor+1)& (0+255),w,b
   936  007DE4  A4D8               	btfss	status,2,c
   937  007DE6  D004               	goto	l1649
   938                           
   939                           ; BSR set to: 0
   940                           ;sanic.c: 140:             trans('G');
   941  007DE8  0E47               	movlw	71
   942  007DEA  EC00  F03E         	call	_trans
   943                           
   944                           ;sanic.c: 141:         }
   945  007DEE  D003               	goto	l242
   946  007DF0                     l1649:
   947                           
   948                           ; BSR set to: 0
   949                           ;sanic.c: 143:             trans('n');
   950  007DF0  0E6E               	movlw	110
   951  007DF2  EC00  F03E         	call	_trans
   952  007DF6                     l242:
   953                           
   954                           ;sanic.c: 145:         trans('\n');
   955  007DF6  0E0A               	movlw	10
   956  007DF8  EC00  F03E         	call	_trans
   957                           
   958                           ;sanic.c: 148:         INTCONbits.GIE = 0;
   959  007DFC  9EF2               	bcf	4082,7,c	;volatile
   960                           
   961                           ;sanic.c: 149:         INTCONbits.PEIE = 0;
   962  007DFE  9CF2               	bcf	4082,6,c	;volatile
   963                           
   964                           ;sanic.c: 150:         unsigned char nCharsReceived = 0;
   965  007E00  0E00               	movlw	0
   966  007E02  6E4E               	movwf	RCE@nCharsReceived,c
   967                           
   968                           ;sanic.c: 151:         unsigned char commandReceived[3];;sanic.c: 153:         while(nCh
      +                          arsReceived < 3){
   969  007E04  D00B               	goto	l1661
   970  007E06                     l248:
   971                           
   972                           ;sanic.c: 154:             if (PIR1bits.RC1IF){
   973  007E06  AA9E               	btfss	3998,5,c	;volatile
   974  007E08  D009               	goto	l1661
   975                           
   976                           ;sanic.c: 155:                 commandReceived[nCharsReceived] = RCREG;
   977  007E0A  0E4B               	movlw	low RCE@commandReceived
   978  007E0C  244E               	addwf	RCE@nCharsReceived,w,c
   979  007E0E  6ED9               	movwf	fsr2l,c
   980  007E10  6ADA               	clrf	fsr2h,c
   981  007E12  0E00               	movlw	high RCE@commandReceived
   982  007E14  22DA               	addwfc	fsr2h,f,c
   983  007E16  CFAE FFDF          	movff	4014,indf2	;volatile
   984                           
   985                           ;sanic.c: 156:                 nCharsReceived++;
   986  007E1A  2A4E               	incf	RCE@nCharsReceived,f,c
   987  007E1C                     l1661:
   988                           
   989                           ;sanic.c: 153:         while(nCharsReceived < 3){
   990  007E1C  0E02               	movlw	2
   991  007E1E  644E               	cpfsgt	RCE@nCharsReceived,c
   992  007E20  D7F2               	goto	l248
   993  007E22  D006               	goto	l1669
   994  007E24                     l1663:
   995                           
   996                           ;sanic.c: 167:             PRC();
   997  007E24  EC3E  F03F         	call	_PRC	;wreg free
   998                           
   999                           ;sanic.c: 168:             break;
  1000  007E28  D01A               	goto	l1671
  1001  007E2A                     l1665:
  1002                           
  1003                           ;sanic.c: 180:             error();
  1004  007E2A  EC2E  F03E         	call	_error	;wreg free
  1005                           
  1006                           ;sanic.c: 181:             break;
  1007  007E2E  D017               	goto	l1671
  1008  007E30                     l1669:
  1009  007E30  504B               	movf	RCE@commandReceived,w,c
  1010  007E32  6E3B               	movwf	??_RCE& (0+255),c
  1011  007E34  6A3C               	clrf	(??_RCE+1)& (0+255),c
  1012                           
  1013                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1014                           ; Switch size 1, requested type "simple"
  1015                           ; Number of cases is 1, Range of values is 0 to 0
  1016                           ; switch strategies available:
  1017                           ; Name         Instructions Cycles
  1018                           ; simple_byte            4     3 (average)
  1019                           ;	Chosen strategy is simple_byte
  1020  007E36  503C               	movf	??_RCE+1,w,c
  1021  007E38  0A00               	xorlw	0	; case 0
  1022  007E3A  A4D8               	btfss	status,2,c
  1023  007E3C  D7F6               	goto	l1665
  1024                           
  1025                           ; Switch size 1, requested type "simple"
  1026                           ; Number of cases is 5, Range of values is 67 to 82
  1027                           ; switch strategies available:
  1028                           ; Name         Instructions Cycles
  1029                           ; simple_byte           16     9 (average)
  1030                           ;	Chosen strategy is simple_byte
  1031  007E3E  503B               	movf	??_RCE,w,c
  1032  007E40  0A43               	xorlw	67	; case 67
  1033  007E42  B4D8               	btfsc	status,2,c
  1034  007E44  D00C               	goto	l1671
  1035  007E46  0A0D               	xorlw	13	; case 78
  1036  007E48  B4D8               	btfsc	status,2,c
  1037  007E4A  D009               	goto	l1671
  1038  007E4C  0A1E               	xorlw	30	; case 80
  1039  007E4E  B4D8               	btfsc	status,2,c
  1040  007E50  D7E9               	goto	l1663
  1041  007E52  0A01               	xorlw	1	; case 81
  1042  007E54  B4D8               	btfsc	status,2,c
  1043  007E56  D003               	goto	l1671
  1044  007E58  0A03               	xorlw	3	; case 82
  1045  007E5A  A4D8               	btfss	status,2,c
  1046  007E5C  D7E6               	goto	l1665
  1047  007E5E                     l1671:
  1048                           
  1049                           ;sanic.c: 184:         for (unsigned char a = 0; a < 3; a++){
  1050  007E5E  0E00               	movlw	0
  1051  007E60  6E50               	movwf	RCE@a_827,c
  1052  007E62                     l1677:
  1053                           
  1054                           ;sanic.c: 185:             commandReceived[a] = 0;
  1055  007E62  0E4B               	movlw	low RCE@commandReceived
  1056  007E64  2450               	addwf	RCE@a_827,w,c
  1057  007E66  6ED9               	movwf	fsr2l,c
  1058  007E68  6ADA               	clrf	fsr2h,c
  1059  007E6A  0E00               	movlw	high RCE@commandReceived
  1060  007E6C  22DA               	addwfc	fsr2h,f,c
  1061  007E6E  0E00               	movlw	0
  1062  007E70  6EDF               	movwf	indf2,c
  1063                           
  1064                           ;sanic.c: 186:         }
  1065  007E72  2A50               	incf	RCE@a_827,f,c
  1066  007E74  0E02               	movlw	2
  1067  007E76  6450               	cpfsgt	RCE@a_827,c
  1068  007E78  D7F4               	goto	l1677
  1069  007E7A  D78A               	goto	_RCE
  1070  007E7C                     __end_of_RCE:
  1071                           	opt callstack 0
  1072                           
  1073 ;; *************** function _PRC *****************
  1074 ;; Defined at:
  1075 ;;		line 260 in file "./functions.c"
  1076 ;; Parameters:    Size  Location     Type
  1077 ;;		None
  1078 ;; Auto vars:     Size  Location     Type
  1079 ;;  a               1   57[COMRAM] unsigned char 
  1080 ;;  a               1   56[COMRAM] unsigned char 
  1081 ;;  a               1   55[COMRAM] unsigned char 
  1082 ;;  a               1   54[COMRAM] unsigned char 
  1083 ;;  a               1   53[COMRAM] unsigned char 
  1084 ;;  a               1   52[COMRAM] unsigned char 
  1085 ;;  a               1   51[COMRAM] unsigned char 
  1086 ;;  a               1   50[COMRAM] unsigned char 
  1087 ;;  a               1   49[COMRAM] unsigned char 
  1088 ;;  message        32   11[COMRAM] unsigned char [32]
  1089 ;;  message2        6   43[COMRAM] unsigned char [6]
  1090 ;; Return value:  Size  Location     Type
  1091 ;;                  1    wreg      void 
  1092 ;; Registers used:
  1093 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1094 ;; Tracked objects:
  1095 ;;		On entry : 0/0
  1096 ;;		On exit  : 0/0
  1097 ;;		Unchanged: 0/0
  1098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1099 ;;      Params:         0       0       0       0       0       0       0
  1100 ;;      Locals:        47       0       0       0       0       0       0
  1101 ;;      Temps:          2       0       0       0       0       0       0
  1102 ;;      Totals:        49       0       0       0       0       0       0
  1103 ;;Total ram usage:       49 bytes
  1104 ;; Hardware stack levels used:    1
  1105 ;; Hardware stack levels required when called:    2
  1106 ;; This function calls:
  1107 ;;		_error
  1108 ;;		_trans
  1109 ;; This function is called by:
  1110 ;;		_RCE
  1111 ;; This function uses a non-reentrant model
  1112 ;;
  1113                           
  1114                           	psect	text6
  1115  007E7C                     __ptext6:
  1116                           	opt callstack 0
  1117  007E7C                     _PRC:
  1118                           	opt callstack 27
  1119                           
  1120                           ;./functions.c: 262:     PORTD = 0b11111001;
  1121                           
  1122                           ;incstack = 0
  1123  007E7C  0EF9               	movlw	249
  1124  007E7E  6E83               	movwf	3971,c	;volatile
  1125                           
  1126                           ;./functions.c: 263:     unsigned char message[] = "\nWhat color should sanic race?\n";
  1127  007E80  EE20  F060         	lfsr	2,PRC@F6019
  1128  007E84  EE10  F00C         	lfsr	1,PRC@message
  1129  007E88  0E1F               	movlw	31
  1130  007E8A                     u361:
  1131  007E8A  CFDB FFE3          	movff	plusw2,plusw1
  1132  007E8E  06E8               	decf	wreg,f,c
  1133  007E90  E2FC               	bc	u361
  1134                           
  1135                           ;./functions.c: 264:     unsigned char message2[] = "\nSet\n";
  1136  007E92  EE20  F09E         	lfsr	2,PRC@F6021
  1137  007E96  EE10  F02C         	lfsr	1,PRC@message2
  1138  007E9A  0E05               	movlw	5
  1139  007E9C                     u371:
  1140  007E9C  CFDB FFE3          	movff	plusw2,plusw1
  1141  007EA0  06E8               	decf	wreg,f,c
  1142  007EA2  E2FC               	bc	u371
  1143                           
  1144                           ;./functions.c: 266:     for (unsigned char a = 0; a < 31; a++)
  1145  007EA4  0E00               	movlw	0
  1146  007EA6  6E32               	movwf	PRC@a,c
  1147  007EA8                     l1479:
  1148                           
  1149                           ;./functions.c: 267:     {;./functions.c: 268:         trans(message[a]);
  1150  007EA8  0E0C               	movlw	low PRC@message
  1151  007EAA  2432               	addwf	PRC@a,w,c
  1152  007EAC  6ED9               	movwf	fsr2l,c
  1153  007EAE  6ADA               	clrf	fsr2h,c
  1154  007EB0  0E00               	movlw	high PRC@message
  1155  007EB2  22DA               	addwfc	fsr2h,f,c
  1156  007EB4  50DF               	movf	indf2,w,c
  1157  007EB6  EC00  F03E         	call	_trans
  1158                           
  1159                           ;./functions.c: 269:     }
  1160  007EBA  2A32               	incf	PRC@a,f,c
  1161  007EBC  0E1E               	movlw	30
  1162  007EBE  6432               	cpfsgt	PRC@a,c
  1163  007EC0  D7F3               	goto	l1479
  1164  007EC2                     u380:
  1165                           
  1166                           ;./functions.c: 271:     while (!PIR1bits.RC1IF)
  1167                           
  1168                           ;./functions.c: 272:         ;
  1169  007EC2  BA9E               	btfsc	3998,5,c	;volatile
  1170  007EC4  D088               	goto	l1585
  1171  007EC6  D7FD               	goto	u380
  1172  007EC8                     l1485:
  1173                           
  1174                           ;./functions.c: 277:         for (unsigned char a = 0; a < 8; a++)
  1175  007EC8  0E00               	movlw	0
  1176  007ECA  6E33               	movwf	PRC@a_791,c
  1177  007ECC                     l1491:
  1178                           
  1179                           ;./functions.c: 278:         {;./functions.c: 279:             raceColor[a] = 0;
  1180  007ECC  0E8E               	movlw	low _raceColor
  1181  007ECE  2433               	addwf	PRC@a_791,w,c
  1182  007ED0  6ED9               	movwf	fsr2l,c
  1183  007ED2  6ADA               	clrf	fsr2h,c
  1184  007ED4  0E00               	movlw	high _raceColor
  1185  007ED6  22DA               	addwfc	fsr2h,f,c
  1186  007ED8  0E00               	movlw	0
  1187  007EDA  6EDF               	movwf	indf2,c
  1188                           
  1189                           ;./functions.c: 280:         }
  1190  007EDC  2A33               	incf	PRC@a_791,f,c
  1191  007EDE  0E07               	movlw	7
  1192  007EE0  6433               	cpfsgt	PRC@a_791,c
  1193  007EE2  D7F4               	goto	l1491
  1194                           
  1195                           ;./functions.c: 282:         raceColor[3] = 1;
  1196  007EE4  0E01               	movlw	1
  1197  007EE6  0100               	movlb	0	; () banked
  1198  007EE8  6F91               	movwf	(_raceColor+3)& (0+255),b
  1199                           
  1200                           ;./functions.c: 284:         for (unsigned char a = 0; a < 5; a++)
  1201  007EEA  0E00               	movlw	0
  1202  007EEC  6E34               	movwf	PRC@a_792,c
  1203  007EEE                     l1503:
  1204                           
  1205                           ;./functions.c: 285:         {;./functions.c: 286:             trans(message2[a]);
  1206  007EEE  0E2C               	movlw	low PRC@message2
  1207  007EF0  2434               	addwf	PRC@a_792,w,c
  1208  007EF2  6ED9               	movwf	fsr2l,c
  1209  007EF4  6ADA               	clrf	fsr2h,c
  1210  007EF6  0E00               	movlw	high PRC@message2
  1211  007EF8  22DA               	addwfc	fsr2h,f,c
  1212  007EFA  50DF               	movf	indf2,w,c
  1213  007EFC  EC00  F03E         	call	_trans
  1214                           
  1215                           ;./functions.c: 287:         }
  1216  007F00  2A34               	incf	PRC@a_792,f,c
  1217  007F02  0E04               	movlw	4
  1218  007F04  6434               	cpfsgt	PRC@a_792,c
  1219  007F06  D7F3               	goto	l1503
  1220  007F08  0012               	return	
  1221  007F0A                     l1509:
  1222                           
  1223                           ;./functions.c: 290:         for (unsigned char a = 0; a < 8; a++){
  1224  007F0A  0E00               	movlw	0
  1225  007F0C  6E35               	movwf	PRC@a_793,c
  1226  007F0E                     l1515:
  1227                           
  1228                           ;./functions.c: 291:             raceColor[a] = 0;
  1229  007F0E  0E8E               	movlw	low _raceColor
  1230  007F10  2435               	addwf	PRC@a_793,w,c
  1231  007F12  6ED9               	movwf	fsr2l,c
  1232  007F14  6ADA               	clrf	fsr2h,c
  1233  007F16  0E00               	movlw	high _raceColor
  1234  007F18  22DA               	addwfc	fsr2h,f,c
  1235  007F1A  0E00               	movlw	0
  1236  007F1C  6EDF               	movwf	indf2,c
  1237                           
  1238                           ;./functions.c: 292:         }
  1239  007F1E  2A35               	incf	PRC@a_793,f,c
  1240  007F20  0E07               	movlw	7
  1241  007F22  6435               	cpfsgt	PRC@a_793,c
  1242  007F24  D7F4               	goto	l1515
  1243                           
  1244                           ;./functions.c: 294:         raceColor[1] = 1;
  1245  007F26  0E01               	movlw	1
  1246  007F28  0100               	movlb	0	; () banked
  1247  007F2A  6F8F               	movwf	(_raceColor+1)& (0+255),b
  1248                           
  1249                           ;./functions.c: 296:         for (unsigned char a = 0; a < 5; a++)
  1250  007F2C  0E00               	movlw	0
  1251  007F2E  6E36               	movwf	PRC@a_794,c
  1252  007F30                     l1527:
  1253                           
  1254                           ;./functions.c: 297:         {;./functions.c: 298:             trans(message2[a]);
  1255  007F30  0E2C               	movlw	low PRC@message2
  1256  007F32  2436               	addwf	PRC@a_794,w,c
  1257  007F34  6ED9               	movwf	fsr2l,c
  1258  007F36  6ADA               	clrf	fsr2h,c
  1259  007F38  0E00               	movlw	high PRC@message2
  1260  007F3A  22DA               	addwfc	fsr2h,f,c
  1261  007F3C  50DF               	movf	indf2,w,c
  1262  007F3E  EC00  F03E         	call	_trans
  1263                           
  1264                           ;./functions.c: 299:         }
  1265  007F42  2A36               	incf	PRC@a_794,f,c
  1266  007F44  0E04               	movlw	4
  1267  007F46  6436               	cpfsgt	PRC@a_794,c
  1268  007F48  D7F3               	goto	l1527
  1269  007F4A  0012               	return	
  1270  007F4C                     l1533:
  1271                           
  1272                           ;./functions.c: 302:         for (unsigned char a = 0; a < 8; a++){
  1273  007F4C  0E00               	movlw	0
  1274  007F4E  6E37               	movwf	PRC@a_795,c
  1275  007F50                     l1539:
  1276                           
  1277                           ;./functions.c: 303:             raceColor[a] = 0;
  1278  007F50  0E8E               	movlw	low _raceColor
  1279  007F52  2437               	addwf	PRC@a_795,w,c
  1280  007F54  6ED9               	movwf	fsr2l,c
  1281  007F56  6ADA               	clrf	fsr2h,c
  1282  007F58  0E00               	movlw	high _raceColor
  1283  007F5A  22DA               	addwfc	fsr2h,f,c
  1284  007F5C  0E00               	movlw	0
  1285  007F5E  6EDF               	movwf	indf2,c
  1286                           
  1287                           ;./functions.c: 304:         }
  1288  007F60  2A37               	incf	PRC@a_795,f,c
  1289  007F62  0E07               	movlw	7
  1290  007F64  6437               	cpfsgt	PRC@a_795,c
  1291  007F66  D7F4               	goto	l1539
  1292                           
  1293                           ;./functions.c: 306:         raceColor[2] = 1;
  1294  007F68  0E01               	movlw	1
  1295  007F6A  0100               	movlb	0	; () banked
  1296  007F6C  6F90               	movwf	(_raceColor+2)& (0+255),b
  1297                           
  1298                           ;./functions.c: 308:         for (unsigned char a = 0; a < 5; a++)
  1299  007F6E  0E00               	movlw	0
  1300  007F70  6E38               	movwf	PRC@a_796,c
  1301  007F72                     l1551:
  1302                           
  1303                           ;./functions.c: 309:         {;./functions.c: 310:             trans(message2[a]);
  1304  007F72  0E2C               	movlw	low PRC@message2
  1305  007F74  2438               	addwf	PRC@a_796,w,c
  1306  007F76  6ED9               	movwf	fsr2l,c
  1307  007F78  6ADA               	clrf	fsr2h,c
  1308  007F7A  0E00               	movlw	high PRC@message2
  1309  007F7C  22DA               	addwfc	fsr2h,f,c
  1310  007F7E  50DF               	movf	indf2,w,c
  1311  007F80  EC00  F03E         	call	_trans
  1312                           
  1313                           ;./functions.c: 311:         }
  1314  007F84  2A38               	incf	PRC@a_796,f,c
  1315  007F86  0E04               	movlw	4
  1316  007F88  6438               	cpfsgt	PRC@a_796,c
  1317  007F8A  D7F3               	goto	l1551
  1318  007F8C  0012               	return	
  1319  007F8E                     l1557:
  1320                           
  1321                           ;./functions.c: 314:         for (unsigned char a = 0; a < 8; a++){
  1322  007F8E  0E00               	movlw	0
  1323  007F90  6E39               	movwf	PRC@a_797,c
  1324  007F92                     l1563:
  1325                           
  1326                           ;./functions.c: 315:             raceColor[a] = 0;
  1327  007F92  0E8E               	movlw	low _raceColor
  1328  007F94  2439               	addwf	PRC@a_797,w,c
  1329  007F96  6ED9               	movwf	fsr2l,c
  1330  007F98  6ADA               	clrf	fsr2h,c
  1331  007F9A  0E00               	movlw	high _raceColor
  1332  007F9C  22DA               	addwfc	fsr2h,f,c
  1333  007F9E  0E00               	movlw	0
  1334  007FA0  6EDF               	movwf	indf2,c
  1335                           
  1336                           ;./functions.c: 316:         }
  1337  007FA2  2A39               	incf	PRC@a_797,f,c
  1338  007FA4  0E07               	movlw	7
  1339  007FA6  6439               	cpfsgt	PRC@a_797,c
  1340  007FA8  D7F4               	goto	l1563
  1341                           
  1342                           ;./functions.c: 318:         raceColor[4] = 1;
  1343  007FAA  0E01               	movlw	1
  1344  007FAC  0100               	movlb	0	; () banked
  1345  007FAE  6F92               	movwf	(_raceColor+4)& (0+255),b
  1346                           
  1347                           ;./functions.c: 320:         for (unsigned char a = 0; a < 5; a++)
  1348  007FB0  0E00               	movlw	0
  1349  007FB2  6E3A               	movwf	PRC@a_798,c
  1350  007FB4                     l1575:
  1351                           
  1352                           ;./functions.c: 321:         {;./functions.c: 322:             trans(message2[a]);
  1353  007FB4  0E2C               	movlw	low PRC@message2
  1354  007FB6  243A               	addwf	PRC@a_798,w,c
  1355  007FB8  6ED9               	movwf	fsr2l,c
  1356  007FBA  6ADA               	clrf	fsr2h,c
  1357  007FBC  0E00               	movlw	high PRC@message2
  1358  007FBE  22DA               	addwfc	fsr2h,f,c
  1359  007FC0  50DF               	movf	indf2,w,c
  1360  007FC2  EC00  F03E         	call	_trans
  1361                           
  1362                           ;./functions.c: 323:         }
  1363  007FC6  2A3A               	incf	PRC@a_798,f,c
  1364  007FC8  0E04               	movlw	4
  1365  007FCA  643A               	cpfsgt	PRC@a_798,c
  1366  007FCC  D7F3               	goto	l1575
  1367  007FCE  0012               	return	
  1368  007FD0                     l1581:
  1369                           
  1370                           ;./functions.c: 327:         error();
  1371  007FD0  EC2E  F03E         	call	_error	;wreg free
  1372                           
  1373                           ;./functions.c: 328:         break;
  1374  007FD4  0012               	return	
  1375  007FD6                     l1585:
  1376  007FD6  50AE               	movf	4014,w,c	;volatile
  1377  007FD8  6E0A               	movwf	??_PRC& (0+255),c
  1378  007FDA  6A0B               	clrf	(??_PRC+1)& (0+255),c
  1379                           
  1380                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1381                           ; Switch size 1, requested type "simple"
  1382                           ; Number of cases is 1, Range of values is 0 to 0
  1383                           ; switch strategies available:
  1384                           ; Name         Instructions Cycles
  1385                           ; simple_byte            4     3 (average)
  1386                           ;	Chosen strategy is simple_byte
  1387  007FDC  500B               	movf	??_PRC+1,w,c
  1388  007FDE  0A00               	xorlw	0	; case 0
  1389  007FE0  A4D8               	btfss	status,2,c
  1390  007FE2  D7F6               	goto	l1581
  1391                           
  1392                           ; Switch size 1, requested type "simple"
  1393                           ; Number of cases is 4, Range of values is 66 to 110
  1394                           ; switch strategies available:
  1395                           ; Name         Instructions Cycles
  1396                           ; simple_byte           13     7 (average)
  1397                           ;	Chosen strategy is simple_byte
  1398  007FE4  500A               	movf	??_PRC,w,c
  1399  007FE6  0A42               	xorlw	66	; case 66
  1400  007FE8  B4D8               	btfsc	status,2,c
  1401  007FEA  D76E               	goto	l1485
  1402  007FEC  0A05               	xorlw	5	; case 71
  1403  007FEE  B4D8               	btfsc	status,2,c
  1404  007FF0  D78C               	goto	l1509
  1405  007FF2  0A15               	xorlw	21	; case 82
  1406  007FF4  B4D8               	btfsc	status,2,c
  1407  007FF6  D7AA               	goto	l1533
  1408  007FF8  0A3C               	xorlw	60	; case 110
  1409  007FFA  B4D8               	btfsc	status,2,c
  1410  007FFC  D7C8               	goto	l1557
  1411  007FFE  D7E8               	goto	l1581
  1412  008000                     __end_of_PRC:
  1413                           	opt callstack 0
  1414                           
  1415 ;; *************** function _error *****************
  1416 ;; Defined at:
  1417 ;;		line 250 in file "./functions.c"
  1418 ;; Parameters:    Size  Location     Type
  1419 ;;		None
  1420 ;; Auto vars:     Size  Location     Type
  1421 ;;  a               1    8[COMRAM] unsigned char 
  1422 ;;  message         7    1[COMRAM] unsigned char [7]
  1423 ;; Return value:  Size  Location     Type
  1424 ;;                  1    wreg      void 
  1425 ;; Registers used:
  1426 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1427 ;; Tracked objects:
  1428 ;;		On entry : 0/0
  1429 ;;		On exit  : 0/0
  1430 ;;		Unchanged: 0/0
  1431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1432 ;;      Params:         0       0       0       0       0       0       0
  1433 ;;      Locals:         8       0       0       0       0       0       0
  1434 ;;      Temps:          0       0       0       0       0       0       0
  1435 ;;      Totals:         8       0       0       0       0       0       0
  1436 ;;Total ram usage:        8 bytes
  1437 ;; Hardware stack levels used:    1
  1438 ;; Hardware stack levels required when called:    1
  1439 ;; This function calls:
  1440 ;;		_trans
  1441 ;; This function is called by:
  1442 ;;		_PRC
  1443 ;;		_RCE
  1444 ;; This function uses a non-reentrant model
  1445 ;;
  1446                           
  1447                           	psect	text7
  1448  007C5C                     __ptext7:
  1449                           	opt callstack 0
  1450  007C5C                     _error:
  1451                           	opt callstack 28
  1452                           
  1453                           ;./functions.c: 252:     unsigned char message[] = "ERROR\n";
  1454                           
  1455                           ;incstack = 0
  1456  007C5C  EE20  F097         	lfsr	2,error@F6015
  1457  007C60  EE10  F002         	lfsr	1,error@message
  1458  007C64  0E06               	movlw	6
  1459  007C66                     u331:
  1460  007C66  CFDB FFE3          	movff	plusw2,plusw1
  1461  007C6A  06E8               	decf	wreg,f,c
  1462  007C6C  E2FC               	bc	u331
  1463                           
  1464                           ;./functions.c: 254:     for (unsigned char a = 0; a < 6; a++)
  1465  007C6E  0E00               	movlw	0
  1466  007C70  6E09               	movwf	error@a,c
  1467  007C72                     l1427:
  1468                           
  1469                           ;./functions.c: 255:     {;./functions.c: 256:         trans(message[a]);
  1470  007C72  0E02               	movlw	low error@message
  1471  007C74  2409               	addwf	error@a,w,c
  1472  007C76  6ED9               	movwf	fsr2l,c
  1473  007C78  6ADA               	clrf	fsr2h,c
  1474  007C7A  0E00               	movlw	high error@message
  1475  007C7C  22DA               	addwfc	fsr2h,f,c
  1476  007C7E  50DF               	movf	indf2,w,c
  1477  007C80  EC00  F03E         	call	_trans
  1478                           
  1479                           ;./functions.c: 257:     }
  1480  007C84  2A09               	incf	error@a,f,c
  1481  007C86  0E05               	movlw	5
  1482  007C88  6409               	cpfsgt	error@a,c
  1483  007C8A  D7F3               	goto	l1427
  1484  007C8C  0012               	return	
  1485  007C8E                     __end_of_error:
  1486                           	opt callstack 0
  1487                           
  1488 ;; *************** function _trans *****************
  1489 ;; Defined at:
  1490 ;;		line 42 in file "./functions.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;  s               1    wreg     unsigned char 
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;  s               1    0[COMRAM] unsigned char 
  1495 ;; Return value:  Size  Location     Type
  1496 ;;                  1    wreg      void 
  1497 ;; Registers used:
  1498 ;;		wreg
  1499 ;; Tracked objects:
  1500 ;;		On entry : 0/0
  1501 ;;		On exit  : 0/0
  1502 ;;		Unchanged: 0/0
  1503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1504 ;;      Params:         0       0       0       0       0       0       0
  1505 ;;      Locals:         1       0       0       0       0       0       0
  1506 ;;      Temps:          0       0       0       0       0       0       0
  1507 ;;      Totals:         1       0       0       0       0       0       0
  1508 ;;Total ram usage:        1 bytes
  1509 ;; Hardware stack levels used:    1
  1510 ;; This function calls:
  1511 ;;		Nothing
  1512 ;; This function is called by:
  1513 ;;		_error
  1514 ;;		_PRC
  1515 ;;		_RCE
  1516 ;; This function uses a non-reentrant model
  1517 ;;
  1518                           
  1519                           	psect	text8
  1520  007C00                     __ptext8:
  1521                           	opt callstack 0
  1522  007C00                     _trans:
  1523                           	opt callstack 29
  1524                           
  1525                           ;incstack = 0
  1526                           ;trans@s stored from wreg
  1527  007C00  6E01               	movwf	trans@s,c
  1528  007C02                     
  1529                           ;./functions.c: 43:     while(!PIR1bits.TX1IF);
  1530  007C02  A89E               	btfss	3998,4,c	;volatile
  1531  007C04  D7FE               	goto	l1413
  1532                           
  1533                           ;./functions.c: 44:     TXREG = s;
  1534  007C06  C001  FFAD         	movff	trans@s,4013	;volatile
  1535  007C0A  0012               	return		;funcret
  1536  007C0C                     __end_of_trans:
  1537                           	opt callstack 0
  1538  0000                     
  1539                           	psect	rparam
  1540  0000                     tosu	equ	0xFFF
  1541                           tosh	equ	0xFFE
  1542                           tosl	equ	0xFFD
  1543                           stkptr	equ	0xFFC
  1544                           pclatu	equ	0xFFB
  1545                           pclath	equ	0xFFA
  1546                           pcl	equ	0xFF9
  1547                           tblptru	equ	0xFF8
  1548                           tblptrh	equ	0xFF7
  1549                           tblptrl	equ	0xFF6
  1550                           tablat	equ	0xFF5
  1551                           prodh	equ	0xFF4
  1552                           prodl	equ	0xFF3
  1553                           indf0	equ	0xFEF
  1554                           postinc0	equ	0xFEE
  1555                           postdec0	equ	0xFED
  1556                           preinc0	equ	0xFEC
  1557                           plusw0	equ	0xFEB
  1558                           fsr0h	equ	0xFEA
  1559                           fsr0l	equ	0xFE9
  1560                           wreg	equ	0xFE8
  1561                           indf1	equ	0xFE7
  1562                           postinc1	equ	0xFE6
  1563                           postdec1	equ	0xFE5
  1564                           preinc1	equ	0xFE4
  1565                           plusw1	equ	0xFE3
  1566                           fsr1h	equ	0xFE2
  1567                           fsr1l	equ	0xFE1
  1568                           bsr	equ	0xFE0
  1569                           indf2	equ	0xFDF
  1570                           postinc2	equ	0xFDE
  1571                           postdec2	equ	0xFDD
  1572                           preinc2	equ	0xFDC
  1573                           plusw2	equ	0xFDB
  1574                           fsr2h	equ	0xFDA
  1575                           fsr2l	equ	0xFD9
  1576                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        105
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     80      92
    BANK0           160      0      93
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_RCE
    _RCE->_PRC
    _PRC->_error
    _error->_trans

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1278
                                _RCE
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
                         _clearPorts
                           _setupOSC
                        _setupSerial
 ---------------------------------------------------------------------------------
 (2) _setupSerial                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setupOSC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clearPorts                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RCE                                                 22    22      0    1278
                                             58 COMRAM    22    22      0
                                _PRC
                              _error
                              _trans
 ---------------------------------------------------------------------------------
 (2) _PRC                                                 49    49      0     865
                                              9 COMRAM    49    49      0
                              _error
                              _trans
 ---------------------------------------------------------------------------------
 (2) _error                                                8     8      0     114
                                              1 COMRAM     8     8      0
                              _trans
 ---------------------------------------------------------------------------------
 (2) _trans                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _RCE
     _PRC
       _error
         _trans
       _trans
     _error
       _trans
     _trans
   _init
     _clearPorts
     _setupOSC
     _setupSerial

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      5D       4       58.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     50      5C       1       96.8%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      B9       9        0.0%
DATA                 0      0      B9      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri May 24 15:41:22 2019

           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000              __CFG_LVP$ON 000000                      l220 7BFE  
                    l242 7DF6                      l248 7E06             __CFG_CPB$OFF 000000  
                    u331 7C66                      _RCE 7D90                      u361 7E8A  
           __CFG_CPD$OFF 000000                      u371 7E9C                      u380 7EC2  
                    u491 7D9E                      _PRC 7E7C                      _col 005B  
                    wreg 000FE8                     ?_RCE 0001                     ?_PRC 0001  
                   RCE@a 004F                     PRC@a 0032                     l1413 7C02  
                   l1503 7EEE                     l1427 7C72                     l1515 7F0E  
                   l1533 7F4C                     l1509 7F0A                     l1551 7F72  
                   l1527 7F30                     l1631 7DAA                     l1641 7DD4  
                   l1563 7F92                     l1539 7F50                     l1491 7ECC  
                   l1581 7FD0                     l1557 7F8E                     l1485 7EC8  
                   l1661 7E1C                     l1645 7DE2                     l1575 7FB4  
                   l1479 7EA8                     l1671 7E5E                     l1663 7E24  
                   l1585 7FD6                     l1665 7E2A                     l1649 7DF0  
                   l1677 7E62                     l1669 7E30                     _LATA 000F89  
                   _LATB 000F8A                     _LATC 000F8B                     _LATD 000F8C  
                   _FSR0 000FE9                     _LATE 000F8D                     _main 7BF6  
                   _init 7C18                     _size 005C                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9            __CFG_BORV$190 000000  
                   start 0000            __CFG_IESO$OFF 000000             ___param_bank 000000  
                  ??_RCE 003B                    ??_PRC 000A             _BAUDCON1bits 000FB8  
                  ?_main 0001                    ?_init 0001                    _RCREG 000FAE  
                  _PORTA 000F80                    _PORTB 000F81                    _PORTC 000F82  
                  _PORTD 000F83                    _PORTE 000F84                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94                    _TRISD 000F95  
                  _TRISE 000F96                    _TXREG 000FAD            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  _error 7C5C       __CFG_MCLRE$EXTMCLR 000000                    _trans 7C00  
                  tablat 000FF5                    plusw1 000FE3                    plusw2 000FDB  
                  status 000FD8           __CFG_HFOFST$ON 000000           __CFG_PBADEN$ON 000000  
        __initialization 7C8E             __end_of_main 7C00             __end_of_init 7C2C  
                 ??_main 0051                   ??_init 0001            __activetblptr 000002  
                 _ADCON1 000FC1                   ?_error 0001                   _ADRESH 000FC4  
                 ?_trans 0001                   _ANSELA 000F38                   _ANSELB 000F39  
                 _ANSELC 000F3A                   _ANSELD 000F3B                   _ANSELE 000F3C  
         __CFG_WDTEN$OFF 000000                   _RCSTA1 000FAB                   _SPBRG1 000FAF  
                 _TXSTA1 000FAC           __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000  
                 error@a 0009             __pdataCOMRAM 0051         __end_of_setupOSC 7BF6  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
     RCE@commandReceived 004B                   trans@s 0001             ?_setupSerial 0001  
             __accesstop 0060  __end_of__initialization 7CCE            ___rparam_used 000001  
         __pcstackCOMRAM 0001           calibrate@F6007 00A4             __pidataBANK0 7D33  
          __end_of_error 7C8E            __end_of_trans 7C0C                  ??_error 0002  
                ??_trans 0001          __CFG_PLLCFG$OFF 000000               _clearPorts 7CD8  
     __CFG_CCP2MX$PORTC1 000000       __CFG_CCP3MX$PORTB5 000000                  _SPBRGH1 000FB0  
            PRC@message2 002C          __CFG_PWRTEN$OFF 000000                  _Lranges 0051  
                __Hparam 0000                  _Mranges 00B8                  __Lparam 0000  
                _Rranges 00B3        RCE@nCharsReceived 004E                ?_setupOSC 0001  
           error@message 0002                  __pcinit 7C8E                  __ramtop 0600  
                __ptext0 7BF6                  __ptext1 7C18                  __ptext2 7C2C  
                __ptext3 7BEC                  __ptext4 7CD8                  __ptext5 7D90  
                __ptext6 7E7C                  __ptext7 7C5C                  __ptext8 7C00  
           __size_of_RCE 00EC             __size_of_PRC 0184     end_of_initialization 7CCE  
   __size_of_setupSerial 0030            __Lmediumconst 0000              ?_clearPorts 0001  
             ??_setupOSC 0001                  postdec1 000FE5                  postinc0 000FEE  
             _sensorVals 00A9                _PORTAbits 000F80                _TRISBbits 000F93  
              _TRISCbits 000F94            __pidataCOMRAM 7C0C      start_initialization 7C8E  
            __end_of_RCE 7E7C              __end_of_PRC 8000      __size_of_clearPorts 005A  
             error@F6015 0097               RCE@message 003D              __pdataBANK0 0060  
               RCE@F6041 0080                 RCE@a_827 0050                 PRC@F6021 009E  
               PRC@F6019 0060                 PRC@a_791 0033                 PRC@a_792 0034  
               PRC@a_793 0035                 PRC@a_794 0036                 PRC@a_795 0037  
               PRC@a_796 0038                 PRC@a_797 0039                 PRC@a_798 003A  
      __size_of_setupOSC 000A         __CFG_PRICLKEN$ON 000000               PRC@message 000C  
              _raceColor 008E           __size_of_error 0032           __size_of_trans 000C  
               _PIE1bits 000F9D             ??_clearPorts 0001                 _PIR1bits 000F9E  
       __CFG_WDTPS$32768 000000               _ADCON0bits 000FC2               _ADCON2bits 000FC0  
               _LLranges 0056            ??_setupSerial 0001       __end_of_clearPorts 7D32  
              copy_data0 7CA2                copy_data1 7CC2                 _RRranges 00AE  
               __Hrparam 0000                 __Lrparam 0000       __CFG_BOREN$SBORDIS 000000  
      __CFG_P2BMX$PORTD2 000000               _ANSELBbits 000F39               _ANSELCbits 000F3A  
          __size_of_main 000A            __size_of_init 0014      __end_of_setupSerial 7C5C  
               _setupOSC 7BEC               _INTCONbits 000FF2               _OSCCONbits 000FD3  
      __CFG_T3CMX$PORTC0 000000              _setupSerial 7C2C        __CFG_FOSC$INTIO67 000000  
