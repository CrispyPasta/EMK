

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon May 27 15:06:37 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    58  0000                     
    59                           ; Version 2.05
    60                           ; Generated 20/12/2018 GMT
    61                           ; 
    62                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC18F45K22 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93  0000                     
    94                           	psect	idataCOMRAM
    95  007023                     __pidataCOMRAM:
    96                           	opt callstack 0
    97                           
    98                           ;initializer for _sensorVals
    99  007023  78                 	db	120
   100  007024  AA                 	db	170
   101  007025  AA                 	db	170
   102  007026  BE                 	db	190
   103  007027  FA                 	db	250
   104                           
   105                           ;initializer for _raceDayColor
   106  007028  42                 	db	66
   107                           
   108                           ;initializer for _col
   109  007029  42                 	db	66
   110                           
   111                           ;initializer for _size
   112  00702A  05                 	db	5
   113                           
   114                           ;initializer for _Rranges
   115  00702B  8C                 	db	140
   116  00702C  AA                 	db	170
   117  00702D  AF                 	db	175
   118  00702E  D2                 	db	210
   119  00702F  FF                 	db	255
   120                           
   121                           	psect	idataBANK0
   122  00776B                     __pidataBANK0:
   123                           	opt callstack 0
   124                           
   125                           ;initializer for capTouch@F6046
   126  00776B  0A                 	db	10
   127  00776C  53                 	db	83
   128  00776D  61                 	db	97
   129  00776E  6E                 	db	110
   130  00776F  69                 	db	105
   131  007770  63                 	db	99
   132  007771  20                 	db	32
   133  007772  77                 	db	119
   134  007773  61                 	db	97
   135  007774  69                 	db	105
   136  007775  74                 	db	116
   137  007776  73                 	db	115
   138  007777  20                 	db	32
   139  007778  66                 	db	102
   140  007779  6F                 	db	111
   141  00777A  72                 	db	114
   142  00777B  20                 	db	32
   143  00777C  61                 	db	97
   144  00777D  20                 	db	32
   145  00777E  74                 	db	116
   146  00777F  6F                 	db	111
   147  007780  75                 	db	117
   148  007781  63                 	db	99
   149  007782  68                 	db	104
   150  007783  0A                 	db	10
   151  007784  00                 	db	0
   152                           
   153                           ;initializer for RCE@F6118
   154  007785  0A                 	db	10
   155  007786  53                 	db	83
   156  007787  61                 	db	97
   157  007788  6E                 	db	110
   158  007789  69                 	db	105
   159  00778A  63                 	db	99
   160  00778B  20                 	db	32
   161  00778C  72                 	db	114
   162  00778D  61                 	db	97
   163  00778E  63                 	db	99
   164  00778F  65                 	db	101
   165  007790  73                 	db	115
   166  007791  20                 	db	32
   167  007792  00                 	db	0
   168                           
   169                           ;initializer for readFromEEP@F6099
   170  007793  E4                 	db	low _LLranges
   171  007794  00                 	db	high _LLranges
   172  007795  DF                 	db	low _Lranges
   173  007796  00                 	db	high _Lranges
   174  007797  DA                 	db	low _Mranges
   175  007798  00                 	db	high _Mranges
   176  007799  58                 	db	low _Rranges
   177  00779A  00                 	db	high _Rranges
   178  00779B  D5                 	db	low _RRranges
   179  00779C  00                 	db	high _RRranges
   180                           
   181                           ;initializer for writeToEEP@F6092
   182  00779D  E4                 	db	low _LLranges
   183  00779E  00                 	db	high _LLranges
   184  00779F  DF                 	db	low _Lranges
   185  0077A0  00                 	db	high _Lranges
   186  0077A1  DA                 	db	low _Mranges
   187  0077A2  00                 	db	high _Mranges
   188  0077A3  58                 	db	low _Rranges
   189  0077A4  00                 	db	high _Rranges
   190  0077A5  D5                 	db	low _RRranges
   191  0077A6  00                 	db	high _RRranges
   192                           
   193                           ;initializer for ranges@F6083
   194  0077A7  E4                 	db	low _LLranges
   195  0077A8  00                 	db	high _LLranges
   196  0077A9  DF                 	db	low _Lranges
   197  0077AA  00                 	db	high _Lranges
   198  0077AB  DA                 	db	low _Mranges
   199  0077AC  00                 	db	high _Mranges
   200  0077AD  58                 	db	low _Rranges
   201  0077AE  00                 	db	high _Rranges
   202  0077AF  D5                 	db	low _RRranges
   203  0077B0  00                 	db	high _RRranges
   204                           
   205                           ;initializer for classifyColors@F6062
   206  0077B1  E4                 	db	low _LLranges
   207  0077B2  00                 	db	high _LLranges
   208  0077B3  DF                 	db	low _Lranges
   209  0077B4  00                 	db	high _Lranges
   210  0077B5  DA                 	db	low _Mranges
   211  0077B6  00                 	db	high _Mranges
   212  0077B7  58                 	db	low _Rranges
   213  0077B8  00                 	db	high _Rranges
   214  0077B9  D5                 	db	low _RRranges
   215  0077BA  00                 	db	high _RRranges
   216                           
   217                           ;initializer for calibrate@F6017
   218  0077BB  E4                 	db	low _LLranges
   219  0077BC  00                 	db	high _LLranges
   220  0077BD  DF                 	db	low _Lranges
   221  0077BE  00                 	db	high _Lranges
   222  0077BF  DA                 	db	low _Mranges
   223  0077C0  00                 	db	high _Mranges
   224  0077C1  58                 	db	low _Rranges
   225  0077C2  00                 	db	high _Rranges
   226  0077C3  D5                 	db	low _RRranges
   227  0077C4  00                 	db	high _RRranges
   228                           
   229                           ;initializer for _raceColor
   230  0077C5  30                 	db	48
   231  0077C6  30                 	db	48
   232  0077C7  30                 	db	48
   233  0077C8  30                 	db	48
   234  0077C9  31                 	db	49
   235  0077CA  30                 	db	48
   236  0077CB  30                 	db	48
   237  0077CC  30                 	db	48
   238  0077CD  00                 	db	0
   239                           
   240                           ;initializer for error@F6088
   241  0077CE  45                 	db	69
   242  0077CF  52                 	db	82
   243  0077D0  52                 	db	82
   244  0077D1  4F                 	db	79
   245  0077D2  52                 	db	82
   246  0077D3  0A                 	db	10
   247  0077D4  00                 	db	0
   248                           
   249                           ;initializer for _sensorChannels
   250  0077D5  0C                 	db	12
   251  0077D6  0A                 	db	10
   252  0077D7  08                 	db	8
   253  0077D8  09                 	db	9
   254  0077D9  0D                 	db	13
   255  0077DA  0F                 	db	15
   256                           
   257                           ;initializer for PRC@F6030
   258  0077DB  0A                 	db	10
   259  0077DC  53                 	db	83
   260  0077DD  65                 	db	101
   261  0077DE  74                 	db	116
   262  0077DF  00                 	db	0
   263                           
   264                           ;initializer for _RRranges
   265  0077E0  8C                 	db	140
   266  0077E1  B9                 	db	185
   267  0077E2  C3                 	db	195
   268  0077E3  C3                 	db	195
   269  0077E4  FF                 	db	255
   270                           
   271                           ;initializer for _Mranges
   272  0077E5  82                 	db	130
   273  0077E6  A5                 	db	165
   274  0077E7  AF                 	db	175
   275  0077E8  BC                 	db	188
   276  0077E9  FF                 	db	255
   277                           
   278                           ;initializer for _Lranges
   279  0077EA  82                 	db	130
   280  0077EB  B2                 	db	178
   281  0077EC  B4                 	db	180
   282  0077ED  BC                 	db	188
   283  0077EE  FF                 	db	255
   284                           
   285                           ;initializer for _LLranges
   286  0077EF  8C                 	db	140
   287  0077F0  A8                 	db	168
   288  0077F1  B9                 	db	185
   289  0077F2  B9                 	db	185
   290  0077F3  FF                 	db	255
   291                           
   292                           	psect	idataBANK1
   293  007130                     __pidataBANK1:
   294                           	opt callstack 0
   295                           
   296                           ;initializer for PRC@F6028
   297  007130  0A                 	db	10
   298  007131  57                 	db	87
   299  007132  68                 	db	104
   300  007133  61                 	db	97
   301  007134  74                 	db	116
   302  007135  20                 	db	32
   303  007136  63                 	db	99
   304  007137  6F                 	db	111
   305  007138  6C                 	db	108
   306  007139  6F                 	db	111
   307  00713A  72                 	db	114
   308  00713B  20                 	db	32
   309  00713C  73                 	db	115
   310  00713D  68                 	db	104
   311  00713E  6F                 	db	111
   312  00713F  75                 	db	117
   313  007140  6C                 	db	108
   314  007141  64                 	db	100
   315  007142  20                 	db	32
   316  007143  73                 	db	115
   317  007144  61                 	db	97
   318  007145  6E                 	db	110
   319  007146  69                 	db	105
   320  007147  63                 	db	99
   321  007148  20                 	db	32
   322  007149  72                 	db	114
   323  00714A  61                 	db	97
   324  00714B  63                 	db	99
   325  00714C  65                 	db	101
   326  00714D  3F                 	db	63
   327  00714E  0A                 	db	10
   328  00714F  00                 	db	0
   329  0000                     _T6CON	set	3914
   330  0000                     _PR6	set	3915
   331  0000                     _TMR6	set	3916
   332  0000                     _ANSELCbits	set	3898
   333  0000                     _ANSELBbits	set	3897
   334  0000                     _ANSELE	set	3900
   335  0000                     _ANSELD	set	3899
   336  0000                     _ANSELC	set	3898
   337  0000                     _ANSELB	set	3897
   338  0000                     _ANSELA	set	3896
   339  0000                     _T4CONbits	set	3921
   340  0000                     _TMR4	set	3923
   341  0000                     _T4CON	set	3921
   342  0000                     _CCPTMRS1	set	3912
   343  0000                     _CCPR5L	set	3925
   344  0000                     _PR4	set	3922
   345  0000                     _CCP5CON	set	3924
   346  0000                     _CCPTMRS0	set	3913
   347  0000                     _FSR0	set	4073
   348  0000                     _TMR1	set	4046
   349  0000                     _T1CONbits	set	4045
   350  0000                     _T1CON	set	4045
   351  0000                     _PIR5bits	set	3966
   352  0000                     _PIR2bits	set	4001
   353  0000                     _EECON2	set	4007
   354  0000                     _INTCONbits	set	4082
   355  0000                     _EECON1bits	set	4006
   356  0000                     _EEDATA	set	4008
   357  0000                     _EEADR	set	4009
   358  0000                     _ADRESH	set	4036
   359  0000                     _TRISBbits	set	3987
   360  0000                     _TXREG	set	4013
   361  0000                     _PORTEbits	set	3972
   362  0000                     _PORTCbits	set	3970
   363  0000                     _RCREG	set	4014
   364  0000                     _ADCON0bits	set	4034
   365  0000                     _ADCON1	set	4033
   366  0000                     _ADCON2bits	set	4032
   367  0000                     _BAUDCON1bits	set	4024
   368  0000                     _SPBRGH1	set	4016
   369  0000                     _SPBRG1	set	4015
   370  0000                     _RCSTA1	set	4011
   371  0000                     _TXSTA1	set	4012
   372  0000                     _OSCCONbits	set	4051
   373  0000                     _TRISE	set	3990
   374  0000                     _LATE	set	3981
   375  0000                     _PORTE	set	3972
   376  0000                     _TRISD	set	3989
   377  0000                     _LATD	set	3980
   378  0000                     _PORTD	set	3971
   379  0000                     _TRISC	set	3988
   380  0000                     _LATC	set	3979
   381  0000                     _PORTC	set	3970
   382  0000                     _TRISB	set	3987
   383  0000                     _LATB	set	3978
   384  0000                     _PORTB	set	3969
   385  0000                     _TRISA	set	3986
   386  0000                     _LATA	set	3977
   387  0000                     _PORTA	set	3968
   388  0000                     _PIE5bits	set	3965
   389  0000                     _TRISEbits	set	3990
   390  0000                     _T2CONbits	set	4026
   391  0000                     _PIE1bits	set	3997
   392  0000                     _TMR2	set	4028
   393  0000                     _T2CON	set	4026
   394  0000                     _TRISCbits	set	3988
   395  0000                     _CCPR1L	set	4030
   396  0000                     _PR2	set	4027
   397  0000                     _CCP1CON	set	4029
   398  0000                     _PORTAbits	set	3968
   399  0000                     _PIR1bits	set	3998
   400                           
   401                           ; #config settings
   402  0000                     
   403                           	psect	cinit
   404  007562                     __pcinit:
   405                           	opt callstack 0
   406  007562                     start_initialization:
   407                           	opt callstack 0
   408  007562                     __initialization:
   409                           	opt callstack 0
   410                           
   411                           ; Initialize objects allocated to BANK1 (32 bytes)
   412                           ; load TBLPTR registers with __pidataBANK1
   413  007562  0E30               	movlw	low __pidataBANK1
   414  007564  6EF6               	movwf	tblptrl,c
   415  007566  0E71               	movlw	high __pidataBANK1
   416  007568  6EF7               	movwf	tblptrh,c
   417  00756A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   418  00756C  6EF8               	movwf	tblptru,c
   419  00756E  EE01  F000         	lfsr	0,__pdataBANK1
   420  007572  EE10 F020          	lfsr	1,32
   421  007576                     copy_data0:
   422  007576  0009               	tblrd		*+
   423  007578  CFF5 FFEE          	movff	tablat,postinc0
   424  00757C  50E5               	movf	postdec1,w,c
   425  00757E  50E1               	movf	fsr1l,w,c
   426  007580  E1FA               	bnz	copy_data0
   427                           
   428                           ; Initialize objects allocated to BANK0 (137 bytes)
   429                           ; load TBLPTR registers with __pidataBANK0
   430  007582  0E6B               	movlw	low __pidataBANK0
   431  007584  6EF6               	movwf	tblptrl,c
   432  007586  0E77               	movlw	high __pidataBANK0
   433  007588  6EF7               	movwf	tblptrh,c
   434  00758A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   435  00758C  6EF8               	movwf	tblptru,c
   436  00758E  EE00  F060         	lfsr	0,__pdataBANK0
   437  007592  EE10 F089          	lfsr	1,137
   438  007596                     copy_data1:
   439  007596  0009               	tblrd		*+
   440  007598  CFF5 FFEE          	movff	tablat,postinc0
   441  00759C  50E5               	movf	postdec1,w,c
   442  00759E  50E1               	movf	fsr1l,w,c
   443  0075A0  E1FA               	bnz	copy_data1
   444                           
   445                           ; Initialize objects allocated to COMRAM (13 bytes)
   446                           ; load TBLPTR registers with __pidataCOMRAM
   447  0075A2  0E23               	movlw	low __pidataCOMRAM
   448  0075A4  6EF6               	movwf	tblptrl,c
   449  0075A6  0E70               	movlw	high __pidataCOMRAM
   450  0075A8  6EF7               	movwf	tblptrh,c
   451  0075AA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   452  0075AC  6EF8               	movwf	tblptru,c
   453  0075AE  EE00  F050         	lfsr	0,__pdataCOMRAM
   454  0075B2  EE10 F00D          	lfsr	1,13
   455  0075B6                     copy_data2:
   456  0075B6  0009               	tblrd		*+
   457  0075B8  CFF5 FFEE          	movff	tablat,postinc0
   458  0075BC  50E5               	movf	postdec1,w,c
   459  0075BE  50E1               	movf	fsr1l,w,c
   460  0075C0  E1FA               	bnz	copy_data2
   461                           
   462                           ; Clear objects allocated to BANK0 (5 bytes)
   463  0075C2  0100               	movlb	0
   464  0075C4  6BED               	clrf	(__pbssBANK0+4)& (0+255),b
   465  0075C6  6BEC               	clrf	(__pbssBANK0+3)& (0+255),b
   466  0075C8  6BEB               	clrf	(__pbssBANK0+2)& (0+255),b
   467  0075CA  6BEA               	clrf	(__pbssBANK0+1)& (0+255),b
   468  0075CC  6BE9               	clrf	__pbssBANK0& (0+255),b
   469                           
   470                           ; Clear objects allocated to COMRAM (1 bytes)
   471  0075CE  6A5D               	clrf	__pbssCOMRAM& (0+255),c
   472  0075D0                     end_of_initialization:
   473                           	opt callstack 0
   474  0075D0                     __end_of__initialization:
   475                           	opt callstack 0
   476  0075D0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   477  0075D2  6EF8               	movwf	tblptru,c
   478  0075D4  0100               	movlb	0
   479  0075D6  EF00  F038         	goto	_main	;jump to C main() function
   480                           
   481                           	psect	bssCOMRAM
   482  00005D                     __pbssCOMRAM:
   483                           	opt callstack 0
   484  00005D                     determineDirection@rc:
   485                           	opt callstack 0
   486  00005D                     	ds	1
   487                           
   488                           	psect	dataCOMRAM
   489  000050                     __pdataCOMRAM:
   490                           	opt callstack 0
   491  000050                     _sensorVals:
   492                           	opt callstack 0
   493  000050                     	ds	5
   494  000055                     _raceDayColor:
   495                           	opt callstack 0
   496  000055                     	ds	1
   497  000056                     _col:
   498                           	opt callstack 0
   499  000056                     	ds	1
   500  000057                     _size:
   501                           	opt callstack 0
   502  000057                     	ds	1
   503  000058                     _Rranges:
   504                           	opt callstack 0
   505  000058                     	ds	5
   506                           
   507                           	psect	bssBANK0
   508  0000E9                     __pbssBANK0:
   509                           	opt callstack 0
   510  0000E9                     _colorsDetected:
   511                           	opt callstack 0
   512  0000E9                     	ds	5
   513                           
   514                           	psect	dataBANK0
   515  000060                     __pdataBANK0:
   516                           	opt callstack 0
   517  000060                     capTouch@F6046:
   518                           	opt callstack 0
   519  000060                     	ds	26
   520  00007A                     RCE@F6118:
   521                           	opt callstack 0
   522  00007A                     	ds	14
   523  000088                     readFromEEP@F6099:
   524                           	opt callstack 0
   525  000088                     	ds	10
   526  000092                     writeToEEP@F6092:
   527                           	opt callstack 0
   528  000092                     	ds	10
   529  00009C                     ranges@F6083:
   530                           	opt callstack 0
   531  00009C                     	ds	10
   532  0000A6                     classifyColors@F6062:
   533                           	opt callstack 0
   534  0000A6                     	ds	10
   535  0000B0                     calibrate@F6017:
   536                           	opt callstack 0
   537  0000B0                     	ds	10
   538  0000BA                     _raceColor:
   539                           	opt callstack 0
   540  0000BA                     	ds	9
   541  0000C3                     error@F6088:
   542                           	opt callstack 0
   543  0000C3                     	ds	7
   544  0000CA                     _sensorChannels:
   545                           	opt callstack 0
   546  0000CA                     	ds	6
   547  0000D0                     PRC@F6030:
   548                           	opt callstack 0
   549  0000D0                     	ds	5
   550  0000D5                     _RRranges:
   551                           	opt callstack 0
   552  0000D5                     	ds	5
   553  0000DA                     _Mranges:
   554                           	opt callstack 0
   555  0000DA                     	ds	5
   556  0000DF                     _Lranges:
   557                           	opt callstack 0
   558  0000DF                     	ds	5
   559  0000E4                     _LLranges:
   560                           	opt callstack 0
   561  0000E4                     	ds	5
   562                           
   563                           	psect	dataBANK1
   564  000100                     __pdataBANK1:
   565                           	opt callstack 0
   566  000100                     PRC@F6028:
   567                           	opt callstack 0
   568  000100                     	ds	32
   569                           
   570                           	psect	cstackCOMRAM
   571  000001                     __pcstackCOMRAM:
   572                           	opt callstack 0
   573  000001                     ??_classifyColors:
   574  000001                     ??_displayColorDetected:
   575  000001                     ??_writeToEEP:
   576  000001                     ??_setADCChannel:
   577  000001                     ??_readFromEEP:
   578  000001                     ?_abs:
   579                           	opt callstack 0
   580  000001                     ?___awdiv:
   581                           	opt callstack 0
   582  000001                     trans@s:
   583                           	opt callstack 0
   584  000001                     msDelay@delayInMs:
   585                           	opt callstack 0
   586  000001                     ___awdiv@dividend:
   587                           	opt callstack 0
   588  000001                     abs@a:
   589                           	opt callstack 0
   590                           
   591                           ; 2 bytes @ 0x0
   592  000001                     	ds	1
   593  000002                     sixSecDelay@a:
   594                           	opt callstack 0
   595  000002                     error@message:
   596                           	opt callstack 0
   597                           
   598                           ; 7 bytes @ 0x1
   599  000002                     	ds	1
   600  000003                     ??_abs:
   601  000003                     displayColorDetected@sensor:
   602                           	opt callstack 0
   603  000003                     setADCChannel@channel:
   604                           	opt callstack 0
   605  000003                     ___awdiv@divisor:
   606                           	opt callstack 0
   607  000003                     writeToEEP@rs:
   608                           	opt callstack 0
   609  000003                     readFromEEP@rs:
   610                           	opt callstack 0
   611                           
   612                           ; 10 bytes @ 0x2
   613  000003                     	ds	1
   614  000004                     ??_aveSensor:
   615                           
   616                           ; 1 bytes @ 0x3
   617  000004                     	ds	1
   618  000005                     ___awdiv@counter:
   619                           	opt callstack 0
   620  000005                     classifyColors@sensorRanges:
   621                           	opt callstack 0
   622                           
   623                           ; 10 bytes @ 0x4
   624  000005                     	ds	1
   625  000006                     aveSensor@s:
   626                           	opt callstack 0
   627  000006                     ___awdiv@sign:
   628                           	opt callstack 0
   629                           
   630                           ; 1 bytes @ 0x5
   631  000006                     	ds	1
   632  000007                     aveSensor@measurements:
   633                           	opt callstack 0
   634  000007                     ___awdiv@quotient:
   635                           	opt callstack 0
   636                           
   637                           ; 2 bytes @ 0x6
   638  000007                     	ds	2
   639  000009                     aveSensor@result:
   640                           	opt callstack 0
   641  000009                     error@a:
   642                           	opt callstack 0
   643                           
   644                           ; 1 bytes @ 0x8
   645  000009                     	ds	1
   646  00000A                     ??_PRC:
   647  00000A                     aveSensor@a:
   648                           	opt callstack 0
   649                           
   650                           ; 1 bytes @ 0x9
   651  00000A                     	ds	1
   652  00000B                     ??_readAllSensors:
   653  00000B                     capTouch@message:
   654                           	opt callstack 0
   655                           
   656                           ; 26 bytes @ 0xA
   657  00000B                     	ds	1
   658  00000C                     PRC@message:
   659                           	opt callstack 0
   660                           
   661                           ; 32 bytes @ 0xB
   662  00000C                     	ds	1
   663  00000D                     writeToEEP@address:
   664                           	opt callstack 0
   665  00000D                     readFromEEP@address:
   666                           	opt callstack 0
   667  00000D                     readAllSensors@tempSensorVals:
   668                           	opt callstack 0
   669                           
   670                           ; 5 bytes @ 0xC
   671  00000D                     	ds	1
   672  00000E                     writeToEEP@a:
   673                           	opt callstack 0
   674  00000E                     readFromEEP@a:
   675                           	opt callstack 0
   676                           
   677                           ; 1 bytes @ 0xD
   678  00000E                     	ds	1
   679  00000F                     classifyColors@a:
   680                           	opt callstack 0
   681  00000F                     writeToEEP@b:
   682                           	opt callstack 0
   683  00000F                     readFromEEP@b:
   684                           	opt callstack 0
   685                           
   686                           ; 1 bytes @ 0xE
   687  00000F                     	ds	1
   688  000010                     ??_ranges:
   689  000010                     
   690                           ; 1 bytes @ 0xF
   691  000010                     	ds	2
   692  000012                     readAllSensors@a:
   693                           	opt callstack 0
   694  000012                     ranges@rangeArray:
   695                           	opt callstack 0
   696                           
   697                           ; 10 bytes @ 0x11
   698  000012                     	ds	1
   699  000013                     
   700                           ; 1 bytes @ 0x12
   701  000013                     	ds	1
   702  000014                     pyCal@a:
   703                           	opt callstack 0
   704                           
   705                           ; 1 bytes @ 0x13
   706  000014                     	ds	8
   707  00001C                     ranges@b:
   708                           	opt callstack 0
   709                           
   710                           ; 1 bytes @ 0x1B
   711  00001C                     	ds	1
   712  00001D                     ranges@a:
   713                           	opt callstack 0
   714                           
   715                           ; 1 bytes @ 0x1C
   716  00001D                     	ds	1
   717  00001E                     ??_calibrate:
   718                           
   719                           ; 1 bytes @ 0x1D
   720  00001E                     	ds	2
   721  000020                     calibrate@rangeArray:
   722                           	opt callstack 0
   723                           
   724                           ; 10 bytes @ 0x1F
   725  000020                     	ds	7
   726  000027                     capTouch@touch1:
   727                           	opt callstack 0
   728                           
   729                           ; 1 bytes @ 0x26
   730  000027                     	ds	1
   731  000028                     capTouch@touch2:
   732                           	opt callstack 0
   733                           
   734                           ; 1 bytes @ 0x27
   735  000028                     	ds	1
   736  000029                     capTouch@a:
   737                           	opt callstack 0
   738                           
   739                           ; 1 bytes @ 0x28
   740  000029                     	ds	1
   741  00002A                     calibrate@samples:
   742                           	opt callstack 0
   743                           
   744                           ; 1 bytes @ 0x29
   745  00002A                     	ds	1
   746  00002B                     calibrate@samples_1256:
   747                           	opt callstack 0
   748                           
   749                           ; 1 bytes @ 0x2A
   750  00002B                     	ds	1
   751  00002C                     calibrate@samples_1257:
   752                           	opt callstack 0
   753  00002C                     PRC@message2:
   754                           	opt callstack 0
   755                           
   756                           ; 5 bytes @ 0x2B
   757  00002C                     	ds	1
   758  00002D                     calibrate@samples_1258:
   759                           	opt callstack 0
   760                           
   761                           ; 1 bytes @ 0x2C
   762  00002D                     	ds	1
   763  00002E                     calibrate@samples_1259:
   764                           	opt callstack 0
   765                           
   766                           ; 1 bytes @ 0x2D
   767  00002E                     	ds	1
   768  00002F                     calibrate@a:
   769                           	opt callstack 0
   770                           
   771                           ; 1 bytes @ 0x2E
   772  00002F                     	ds	1
   773  000030                     calibrate@b:
   774                           	opt callstack 0
   775                           
   776                           ; 1 bytes @ 0x2F
   777  000030                     	ds	1
   778  000031                     calibrate@temp:
   779                           	opt callstack 0
   780  000031                     PRC@a:
   781                           	opt callstack 0
   782                           
   783                           ; 1 bytes @ 0x30
   784  000031                     	ds	1
   785  000032                     PRC@a_1266:
   786                           	opt callstack 0
   787                           
   788                           ; 1 bytes @ 0x31
   789  000032                     	ds	1
   790  000033                     PRC@a_1267:
   791                           	opt callstack 0
   792                           
   793                           ; 1 bytes @ 0x32
   794  000033                     	ds	1
   795  000034                     PRC@a_1268:
   796                           	opt callstack 0
   797                           
   798                           ; 1 bytes @ 0x33
   799  000034                     	ds	1
   800  000035                     PRC@a_1269:
   801                           	opt callstack 0
   802                           
   803                           ; 1 bytes @ 0x34
   804  000035                     	ds	1
   805  000036                     PRC@a_1270:
   806                           	opt callstack 0
   807                           
   808                           ; 1 bytes @ 0x35
   809  000036                     	ds	1
   810  000037                     PRC@a_1271:
   811                           	opt callstack 0
   812                           
   813                           ; 1 bytes @ 0x36
   814  000037                     	ds	1
   815  000038                     PRC@a_1272:
   816                           	opt callstack 0
   817                           
   818                           ; 1 bytes @ 0x37
   819  000038                     	ds	1
   820  000039                     PRC@a_1273:
   821                           	opt callstack 0
   822                           
   823                           ; 1 bytes @ 0x38
   824  000039                     	ds	1
   825  00003A                     ??_RCE:
   826                           
   827                           ; 1 bytes @ 0x39
   828  00003A                     	ds	2
   829  00003C                     RCE@message:
   830                           	opt callstack 0
   831                           
   832                           ; 14 bytes @ 0x3B
   833  00003C                     	ds	14
   834  00004A                     RCE@commandReceived:
   835                           	opt callstack 0
   836                           
   837                           ; 3 bytes @ 0x49
   838  00004A                     	ds	3
   839  00004D                     RCE@nCharsReceived:
   840                           	opt callstack 0
   841                           
   842                           ; 1 bytes @ 0x4C
   843  00004D                     	ds	1
   844  00004E                     RCE@a:
   845                           	opt callstack 0
   846                           
   847                           ; 1 bytes @ 0x4D
   848  00004E                     	ds	1
   849  00004F                     RCE@a_1463:
   850                           	opt callstack 0
   851                           
   852                           ; 1 bytes @ 0x4E
   853  00004F                     	ds	1
   854  000050                     
   855                           ; 1 bytes @ 0x4F
   856 ;;
   857 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   858 ;;
   859 ;; *************** function _main *****************
   860 ;; Defined at:
   861 ;;		line 96 in file "sanic.c"
   862 ;; Parameters:    Size  Location     Type
   863 ;;		None
   864 ;; Auto vars:     Size  Location     Type
   865 ;;		None
   866 ;; Return value:  Size  Location     Type
   867 ;;                  1    wreg      void 
   868 ;; Registers used:
   869 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   870 ;; Tracked objects:
   871 ;;		On entry : 0/0
   872 ;;		On exit  : 0/0
   873 ;;		Unchanged: 0/0
   874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   875 ;;      Params:         0       0       0       0       0       0       0
   876 ;;      Locals:         0       0       0       0       0       0       0
   877 ;;      Temps:          0       0       0       0       0       0       0
   878 ;;      Totals:         0       0       0       0       0       0       0
   879 ;;Total ram usage:        0 bytes
   880 ;; Hardware stack levels required when called:    5
   881 ;; This function calls:
   882 ;;		_RCE
   883 ;;		_init
   884 ;; This function is called by:
   885 ;;		Startup code after reset
   886 ;; This function uses a non-reentrant model
   887 ;;
   888                           
   889                           	psect	text0
   890  007000                     __ptext0:
   891                           	opt callstack 0
   892  007000                     _main:
   893                           	opt callstack 26
   894                           
   895                           ;sanic.c: 113:     init();
   896                           
   897                           ;incstack = 0
   898  007000  EC7A  F038         	call	_init	;wreg free
   899                           
   900                           ;sanic.c: 114:     RCE();
   901  007004  EC55  F03D         	call	_RCE	;wreg free
   902  007008                     l558:
   903  007008  D7FF               	goto	l558
   904  00700A                     __end_of_main:
   905                           	opt callstack 0
   906                           
   907 ;; *************** function _init *****************
   908 ;; Defined at:
   909 ;;		line 125 in file "sanic.c"
   910 ;; Parameters:    Size  Location     Type
   911 ;;		None
   912 ;; Auto vars:     Size  Location     Type
   913 ;;		None
   914 ;; Return value:  Size  Location     Type
   915 ;;                  1    wreg      void 
   916 ;; Registers used:
   917 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   918 ;; Tracked objects:
   919 ;;		On entry : 0/0
   920 ;;		On exit  : 0/0
   921 ;;		Unchanged: 0/0
   922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   923 ;;      Params:         0       0       0       0       0       0       0
   924 ;;      Locals:         0       0       0       0       0       0       0
   925 ;;      Temps:          0       0       0       0       0       0       0
   926 ;;      Totals:         0       0       0       0       0       0       0
   927 ;;Total ram usage:        0 bytes
   928 ;; Hardware stack levels used:    1
   929 ;; Hardware stack levels required when called:    2
   930 ;; This function calls:
   931 ;;		_clearPorts
   932 ;;		_readFromEEP
   933 ;;		_setupADC
   934 ;;		_setupOSC
   935 ;;		_setupSerial
   936 ;; This function is called by:
   937 ;;		_main
   938 ;; This function uses a non-reentrant model
   939 ;;
   940                           
   941                           	psect	text1
   942  0070F4                     __ptext1:
   943                           	opt callstack 0
   944  0070F4                     _init:
   945                           	opt callstack 28
   946                           
   947                           ;sanic.c: 126:     raceColor[3] = 1;
   948                           
   949                           ;incstack = 0
   950  0070F4  0E01               	movlw	1
   951  0070F6  0100               	movlb	0	; () banked
   952  0070F8  6FBD               	movwf	(_raceColor+3)& (0+255),b
   953                           
   954                           ; BSR set to: 0
   955                           ;sanic.c: 127:     setupOSC();
   956  0070FA  ECFB  F037         	call	_setupOSC	;wreg free
   957                           
   958                           ;sanic.c: 128:     clearPorts();
   959  0070FE  ECE8  F039         	call	_clearPorts	;wreg free
   960                           
   961                           ;sanic.c: 129:     setupSerial();
   962  007102  ECDB  F038         	call	_setupSerial	;wreg free
   963                           
   964                           ;sanic.c: 130:     setupADC();
   965  007106  ECA8  F038         	call	_setupADC	;wreg free
   966                           
   967                           ;sanic.c: 131:     readFromEEP();
   968  00710A  EC15  F03A         	call	_readFromEEP	;wreg free
   969  00710E  0012               	return		;funcret
   970  007110                     __end_of_init:
   971                           	opt callstack 0
   972                           
   973 ;; *************** function _setupSerial *****************
   974 ;; Defined at:
   975 ;;		line 97 in file "./functions.c"
   976 ;; Parameters:    Size  Location     Type
   977 ;;		None
   978 ;; Auto vars:     Size  Location     Type
   979 ;;		None
   980 ;; Return value:  Size  Location     Type
   981 ;;                  1    wreg      void 
   982 ;; Registers used:
   983 ;;		wreg, status,2
   984 ;; Tracked objects:
   985 ;;		On entry : 0/0
   986 ;;		On exit  : 0/0
   987 ;;		Unchanged: 0/0
   988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   989 ;;      Params:         0       0       0       0       0       0       0
   990 ;;      Locals:         0       0       0       0       0       0       0
   991 ;;      Temps:          0       0       0       0       0       0       0
   992 ;;      Totals:         0       0       0       0       0       0       0
   993 ;;Total ram usage:        0 bytes
   994 ;; Hardware stack levels used:    1
   995 ;; This function calls:
   996 ;;		Nothing
   997 ;; This function is called by:
   998 ;;		_init
   999 ;; This function uses a non-reentrant model
  1000 ;;
  1001                           
  1002                           	psect	text2
  1003  0071B6                     __ptext2:
  1004                           	opt callstack 0
  1005  0071B6                     _setupSerial:
  1006                           	opt callstack 29
  1007                           
  1008                           ;./functions.c: 99:     PIE1bits.RC1IE = 0;
  1009                           
  1010                           ;incstack = 0
  1011  0071B6  9A9D               	bcf	3997,5,c	;volatile
  1012                           
  1013                           ;./functions.c: 100:     PIE1bits.TX1IE = 0;
  1014  0071B8  989D               	bcf	3997,4,c	;volatile
  1015                           
  1016                           ;./functions.c: 101:     PIR1bits.RCIF = 0;
  1017  0071BA  9A9E               	bcf	3998,5,c	;volatile
  1018                           
  1019                           ;./functions.c: 103:     FSR0 = 0;
  1020  0071BC  0E00               	movlw	0
  1021  0071BE  6EEA               	movwf	fsr0h,c	;volatile
  1022  0071C0  0E00               	movlw	0
  1023  0071C2  6EE9               	movwf	fsr0l,c	;volatile
  1024                           
  1025                           ;./functions.c: 104:     TXSTA1 = 0b00100100;
  1026  0071C4  0E24               	movlw	36
  1027  0071C6  6EAC               	movwf	4012,c	;volatile
  1028                           
  1029                           ;./functions.c: 105:     RCSTA1 = 0b10010000;
  1030  0071C8  0E90               	movlw	144
  1031  0071CA  6EAB               	movwf	4011,c	;volatile
  1032                           
  1033                           ;./functions.c: 107:     SPBRG1 = 25;
  1034  0071CC  0E19               	movlw	25
  1035  0071CE  6EAF               	movwf	4015,c	;volatile
  1036                           
  1037                           ;./functions.c: 108:     SPBRGH1 = 0;
  1038  0071D0  0E00               	movlw	0
  1039  0071D2  6EB0               	movwf	4016,c	;volatile
  1040                           
  1041                           ;./functions.c: 109:     BAUDCON1bits.BRG16 = 0;
  1042  0071D4  96B8               	bcf	4024,3,c	;volatile
  1043                           
  1044                           ;./functions.c: 110:     TRISCbits.RC6 = 1;
  1045  0071D6  8C94               	bsf	3988,6,c	;volatile
  1046                           
  1047                           ;./functions.c: 111:     TRISCbits.RC7 = 1;
  1048  0071D8  8E94               	bsf	3988,7,c	;volatile
  1049                           
  1050                           ;./functions.c: 113:     PORTC = 0;
  1051  0071DA  0E00               	movlw	0
  1052  0071DC  6E82               	movwf	3970,c	;volatile
  1053                           
  1054                           ;./functions.c: 114:     ANSELC = 0;
  1055  0071DE  0E00               	movlw	0
  1056  0071E0  010F               	movlb	15	; () banked
  1057  0071E2  6F3A               	movwf	58,b	;volatile
  1058                           
  1059                           ; BSR set to: 15
  1060  0071E4  0012               	return		;funcret
  1061  0071E6                     __end_of_setupSerial:
  1062                           	opt callstack 0
  1063                           
  1064 ;; *************** function _setupOSC *****************
  1065 ;; Defined at:
  1066 ;;		line 91 in file "./functions.c"
  1067 ;; Parameters:    Size  Location     Type
  1068 ;;		None
  1069 ;; Auto vars:     Size  Location     Type
  1070 ;;		None
  1071 ;; Return value:  Size  Location     Type
  1072 ;;                  1    wreg      void 
  1073 ;; Registers used:
  1074 ;;		wreg, status,2
  1075 ;; Tracked objects:
  1076 ;;		On entry : 0/0
  1077 ;;		On exit  : 0/0
  1078 ;;		Unchanged: 0/0
  1079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1080 ;;      Params:         0       0       0       0       0       0       0
  1081 ;;      Locals:         0       0       0       0       0       0       0
  1082 ;;      Temps:          0       0       0       0       0       0       0
  1083 ;;      Totals:         0       0       0       0       0       0       0
  1084 ;;Total ram usage:        0 bytes
  1085 ;; Hardware stack levels used:    1
  1086 ;; This function calls:
  1087 ;;		Nothing
  1088 ;; This function is called by:
  1089 ;;		_init
  1090 ;; This function uses a non-reentrant model
  1091 ;;
  1092                           
  1093                           	psect	text3
  1094  006FF6                     __ptext3:
  1095                           	opt callstack 0
  1096  006FF6                     _setupOSC:
  1097                           	opt callstack 29
  1098                           
  1099                           ;./functions.c: 93:     OSCCONbits.IRCF = 0b101;
  1100                           
  1101                           ; BSR set to: 15
  1102                           ;incstack = 0
  1103  006FF6  50D3               	movf	4051,w,c	;volatile
  1104  006FF8  0B8F               	andlw	-113
  1105  006FFA  0950               	iorlw	80
  1106  006FFC  6ED3               	movwf	4051,c	;volatile
  1107  006FFE  0012               	return		;funcret
  1108  007000                     __end_of_setupOSC:
  1109                           	opt callstack 0
  1110                           
  1111 ;; *************** function _readFromEEP *****************
  1112 ;; Defined at:
  1113 ;;		line 920 in file "./functions.c"
  1114 ;; Parameters:    Size  Location     Type
  1115 ;;		None
  1116 ;; Auto vars:     Size  Location     Type
  1117 ;;  b               1   14[COMRAM] unsigned char 
  1118 ;;  a               1   13[COMRAM] unsigned char 
  1119 ;;  rs             10    2[COMRAM] PTR unsigned char [5]
  1120 ;;		 -> RRranges(5), Rranges(5), Mranges(5), Lranges(5), 
  1121 ;;		 -> LLranges(5), 
  1122 ;;  address         1   12[COMRAM] unsigned char 
  1123 ;; Return value:  Size  Location     Type
  1124 ;;                  1    wreg      void 
  1125 ;; Registers used:
  1126 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1127 ;; Tracked objects:
  1128 ;;		On entry : 0/0
  1129 ;;		On exit  : 0/0
  1130 ;;		Unchanged: 0/0
  1131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1132 ;;      Params:         0       0       0       0       0       0       0
  1133 ;;      Locals:        13       0       0       0       0       0       0
  1134 ;;      Temps:          2       0       0       0       0       0       0
  1135 ;;      Totals:        15       0       0       0       0       0       0
  1136 ;;Total ram usage:       15 bytes
  1137 ;; Hardware stack levels used:    1
  1138 ;; Hardware stack levels required when called:    1
  1139 ;; This function calls:
  1140 ;;		_EE_READ
  1141 ;; This function is called by:
  1142 ;;		_init
  1143 ;; This function uses a non-reentrant model
  1144 ;;
  1145                           
  1146                           	psect	text4
  1147  00742A                     __ptext4:
  1148                           	opt callstack 0
  1149  00742A                     _readFromEEP:
  1150                           	opt callstack 28
  1151                           
  1152                           ;./functions.c: 921:     unsigned char* rs[] = {LLranges, Lranges, Mranges, Rranges, RRr
      +                          anges};
  1153                           
  1154                           ;incstack = 0
  1155  00742A  EE20  F088         	lfsr	2,readFromEEP@F6099
  1156  00742E  EE10  F003         	lfsr	1,readFromEEP@rs
  1157  007432  0E09               	movlw	9
  1158  007434                     u2141:
  1159  007434  CFDB FFE3          	movff	plusw2,plusw1
  1160  007438  06E8               	decf	wreg,f,c
  1161  00743A  E2FC               	bc	u2141
  1162                           
  1163                           ;./functions.c: 922:     unsigned char address = 0;
  1164  00743C  0E00               	movlw	0
  1165  00743E  6E0D               	movwf	readFromEEP@address,c
  1166                           
  1167                           ;./functions.c: 923:     EECON1bits.RD = 1;
  1168  007440  80A6               	bsf	4006,0,c	;volsfr
  1169                           
  1170                           ;./functions.c: 925:     for (unsigned char a = 0; a < 5; a++){
  1171  007442  0E00               	movlw	0
  1172  007444  6E0E               	movwf	readFromEEP@a,c
  1173  007446                     l3499:
  1174                           
  1175                           ;./functions.c: 926:         for (unsigned char b = 0; b< 5; b++){
  1176  007446  0E00               	movlw	0
  1177  007448  6E0F               	movwf	readFromEEP@b,c
  1178  00744A                     l528:
  1179                           
  1180                           ;./functions.c: 927:             EEADR = address++;
  1181  00744A  C00D  FFA9         	movff	readFromEEP@address,4009	;volatile
  1182  00744E  2A0D               	incf	readFromEEP@address,f,c
  1183                           
  1184                           ;./functions.c: 928:             rs[a][b] = EE_READ();
  1185  007450  500E               	movf	readFromEEP@a,w,c
  1186  007452  0D02               	mullw	2
  1187  007454  0E03               	movlw	low readFromEEP@rs
  1188  007456  24F3               	addwf	prodl,w,c
  1189  007458  6ED9               	movwf	fsr2l,c
  1190  00745A  0E00               	movlw	high readFromEEP@rs
  1191  00745C  20F4               	addwfc	prodh,w,c
  1192  00745E  6EDA               	movwf	fsr2h,c
  1193  007460  CFDE F001          	movff	postinc2,??_readFromEEP
  1194  007464  CFDD F002          	movff	postdec2,??_readFromEEP+1
  1195  007468  500F               	movf	readFromEEP@b,w,c
  1196  00746A  2401               	addwf	??_readFromEEP,w,c
  1197  00746C  6ED9               	movwf	fsr2l,c
  1198  00746E  0E00               	movlw	0
  1199  007470  2002               	addwfc	??_readFromEEP+1,w,c
  1200  007472  6EDA               	movwf	fsr2h,c
  1201  007474  ECF6  F037         	call	_EE_READ	;wreg free
  1202  007478  6EDF               	movwf	indf2,c
  1203                           
  1204                           ;./functions.c: 929:         }
  1205  00747A  2A0F               	incf	readFromEEP@b,f,c
  1206  00747C  0E04               	movlw	4
  1207  00747E  640F               	cpfsgt	readFromEEP@b,c
  1208  007480  D7E4               	goto	l528
  1209                           
  1210                           ;./functions.c: 930:     }
  1211  007482  2A0E               	incf	readFromEEP@a,f,c
  1212  007484  0E04               	movlw	4
  1213  007486  640E               	cpfsgt	readFromEEP@a,c
  1214  007488  D7DE               	goto	l3499
  1215  00748A  0012               	return	
  1216  00748C                     __end_of_readFromEEP:
  1217                           	opt callstack 0
  1218                           
  1219 ;; *************** function _EE_READ *****************
  1220 ;; Defined at:
  1221 ;;		line 934 in file "./functions.c"
  1222 ;; Parameters:    Size  Location     Type
  1223 ;;		None
  1224 ;; Auto vars:     Size  Location     Type
  1225 ;;		None
  1226 ;; Return value:  Size  Location     Type
  1227 ;;                  1    wreg      unsigned char 
  1228 ;; Registers used:
  1229 ;;		wreg, status,2
  1230 ;; Tracked objects:
  1231 ;;		On entry : 0/0
  1232 ;;		On exit  : 0/0
  1233 ;;		Unchanged: 0/0
  1234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1235 ;;      Params:         0       0       0       0       0       0       0
  1236 ;;      Locals:         0       0       0       0       0       0       0
  1237 ;;      Temps:          0       0       0       0       0       0       0
  1238 ;;      Totals:         0       0       0       0       0       0       0
  1239 ;;Total ram usage:        0 bytes
  1240 ;; Hardware stack levels used:    1
  1241 ;; This function calls:
  1242 ;;		Nothing
  1243 ;; This function is called by:
  1244 ;;		_readFromEEP
  1245 ;; This function uses a non-reentrant model
  1246 ;;
  1247                           
  1248                           	psect	text5
  1249  006FEC                     __ptext5:
  1250                           	opt callstack 0
  1251  006FEC                     _EE_READ:
  1252                           	opt callstack 28
  1253                           
  1254                           ;./functions.c: 935:     EECON1bits.EEPGD = 0;
  1255                           
  1256                           ;incstack = 0
  1257  006FEC  9EA6               	bcf	4006,7,c	;volsfr
  1258                           
  1259                           ;./functions.c: 936:     EECON1bits.CFGS = 0;
  1260  006FEE  9CA6               	bcf	4006,6,c	;volsfr
  1261                           
  1262                           ;./functions.c: 937:     EECON1bits.RD = 1;
  1263  006FF0  80A6               	bsf	4006,0,c	;volsfr
  1264                           
  1265                           ;./functions.c: 938:     return(EEDATA);
  1266  006FF2  50A8               	movf	4008,w,c	;volatile
  1267  006FF4  0012               	return		;funcret
  1268  006FF6                     __end_of_EE_READ:
  1269                           	opt callstack 0
  1270                           
  1271 ;; *************** function _clearPorts *****************
  1272 ;; Defined at:
  1273 ;;		line 60 in file "./functions.c"
  1274 ;; Parameters:    Size  Location     Type
  1275 ;;		None
  1276 ;; Auto vars:     Size  Location     Type
  1277 ;;		None
  1278 ;; Return value:  Size  Location     Type
  1279 ;;                  1    wreg      void 
  1280 ;; Registers used:
  1281 ;;		wreg, status,2
  1282 ;; Tracked objects:
  1283 ;;		On entry : 0/0
  1284 ;;		On exit  : 0/0
  1285 ;;		Unchanged: 0/0
  1286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1287 ;;      Params:         0       0       0       0       0       0       0
  1288 ;;      Locals:         0       0       0       0       0       0       0
  1289 ;;      Temps:          0       0       0       0       0       0       0
  1290 ;;      Totals:         0       0       0       0       0       0       0
  1291 ;;Total ram usage:        0 bytes
  1292 ;; Hardware stack levels used:    1
  1293 ;; This function calls:
  1294 ;;		Nothing
  1295 ;; This function is called by:
  1296 ;;		_init
  1297 ;; This function uses a non-reentrant model
  1298 ;;
  1299                           
  1300                           	psect	text6
  1301  0073D0                     __ptext6:
  1302                           	opt callstack 0
  1303  0073D0                     _clearPorts:
  1304                           	opt callstack 29
  1305                           
  1306                           ;./functions.c: 62:     PORTA = 0;
  1307                           
  1308                           ;incstack = 0
  1309  0073D0  0E00               	movlw	0
  1310  0073D2  6E80               	movwf	3968,c	;volatile
  1311                           
  1312                           ;./functions.c: 63:     LATA = 0;
  1313  0073D4  0E00               	movlw	0
  1314  0073D6  6E89               	movwf	3977,c	;volatile
  1315                           
  1316                           ;./functions.c: 64:     TRISA = 0;
  1317  0073D8  0E00               	movlw	0
  1318  0073DA  6E92               	movwf	3986,c	;volatile
  1319                           
  1320                           ;./functions.c: 65:     ANSELA = 0;
  1321  0073DC  0E00               	movlw	0
  1322  0073DE  010F               	movlb	15	; () banked
  1323  0073E0  6F38               	movwf	56,b	;volatile
  1324                           
  1325                           ;./functions.c: 67:     PORTB = 0;
  1326  0073E2  0E00               	movlw	0
  1327  0073E4  6E81               	movwf	3969,c	;volatile
  1328                           
  1329                           ;./functions.c: 68:     LATB = 0;
  1330  0073E6  0E00               	movlw	0
  1331  0073E8  6E8A               	movwf	3978,c	;volatile
  1332                           
  1333                           ;./functions.c: 69:     TRISB = 0;
  1334  0073EA  0E00               	movlw	0
  1335  0073EC  6E93               	movwf	3987,c	;volatile
  1336                           
  1337                           ;./functions.c: 70:     ANSELB = 0;
  1338  0073EE  0E00               	movlw	0
  1339  0073F0  6F39               	movwf	57,b	;volatile
  1340                           
  1341                           ;./functions.c: 72:     PORTC = 0;
  1342  0073F2  0E00               	movlw	0
  1343  0073F4  6E82               	movwf	3970,c	;volatile
  1344                           
  1345                           ;./functions.c: 73:     LATC = 0;
  1346  0073F6  0E00               	movlw	0
  1347  0073F8  6E8B               	movwf	3979,c	;volatile
  1348                           
  1349                           ;./functions.c: 74:     TRISC = 0;
  1350  0073FA  0E00               	movlw	0
  1351  0073FC  6E94               	movwf	3988,c	;volatile
  1352                           
  1353                           ;./functions.c: 75:     ANSELC = 0;
  1354  0073FE  0E00               	movlw	0
  1355  007400  6F3A               	movwf	58,b	;volatile
  1356                           
  1357                           ;./functions.c: 77:     PORTD = 0;
  1358  007402  0E00               	movlw	0
  1359  007404  6E83               	movwf	3971,c	;volatile
  1360                           
  1361                           ;./functions.c: 78:     LATD = 0;
  1362  007406  0E00               	movlw	0
  1363  007408  6E8C               	movwf	3980,c	;volatile
  1364                           
  1365                           ;./functions.c: 79:     TRISD = 0;
  1366  00740A  0E00               	movlw	0
  1367  00740C  6E95               	movwf	3989,c	;volatile
  1368                           
  1369                           ;./functions.c: 80:     ANSELD = 0;
  1370  00740E  0E00               	movlw	0
  1371  007410  6F3B               	movwf	59,b	;volatile
  1372                           
  1373                           ;./functions.c: 82:     PORTE = 0;
  1374  007412  0E00               	movlw	0
  1375  007414  6E84               	movwf	3972,c	;volatile
  1376                           
  1377                           ;./functions.c: 83:     LATE = 0;
  1378  007416  0E00               	movlw	0
  1379  007418  6E8D               	movwf	3981,c	;volatile
  1380                           
  1381                           ;./functions.c: 84:     TRISE = 0;
  1382  00741A  0E00               	movlw	0
  1383  00741C  6E96               	movwf	3990,c	;volatile
  1384                           
  1385                           ;./functions.c: 85:     ANSELE = 0;
  1386  00741E  0E00               	movlw	0
  1387  007420  6F3C               	movwf	60,b	;volatile
  1388                           
  1389                           ;./functions.c: 86:     raceColor[3] = 1;
  1390  007422  0E01               	movlw	1
  1391  007424  0100               	movlb	0	; () banked
  1392  007426  6FBD               	movwf	(_raceColor+3)& (0+255),b
  1393                           
  1394                           ; BSR set to: 0
  1395  007428  0012               	return		;funcret
  1396  00742A                     __end_of_clearPorts:
  1397                           	opt callstack 0
  1398                           
  1399 ;; *************** function _RCE *****************
  1400 ;; Defined at:
  1401 ;;		line 134 in file "sanic.c"
  1402 ;; Parameters:    Size  Location     Type
  1403 ;;		None
  1404 ;; Auto vars:     Size  Location     Type
  1405 ;;  a               1   78[COMRAM] unsigned char 
  1406 ;;  a               1   77[COMRAM] unsigned char 
  1407 ;;  message        14   59[COMRAM] unsigned char [14]
  1408 ;;  commandRecei    3   73[COMRAM] unsigned char [3]
  1409 ;;  nCharsReceiv    1   76[COMRAM] unsigned char 
  1410 ;; Return value:  Size  Location     Type
  1411 ;;                  1    wreg      void 
  1412 ;; Registers used:
  1413 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1414 ;; Tracked objects:
  1415 ;;		On entry : 0/0
  1416 ;;		On exit  : 0/0
  1417 ;;		Unchanged: 0/0
  1418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1419 ;;      Params:         0       0       0       0       0       0       0
  1420 ;;      Locals:        20       0       0       0       0       0       0
  1421 ;;      Temps:          2       0       0       0       0       0       0
  1422 ;;      Totals:        22       0       0       0       0       0       0
  1423 ;;Total ram usage:       22 bytes
  1424 ;; Hardware stack levels used:    1
  1425 ;; Hardware stack levels required when called:    4
  1426 ;; This function calls:
  1427 ;;		_PRC
  1428 ;;		_calibrate
  1429 ;;		_capTouch
  1430 ;;		_error
  1431 ;;		_navigate
  1432 ;;		_pyCal
  1433 ;;		_trans
  1434 ;; This function is called by:
  1435 ;;		_main
  1436 ;; This function uses a non-reentrant model
  1437 ;;
  1438                           
  1439                           	psect	text7
  1440  007AAA                     __ptext7:
  1441                           	opt callstack 0
  1442  007AAA                     _RCE:
  1443                           	opt callstack 26
  1444                           
  1445                           ;sanic.c: 136:         PORTD = 0b10100100;
  1446                           
  1447                           ; BSR set to: 0
  1448                           ;incstack = 0
  1449                           ;sanic.c: 135:     while(1){
  1450  007AAA  0EA4               	movlw	164
  1451  007AAC  6E83               	movwf	3971,c	;volatile
  1452                           
  1453                           ;sanic.c: 138:         unsigned char message[] = "\nSanic races ";
  1454  007AAE  EE20  F07A         	lfsr	2,RCE@F6118
  1455  007AB2  EE10  F03C         	lfsr	1,RCE@message
  1456  007AB6  0E0D               	movlw	13
  1457  007AB8                     u2171:
  1458  007AB8  CFDB FFE3          	movff	plusw2,plusw1
  1459  007ABC  06E8               	decf	wreg,f,c
  1460  007ABE  E2FC               	bc	u2171
  1461                           
  1462                           ;sanic.c: 140:         for (unsigned char a = 0; a < 13; a++)
  1463  007AC0  0E00               	movlw	0
  1464  007AC2  6E4E               	movwf	RCE@a,c
  1465  007AC4                     l3539:
  1466                           
  1467                           ;sanic.c: 141:         {;sanic.c: 142:             trans(message[a]);
  1468  007AC4  0E3C               	movlw	low RCE@message
  1469  007AC6  244E               	addwf	RCE@a,w,c
  1470  007AC8  6ED9               	movwf	fsr2l,c
  1471  007ACA  6ADA               	clrf	fsr2h,c
  1472  007ACC  0E00               	movlw	high RCE@message
  1473  007ACE  22DA               	addwfc	fsr2h,f,c
  1474  007AD0  50DF               	movf	indf2,w,c
  1475  007AD2  EC05  F038         	call	_trans
  1476                           
  1477                           ;sanic.c: 143:         }
  1478  007AD6  2A4E               	incf	RCE@a,f,c
  1479  007AD8  0E0C               	movlw	12
  1480  007ADA  644E               	cpfsgt	RCE@a,c
  1481  007ADC  D7F3               	goto	l3539
  1482                           
  1483                           ;sanic.c: 145:         if (raceColor[3] == 1){
  1484  007ADE  0100               	movlb	0	; () banked
  1485  007AE0  05BD               	decf	(_raceColor+3)& (0+255),w,b
  1486  007AE2  A4D8               	btfss	status,2,c
  1487  007AE4  D004               	goto	l3549
  1488                           
  1489                           ; BSR set to: 0
  1490                           ;sanic.c: 146:             trans('B');
  1491  007AE6  0E42               	movlw	66
  1492  007AE8  EC05  F038         	call	_trans
  1493                           
  1494                           ;sanic.c: 147:         }
  1495  007AEC  D011               	goto	l573
  1496  007AEE                     l3549:
  1497                           
  1498                           ; BSR set to: 0
  1499  007AEE  05BC               	decf	(_raceColor+2)& (0+255),w,b
  1500  007AF0  A4D8               	btfss	status,2,c
  1501  007AF2  D004               	goto	l3553
  1502                           
  1503                           ; BSR set to: 0
  1504                           ;sanic.c: 149:             trans('R');
  1505  007AF4  0E52               	movlw	82
  1506  007AF6  EC05  F038         	call	_trans
  1507                           
  1508                           ;sanic.c: 150:         }
  1509  007AFA  D00A               	goto	l573
  1510  007AFC                     l3553:
  1511                           
  1512                           ; BSR set to: 0
  1513  007AFC  05BB               	decf	(_raceColor+1)& (0+255),w,b
  1514  007AFE  A4D8               	btfss	status,2,c
  1515  007B00  D004               	goto	l3557
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;sanic.c: 152:             trans('G');
  1519  007B02  0E47               	movlw	71
  1520  007B04  EC05  F038         	call	_trans
  1521                           
  1522                           ;sanic.c: 153:         }
  1523  007B08  D003               	goto	l573
  1524  007B0A                     l3557:
  1525                           
  1526                           ; BSR set to: 0
  1527                           ;sanic.c: 155:             trans('n');
  1528  007B0A  0E6E               	movlw	110
  1529  007B0C  EC05  F038         	call	_trans
  1530  007B10                     l573:
  1531                           
  1532                           ;sanic.c: 157:         trans('\n');
  1533  007B10  0E0A               	movlw	10
  1534  007B12  EC05  F038         	call	_trans
  1535                           
  1536                           ;sanic.c: 160:         INTCONbits.GIE = 0;
  1537  007B16  9EF2               	bcf	4082,7,c	;volatile
  1538                           
  1539                           ;sanic.c: 161:         INTCONbits.PEIE = 0;
  1540  007B18  9CF2               	bcf	4082,6,c	;volatile
  1541                           
  1542                           ;sanic.c: 162:         unsigned char nCharsReceived = 0;
  1543  007B1A  0E00               	movlw	0
  1544  007B1C  6E4D               	movwf	RCE@nCharsReceived,c
  1545                           
  1546                           ;sanic.c: 163:         unsigned char commandReceived[3];;sanic.c: 165:         while(nCh
      +                          arsReceived < 3){
  1547  007B1E  D00B               	goto	l3569
  1548  007B20                     l579:
  1549                           
  1550                           ;sanic.c: 166:             if (PIR1bits.RC1IF){
  1551  007B20  AA9E               	btfss	3998,5,c	;volatile
  1552  007B22  D009               	goto	l3569
  1553                           
  1554                           ;sanic.c: 167:                 commandReceived[nCharsReceived] = RCREG;
  1555  007B24  0E4A               	movlw	low RCE@commandReceived
  1556  007B26  244D               	addwf	RCE@nCharsReceived,w,c
  1557  007B28  6ED9               	movwf	fsr2l,c
  1558  007B2A  6ADA               	clrf	fsr2h,c
  1559  007B2C  0E00               	movlw	high RCE@commandReceived
  1560  007B2E  22DA               	addwfc	fsr2h,f,c
  1561  007B30  CFAE FFDF          	movff	4014,indf2	;volatile
  1562                           
  1563                           ;sanic.c: 168:                 nCharsReceived++;
  1564  007B34  2A4D               	incf	RCE@nCharsReceived,f,c
  1565  007B36                     l3569:
  1566                           
  1567                           ;sanic.c: 165:         while(nCharsReceived < 3){
  1568  007B36  0E02               	movlw	2
  1569  007B38  644D               	cpfsgt	RCE@nCharsReceived,c
  1570  007B3A  D7F2               	goto	l579
  1571  007B3C  D012               	goto	l3585
  1572  007B3E                     l3571:
  1573                           
  1574                           ;sanic.c: 176:             capTouch();
  1575  007B3E  EC78  F03A         	call	_capTouch	;wreg free
  1576                           
  1577                           ;sanic.c: 177:             break;
  1578  007B42  D027               	goto	l3587
  1579  007B44                     l3573:
  1580                           
  1581                           ;sanic.c: 179:             PRC();
  1582  007B44  ECD8  F03D         	call	_PRC	;wreg free
  1583                           
  1584                           ;sanic.c: 180:             break;
  1585  007B48  D024               	goto	l3587
  1586  007B4A                     l3575:
  1587                           
  1588                           ;sanic.c: 182:             navigate();
  1589  007B4A  EC93  F039         	call	_navigate	;wreg free
  1590                           
  1591                           ;sanic.c: 183:             break;
  1592  007B4E  D021               	goto	l3587
  1593  007B50                     l3577:
  1594                           
  1595                           ;sanic.c: 185:             pyCal();
  1596  007B50  EC6C  F039         	call	_pyCal	;wreg free
  1597                           
  1598                           ;sanic.c: 186:             break;
  1599  007B54  D01E               	goto	l3587
  1600  007B56                     l3579:
  1601                           
  1602                           ;sanic.c: 188:             calibrate();
  1603  007B56  ECA2  F03E         	call	_calibrate	;wreg free
  1604                           
  1605                           ;sanic.c: 189:             break;
  1606  007B5A  D01B               	goto	l3587
  1607  007B5C                     l3581:
  1608                           
  1609                           ;sanic.c: 192:             error();
  1610  007B5C  EC0C  F039         	call	_error	;wreg free
  1611                           
  1612                           ;sanic.c: 193:             break;
  1613  007B60  D018               	goto	l3587
  1614  007B62                     l3585:
  1615  007B62  504A               	movf	RCE@commandReceived,w,c
  1616  007B64  6E3A               	movwf	??_RCE& (0+255),c
  1617  007B66  6A3B               	clrf	(??_RCE+1)& (0+255),c
  1618                           
  1619                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1620                           ; Switch size 1, requested type "simple"
  1621                           ; Number of cases is 1, Range of values is 0 to 0
  1622                           ; switch strategies available:
  1623                           ; Name         Instructions Cycles
  1624                           ; simple_byte            4     3 (average)
  1625                           ;	Chosen strategy is simple_byte
  1626  007B68  503B               	movf	??_RCE+1,w,c
  1627  007B6A  0A00               	xorlw	0	; case 0
  1628  007B6C  A4D8               	btfss	status,2,c
  1629  007B6E  D7F6               	goto	l3581
  1630                           
  1631                           ; Switch size 1, requested type "simple"
  1632                           ; Number of cases is 5, Range of values is 67 to 82
  1633                           ; switch strategies available:
  1634                           ; Name         Instructions Cycles
  1635                           ; simple_byte           16     9 (average)
  1636                           ;	Chosen strategy is simple_byte
  1637  007B70  503A               	movf	??_RCE,w,c
  1638  007B72  0A43               	xorlw	67	; case 67
  1639  007B74  B4D8               	btfsc	status,2,c
  1640  007B76  D7EF               	goto	l3579
  1641  007B78  0A0D               	xorlw	13	; case 78
  1642  007B7A  B4D8               	btfsc	status,2,c
  1643  007B7C  D7E6               	goto	l3575
  1644  007B7E  0A1E               	xorlw	30	; case 80
  1645  007B80  B4D8               	btfsc	status,2,c
  1646  007B82  D7E0               	goto	l3573
  1647  007B84  0A01               	xorlw	1	; case 81
  1648  007B86  B4D8               	btfsc	status,2,c
  1649  007B88  D7E3               	goto	l3577
  1650  007B8A  0A03               	xorlw	3	; case 82
  1651  007B8C  B4D8               	btfsc	status,2,c
  1652  007B8E  D7D7               	goto	l3571
  1653  007B90  D7E5               	goto	l3581
  1654  007B92                     l3587:
  1655                           
  1656                           ;sanic.c: 196:         for (unsigned char a = 0; a < 3; a++){
  1657  007B92  0E00               	movlw	0
  1658  007B94  6E4F               	movwf	RCE@a_1463,c
  1659  007B96                     l3593:
  1660                           
  1661                           ;sanic.c: 197:             commandReceived[a] = 0;
  1662  007B96  0E4A               	movlw	low RCE@commandReceived
  1663  007B98  244F               	addwf	RCE@a_1463,w,c
  1664  007B9A  6ED9               	movwf	fsr2l,c
  1665  007B9C  6ADA               	clrf	fsr2h,c
  1666  007B9E  0E00               	movlw	high RCE@commandReceived
  1667  007BA0  22DA               	addwfc	fsr2h,f,c
  1668  007BA2  0E00               	movlw	0
  1669  007BA4  6EDF               	movwf	indf2,c
  1670                           
  1671                           ;sanic.c: 198:         }
  1672  007BA6  2A4F               	incf	RCE@a_1463,f,c
  1673  007BA8  0E02               	movlw	2
  1674  007BAA  644F               	cpfsgt	RCE@a_1463,c
  1675  007BAC  D7F4               	goto	l3593
  1676  007BAE  D77D               	goto	_RCE
  1677  007BB0                     __end_of_RCE:
  1678                           	opt callstack 0
  1679                           
  1680 ;; *************** function _pyCal *****************
  1681 ;; Defined at:
  1682 ;;		line 398 in file "./functions.c"
  1683 ;; Parameters:    Size  Location     Type
  1684 ;;		None
  1685 ;; Auto vars:     Size  Location     Type
  1686 ;;  a               1   19[COMRAM] unsigned char 
  1687 ;;  done            1    0        unsigned char 
  1688 ;; Return value:  Size  Location     Type
  1689 ;;                  1    wreg      void 
  1690 ;; Registers used:
  1691 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1692 ;; Tracked objects:
  1693 ;;		On entry : 0/0
  1694 ;;		On exit  : 0/0
  1695 ;;		Unchanged: 0/0
  1696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1697 ;;      Params:         0       0       0       0       0       0       0
  1698 ;;      Locals:         2       0       0       0       0       0       0
  1699 ;;      Temps:          0       0       0       0       0       0       0
  1700 ;;      Totals:         2       0       0       0       0       0       0
  1701 ;;Total ram usage:        2 bytes
  1702 ;; Hardware stack levels used:    1
  1703 ;; Hardware stack levels required when called:    3
  1704 ;; This function calls:
  1705 ;;		_msDelay
  1706 ;;		_readAllSensors
  1707 ;;		_setupADC
  1708 ;;		_trans
  1709 ;; This function is called by:
  1710 ;;		_RCE
  1711 ;; This function uses a non-reentrant model
  1712 ;;
  1713                           
  1714                           	psect	text8
  1715  0072D8                     __ptext8:
  1716                           	opt callstack 0
  1717  0072D8                     _pyCal:
  1718                           	opt callstack 26
  1719                           
  1720                           ;./functions.c: 400:     setupADC();
  1721                           
  1722                           ;incstack = 0
  1723  0072D8  ECA8  F038         	call	_setupADC	;wreg free
  1724                           
  1725                           ;./functions.c: 401:     PORTD = 0b00001100;
  1726  0072DC  0E0C               	movlw	12
  1727  0072DE  6E83               	movwf	3971,c	;volatile
  1728  0072E0                     
  1729                           ;./functions.c: 405:     {;./functions.c: 406:         msDelay(10);
  1730  0072E0  0E0A               	movlw	10
  1731  0072E2  EC88  F038         	call	_msDelay
  1732                           
  1733                           ;./functions.c: 407:         readAllSensors();
  1734  0072E6  ECFA  F03B         	call	_readAllSensors	;wreg free
  1735                           
  1736                           ;./functions.c: 408:         for (a = 0; a < 5; a++){
  1737  0072EA  0E00               	movlw	0
  1738  0072EC  6E14               	movwf	pyCal@a,c
  1739  0072EE                     l3411:
  1740                           
  1741                           ;./functions.c: 409:             trans(sensorVals[a]);
  1742  0072EE  0E50               	movlw	low _sensorVals
  1743  0072F0  2414               	addwf	pyCal@a,w,c
  1744  0072F2  6ED9               	movwf	fsr2l,c
  1745  0072F4  6ADA               	clrf	fsr2h,c
  1746  0072F6  0E00               	movlw	high _sensorVals
  1747  0072F8  22DA               	addwfc	fsr2h,f,c
  1748  0072FA  50DF               	movf	indf2,w,c
  1749  0072FC  EC05  F038         	call	_trans
  1750                           
  1751                           ;./functions.c: 410:         }
  1752  007300  2A14               	incf	pyCal@a,f,c
  1753  007302  0E04               	movlw	4
  1754  007304  6414               	cpfsgt	pyCal@a,c
  1755  007306  D7F3               	goto	l3411
  1756                           
  1757                           ;./functions.c: 411:         trans('\n');
  1758  007308  0E0A               	movlw	10
  1759  00730A  EC05  F038         	call	_trans
  1760                           
  1761                           ;./functions.c: 413:         if (PIR1bits.RC1IF)
  1762  00730E  AA9E               	btfss	3998,5,c	;volatile
  1763  007310  D7E7               	goto	l3397
  1764                           
  1765                           ;./functions.c: 414:         {;./functions.c: 415:             PIR1bits.RC1IF = 0;
  1766  007312  9A9E               	bcf	3998,5,c	;volatile
  1767                           
  1768                           ;./functions.c: 416:             if (RCREG == 'S' || RCREG == 's')
  1769  007314  0E53               	movlw	83
  1770  007316  18AE               	xorwf	4014,w,c	;volatile
  1771  007318  B4D8               	btfsc	status,2,c
  1772  00731A  0012               	return	
  1773  00731C  0E73               	movlw	115
  1774  00731E  18AE               	xorwf	4014,w,c	;volatile
  1775  007320  B4D8               	btfsc	status,2,c
  1776  007322  0012               	return	
  1777  007324  D7DD               	goto	l3397
  1778  007326                     __end_of_pyCal:
  1779                           	opt callstack 0
  1780                           
  1781 ;; *************** function _navigate *****************
  1782 ;; Defined at:
  1783 ;;		line 424 in file "./functions.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;		None
  1786 ;; Auto vars:     Size  Location     Type
  1787 ;;		None
  1788 ;; Return value:  Size  Location     Type
  1789 ;;                  1    wreg      void 
  1790 ;; Registers used:
  1791 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1792 ;; Tracked objects:
  1793 ;;		On entry : 0/0
  1794 ;;		On exit  : 0/0
  1795 ;;		Unchanged: 0/0
  1796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1797 ;;      Params:         0       0       0       0       0       0       0
  1798 ;;      Locals:         0       0       0       0       0       0       0
  1799 ;;      Temps:          0       0       0       0       0       0       0
  1800 ;;      Totals:         0       0       0       0       0       0       0
  1801 ;;Total ram usage:        0 bytes
  1802 ;; Hardware stack levels used:    1
  1803 ;; Hardware stack levels required when called:    3
  1804 ;; This function calls:
  1805 ;;		_classifyColors
  1806 ;;		_determineDirection
  1807 ;;		_displayColorDetected
  1808 ;;		_displayRaceColor
  1809 ;;		_msDelay
  1810 ;;		_readAllSensors
  1811 ;;		_setupADC
  1812 ;;		_setupPWMLeft
  1813 ;;		_setupPWMRight
  1814 ;;		_stopMotors
  1815 ;;		_testBlack
  1816 ;; This function is called by:
  1817 ;;		_RCE
  1818 ;; This function uses a non-reentrant model
  1819 ;;
  1820                           
  1821                           	psect	text9
  1822  007326                     __ptext9:
  1823                           	opt callstack 0
  1824  007326                     _navigate:
  1825                           	opt callstack 26
  1826                           
  1827                           ;./functions.c: 425:     displayRaceColor();
  1828                           
  1829                           ;incstack = 0
  1830  007326  EC27  F039         	call	_displayRaceColor	;wreg free
  1831                           
  1832                           ;./functions.c: 426:     setupPWMLeft();
  1833  00732A  ECB9  F038         	call	_setupPWMLeft	;wreg free
  1834                           
  1835                           ;./functions.c: 427:     setupPWMRight();
  1836  00732E  ECCA  F038         	call	_setupPWMRight	;wreg free
  1837                           
  1838                           ;./functions.c: 428:     setupADC();
  1839  007332  ECA8  F038         	call	_setupADC	;wreg free
  1840  007336                     l3429:
  1841                           
  1842                           ;./functions.c: 430:         readAllSensors();
  1843  007336  ECFA  F03B         	call	_readAllSensors	;wreg free
  1844                           
  1845                           ;./functions.c: 431:         classifyColors();
  1846  00733A  ECDB  F03C         	call	_classifyColors	;wreg free
  1847                           
  1848                           ;./functions.c: 432:         displayColorDetected(2);
  1849  00733E  0E02               	movlw	2
  1850  007340  EC71  F03B         	call	_displayColorDetected
  1851                           
  1852                           ;./functions.c: 433:         determineDirection();
  1853  007344  ECEE  F037         	call	_determineDirection	;wreg free
  1854                           
  1855                           ;./functions.c: 434:         msDelay(50);
  1856  007348  0E32               	movlw	50
  1857  00734A  EC88  F038         	call	_msDelay
  1858                           
  1859                           ;./functions.c: 437:         if (PIR1bits.RC1IF)
  1860  00734E  AA9E               	btfss	3998,5,c	;volatile
  1861  007350  D00C               	goto	l3451
  1862                           
  1863                           ;./functions.c: 438:         {;./functions.c: 439:             PIR1bits.RC1IF = 0;
  1864  007352  9A9E               	bcf	3998,5,c	;volatile
  1865                           
  1866                           ;./functions.c: 440:             if (RCREG == 'S' || RCREG == 's')
  1867  007354  0E53               	movlw	83
  1868  007356  18AE               	xorwf	4014,w,c	;volatile
  1869  007358  B4D8               	btfsc	status,2,c
  1870  00735A  D004               	goto	u2090
  1871  00735C  0E73               	movlw	115
  1872  00735E  18AE               	xorwf	4014,w,c	;volatile
  1873  007360  A4D8               	btfss	status,2,c
  1874  007362  D7E9               	goto	l3429
  1875  007364                     u2090:
  1876                           
  1877                           ;./functions.c: 441:             {;./functions.c: 442:                 stopMotors();
  1878  007364  EC18  F038         	call	_stopMotors	;wreg free
  1879  007368  0012               	return	
  1880  00736A                     l3451:
  1881  00736A  ECBB  F039         	call	_testBlack	;wreg free
  1882  00736E  0AAA               	xorlw	170
  1883  007370  B4D8               	btfsc	status,2,c
  1884  007372  D7F8               	goto	u2090
  1885  007374  D7E0               	goto	l3429
  1886  007376                     __end_of_navigate:
  1887                           	opt callstack 0
  1888                           
  1889 ;; *************** function _testBlack *****************
  1890 ;; Defined at:
  1891 ;;		line 631 in file "./functions.c"
  1892 ;; Parameters:    Size  Location     Type
  1893 ;;		None
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;		None
  1896 ;; Return value:  Size  Location     Type
  1897 ;;                  1    wreg      unsigned char 
  1898 ;; Registers used:
  1899 ;;		wreg, status,2, status,0
  1900 ;; Tracked objects:
  1901 ;;		On entry : 0/0
  1902 ;;		On exit  : 0/0
  1903 ;;		Unchanged: 0/0
  1904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1905 ;;      Params:         0       0       0       0       0       0       0
  1906 ;;      Locals:         0       0       0       0       0       0       0
  1907 ;;      Temps:          0       0       0       0       0       0       0
  1908 ;;      Totals:         0       0       0       0       0       0       0
  1909 ;;Total ram usage:        0 bytes
  1910 ;; Hardware stack levels used:    1
  1911 ;; This function calls:
  1912 ;;		Nothing
  1913 ;; This function is called by:
  1914 ;;		_navigate
  1915 ;; This function uses a non-reentrant model
  1916 ;;
  1917                           
  1918                           	psect	text10
  1919  007376                     __ptext10:
  1920                           	opt callstack 0
  1921  007376                     _testBlack:
  1922                           	opt callstack 28
  1923                           
  1924                           ;./functions.c: 632:     if ((sensorVals[0] < LLranges[3]) || (sensorVals[0] < LLranges[
      +                          2])){
  1925                           
  1926                           ;incstack = 0
  1927  007376  0100               	movlb	0	; () banked
  1928  007378  51E7               	movf	(_LLranges+3)& (0+255),w,b
  1929  00737A  5C50               	subwf	_sensorVals,w,c
  1930  00737C  A0D8               	btfss	status,0,c
  1931  00737E  D004               	goto	u1490
  1932                           
  1933                           ; BSR set to: 0
  1934  007380  51E6               	movf	(_LLranges+2)& (0+255),w,b
  1935  007382  5C50               	subwf	_sensorVals,w,c
  1936  007384  B0D8               	btfsc	status,0,c
  1937  007386  D002               	goto	l2931
  1938  007388                     u1490:
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;./functions.c: 633:         return 0x0;
  1942  007388  0E00               	movlw	0
  1943  00738A  0012               	return	
  1944  00738C                     l2931:
  1945                           
  1946                           ; BSR set to: 0
  1947                           ;./functions.c: 635:     if ((sensorVals[1] < Lranges[3]) || (sensorVals[1] < Lranges[2]
      +                          )){
  1948  00738C  51E2               	movf	(_Lranges+3)& (0+255),w,b
  1949  00738E  5C51               	subwf	_sensorVals+1,w,c
  1950  007390  A0D8               	btfss	status,0,c
  1951  007392  D7FA               	goto	u1490
  1952                           
  1953                           ; BSR set to: 0
  1954  007394  51E1               	movf	(_Lranges+2)& (0+255),w,b
  1955  007396  5C51               	subwf	_sensorVals+1,w,c
  1956  007398  A0D8               	btfss	status,0,c
  1957  00739A  D7F6               	goto	u1490
  1958                           
  1959                           ; BSR set to: 0
  1960                           ;./functions.c: 638:     if ((sensorVals[2] < Mranges[3]) || (sensorVals[2] < Mranges[2]
      +                          )){
  1961  00739C  51DD               	movf	(_Mranges+3)& (0+255),w,b
  1962  00739E  5C52               	subwf	_sensorVals+2,w,c
  1963  0073A0  A0D8               	btfss	status,0,c
  1964  0073A2  D7F2               	goto	u1490
  1965                           
  1966                           ; BSR set to: 0
  1967  0073A4  51DC               	movf	(_Mranges+2)& (0+255),w,b
  1968  0073A6  5C52               	subwf	_sensorVals+2,w,c
  1969  0073A8  A0D8               	btfss	status,0,c
  1970  0073AA  D7EE               	goto	u1490
  1971                           
  1972                           ; BSR set to: 0
  1973                           ;./functions.c: 641:     if ((sensorVals[3] < Rranges[3]) || (sensorVals[3] < Rranges[2]
      +                          )){
  1974  0073AC  505B               	movf	_Rranges+3,w,c
  1975  0073AE  5C53               	subwf	_sensorVals+3,w,c
  1976  0073B0  A0D8               	btfss	status,0,c
  1977  0073B2  D7EA               	goto	u1490
  1978                           
  1979                           ; BSR set to: 0
  1980  0073B4  505A               	movf	_Rranges+2,w,c
  1981  0073B6  5C53               	subwf	_sensorVals+3,w,c
  1982  0073B8  A0D8               	btfss	status,0,c
  1983  0073BA  D7E6               	goto	u1490
  1984                           
  1985                           ; BSR set to: 0
  1986                           ;./functions.c: 644:     if ((sensorVals[4] < RRranges[3]) || (sensorVals[4] < RRranges[
      +                          2])){
  1987  0073BC  51D8               	movf	(_RRranges+3)& (0+255),w,b
  1988  0073BE  5C54               	subwf	_sensorVals+4,w,c
  1989  0073C0  A0D8               	btfss	status,0,c
  1990  0073C2  D7E2               	goto	u1490
  1991                           
  1992                           ; BSR set to: 0
  1993  0073C4  51D7               	movf	(_RRranges+2)& (0+255),w,b
  1994  0073C6  5C54               	subwf	_sensorVals+4,w,c
  1995  0073C8  A0D8               	btfss	status,0,c
  1996  0073CA  D7DE               	goto	u1490
  1997                           
  1998                           ; BSR set to: 0
  1999                           ;./functions.c: 647:     return 0xAA;
  2000  0073CC  0EAA               	movlw	170
  2001                           
  2002                           ; BSR set to: 0
  2003  0073CE  0012               	return		;funcret
  2004  0073D0                     __end_of_testBlack:
  2005                           	opt callstack 0
  2006                           
  2007 ;; *************** function _stopMotors *****************
  2008 ;; Defined at:
  2009 ;;		line 727 in file "./functions.c"
  2010 ;; Parameters:    Size  Location     Type
  2011 ;;		None
  2012 ;; Auto vars:     Size  Location     Type
  2013 ;;		None
  2014 ;; Return value:  Size  Location     Type
  2015 ;;                  1    wreg      void 
  2016 ;; Registers used:
  2017 ;;		wreg, status,2
  2018 ;; Tracked objects:
  2019 ;;		On entry : 0/0
  2020 ;;		On exit  : 0/0
  2021 ;;		Unchanged: 0/0
  2022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2023 ;;      Params:         0       0       0       0       0       0       0
  2024 ;;      Locals:         0       0       0       0       0       0       0
  2025 ;;      Temps:          0       0       0       0       0       0       0
  2026 ;;      Totals:         0       0       0       0       0       0       0
  2027 ;;Total ram usage:        0 bytes
  2028 ;; Hardware stack levels used:    1
  2029 ;; This function calls:
  2030 ;;		Nothing
  2031 ;; This function is called by:
  2032 ;;		_navigate
  2033 ;; This function uses a non-reentrant model
  2034 ;;
  2035                           
  2036                           	psect	text11
  2037  007030                     __ptext11:
  2038                           	opt callstack 0
  2039  007030                     _stopMotors:
  2040                           	opt callstack 28
  2041                           
  2042                           ;./functions.c: 728:     PORTCbits.RC0 = 0;
  2043                           
  2044                           ; BSR set to: 0
  2045                           ;incstack = 0
  2046  007030  9082               	bcf	3970,0,c	;volatile
  2047                           
  2048                           ;./functions.c: 729:     PORTCbits.RC1 = 0;
  2049  007032  9282               	bcf	3970,1,c	;volatile
  2050                           
  2051                           ;./functions.c: 730:     TRISCbits.TRISC2 = 1;
  2052  007034  8494               	bsf	3988,2,c	;volatile
  2053                           
  2054                           ;./functions.c: 731:     PORTEbits.RE0 = 0;
  2055  007036  9084               	bcf	3972,0,c	;volatile
  2056                           
  2057                           ;./functions.c: 732:     PORTEbits.RE1 = 0;
  2058  007038  9284               	bcf	3972,1,c	;volatile
  2059                           
  2060                           ;./functions.c: 733:     TRISEbits.TRISE2 = 1;
  2061  00703A  8496               	bsf	3990,2,c	;volatile
  2062                           
  2063                           ;./functions.c: 734:     PORTA = 0;
  2064  00703C  0E00               	movlw	0
  2065  00703E  6E80               	movwf	3968,c	;volatile
  2066  007040  0012               	return		;funcret
  2067  007042                     __end_of_stopMotors:
  2068                           	opt callstack 0
  2069                           
  2070 ;; *************** function _setupPWMRight *****************
  2071 ;; Defined at:
  2072 ;;		line 41 in file "./functions.c"
  2073 ;; Parameters:    Size  Location     Type
  2074 ;;		None
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;		None
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  1    wreg      void 
  2079 ;; Registers used:
  2080 ;;		wreg, status,2
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2086 ;;      Params:         0       0       0       0       0       0       0
  2087 ;;      Locals:         0       0       0       0       0       0       0
  2088 ;;      Temps:          0       0       0       0       0       0       0
  2089 ;;      Totals:         0       0       0       0       0       0       0
  2090 ;;Total ram usage:        0 bytes
  2091 ;; Hardware stack levels used:    1
  2092 ;; This function calls:
  2093 ;;		Nothing
  2094 ;; This function is called by:
  2095 ;;		_navigate
  2096 ;; This function uses a non-reentrant model
  2097 ;;
  2098                           
  2099                           	psect	text12
  2100  007194                     __ptext12:
  2101                           	opt callstack 0
  2102  007194                     _setupPWMRight:
  2103                           	opt callstack 28
  2104                           
  2105                           ;./functions.c: 43:     CCP5CON = 0;
  2106                           
  2107                           ;incstack = 0
  2108  007194  0E00               	movlw	0
  2109  007196  010F               	movlb	15	; () banked
  2110  007198  6F54               	movwf	84,b	;volatile
  2111                           
  2112                           ; BSR set to: 15
  2113                           ;./functions.c: 44:     PR4 = 255;
  2114  00719A  6952               	setf	82,b	;volatile
  2115                           
  2116                           ; BSR set to: 15
  2117                           ;./functions.c: 45:     CCPR5L = 255;
  2118  00719C  6955               	setf	85,b	;volatile
  2119                           
  2120                           ; BSR set to: 15
  2121                           ;./functions.c: 47:     TRISEbits.RE2 = 0;
  2122  00719E  9496               	bcf	3990,2,c	;volatile
  2123                           
  2124                           ;./functions.c: 49:     CCPTMRS1 = 0b00000100;
  2125  0071A0  0E04               	movlw	4
  2126  0071A2  6F48               	movwf	72,b	;volatile
  2127                           
  2128                           ;./functions.c: 50:     CCP5CON = 0b00001100;
  2129  0071A4  0E0C               	movlw	12
  2130  0071A6  6F54               	movwf	84,b	;volatile
  2131                           
  2132                           ;./functions.c: 51:     T4CON = 0b00000000;
  2133  0071A8  0E00               	movlw	0
  2134  0071AA  6F51               	movwf	81,b	;volatile
  2135                           
  2136                           ;./functions.c: 52:     TMR4 = 0;
  2137  0071AC  0E00               	movlw	0
  2138  0071AE  6F53               	movwf	83,b	;volatile
  2139                           
  2140                           ; BSR set to: 15
  2141                           ;./functions.c: 53:     PIE5bits.TMR4IE = 0;
  2142  0071B0  907D               	bcf	3965,0,c	;volatile
  2143                           
  2144                           ; BSR set to: 15
  2145                           ;./functions.c: 54:     T4CONbits.TMR4ON = 1;
  2146  0071B2  8551               	bsf	81,2,b	;volatile
  2147                           
  2148                           ; BSR set to: 15
  2149  0071B4  0012               	return		;funcret
  2150  0071B6                     __end_of_setupPWMRight:
  2151                           	opt callstack 0
  2152                           
  2153 ;; *************** function _setupPWMLeft *****************
  2154 ;; Defined at:
  2155 ;;		line 24 in file "./functions.c"
  2156 ;; Parameters:    Size  Location     Type
  2157 ;;		None
  2158 ;; Auto vars:     Size  Location     Type
  2159 ;;		None
  2160 ;; Return value:  Size  Location     Type
  2161 ;;                  1    wreg      void 
  2162 ;; Registers used:
  2163 ;;		wreg, status,2
  2164 ;; Tracked objects:
  2165 ;;		On entry : 0/0
  2166 ;;		On exit  : 0/0
  2167 ;;		Unchanged: 0/0
  2168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2169 ;;      Params:         0       0       0       0       0       0       0
  2170 ;;      Locals:         0       0       0       0       0       0       0
  2171 ;;      Temps:          0       0       0       0       0       0       0
  2172 ;;      Totals:         0       0       0       0       0       0       0
  2173 ;;Total ram usage:        0 bytes
  2174 ;; Hardware stack levels used:    1
  2175 ;; This function calls:
  2176 ;;		Nothing
  2177 ;; This function is called by:
  2178 ;;		_navigate
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           	psect	text13
  2183  007172                     __ptext13:
  2184                           	opt callstack 0
  2185  007172                     _setupPWMLeft:
  2186                           	opt callstack 28
  2187                           
  2188                           ;./functions.c: 26:     CCP1CON = 0;
  2189                           
  2190                           ; BSR set to: 15
  2191                           ;incstack = 0
  2192  007172  0E00               	movlw	0
  2193  007174  6EBD               	movwf	4029,c	;volatile
  2194                           
  2195                           ;./functions.c: 27:     PR2 = 255;
  2196  007176  68BB               	setf	4027,c	;volatile
  2197                           
  2198                           ;./functions.c: 28:     CCPR1L = 255;
  2199  007178  68BE               	setf	4030,c	;volatile
  2200                           
  2201                           ;./functions.c: 30:     TRISCbits.RC2 = 0;
  2202  00717A  9494               	bcf	3988,2,c	;volatile
  2203                           
  2204                           ;./functions.c: 32:     CCPTMRS0 = 0;
  2205  00717C  0E00               	movlw	0
  2206  00717E  010F               	movlb	15	; () banked
  2207  007180  6F49               	movwf	73,b	;volatile
  2208                           
  2209                           ;./functions.c: 33:     CCP1CON = 0b00001100;
  2210  007182  0E0C               	movlw	12
  2211  007184  6EBD               	movwf	4029,c	;volatile
  2212                           
  2213                           ;./functions.c: 34:     T2CON = 0b00000000;
  2214  007186  0E00               	movlw	0
  2215  007188  6EBA               	movwf	4026,c	;volatile
  2216                           
  2217                           ;./functions.c: 35:     TMR2 = 0;
  2218  00718A  0E00               	movlw	0
  2219  00718C  6EBC               	movwf	4028,c	;volatile
  2220                           
  2221                           ; BSR set to: 15
  2222                           ;./functions.c: 36:     PIE1bits.TMR1IE = 0;
  2223  00718E  909D               	bcf	3997,0,c	;volatile
  2224                           
  2225                           ; BSR set to: 15
  2226                           ;./functions.c: 37:     T2CONbits.TMR2ON = 1;
  2227  007190  84BA               	bsf	4026,2,c	;volatile
  2228                           
  2229                           ; BSR set to: 15
  2230  007192  0012               	return		;funcret
  2231  007194                     __end_of_setupPWMLeft:
  2232                           	opt callstack 0
  2233                           
  2234 ;; *************** function _setupADC *****************
  2235 ;; Defined at:
  2236 ;;		line 120 in file "./functions.c"
  2237 ;; Parameters:    Size  Location     Type
  2238 ;;		None
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;		None
  2241 ;; Return value:  Size  Location     Type
  2242 ;;                  1    wreg      void 
  2243 ;; Registers used:
  2244 ;;		wreg, status,2
  2245 ;; Tracked objects:
  2246 ;;		On entry : 0/0
  2247 ;;		On exit  : 0/0
  2248 ;;		Unchanged: 0/0
  2249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2250 ;;      Params:         0       0       0       0       0       0       0
  2251 ;;      Locals:         0       0       0       0       0       0       0
  2252 ;;      Temps:          0       0       0       0       0       0       0
  2253 ;;      Totals:         0       0       0       0       0       0       0
  2254 ;;Total ram usage:        0 bytes
  2255 ;; Hardware stack levels used:    1
  2256 ;; This function calls:
  2257 ;;		Nothing
  2258 ;; This function is called by:
  2259 ;;		_pyCal
  2260 ;;		_navigate
  2261 ;;		_init
  2262 ;; This function uses a non-reentrant model
  2263 ;;
  2264                           
  2265                           	psect	text14
  2266  007150                     __ptext14:
  2267                           	opt callstack 0
  2268  007150                     _setupADC:
  2269                           	opt callstack 29
  2270                           
  2271                           ;./functions.c: 122:     ADCON2bits.ADCS = 0b100;
  2272                           
  2273                           ; BSR set to: 15
  2274                           ;incstack = 0
  2275  007150  50C0               	movf	4032,w,c	;volatile
  2276  007152  0BF8               	andlw	-8
  2277  007154  0904               	iorlw	4
  2278  007156  6EC0               	movwf	4032,c	;volatile
  2279                           
  2280                           ;./functions.c: 123:     ADCON1 = 0;
  2281  007158  0E00               	movlw	0
  2282  00715A  6EC1               	movwf	4033,c	;volatile
  2283                           
  2284                           ;./functions.c: 124:     ADCON0bits.CHS = 0b01100;
  2285  00715C  50C2               	movf	4034,w,c	;volatile
  2286  00715E  0B83               	andlw	-125
  2287  007160  0930               	iorlw	48
  2288  007162  6EC2               	movwf	4034,c	;volatile
  2289                           
  2290                           ;./functions.c: 125:     ADCON2bits.ADFM = 0;
  2291  007164  9EC0               	bcf	4032,7,c	;volatile
  2292                           
  2293                           ;./functions.c: 126:     ADCON2bits.ACQT = 0b101;
  2294  007166  50C0               	movf	4032,w,c	;volatile
  2295  007168  0BC7               	andlw	-57
  2296  00716A  0928               	iorlw	40
  2297  00716C  6EC0               	movwf	4032,c	;volatile
  2298                           
  2299                           ;./functions.c: 127:     ADCON0bits.ADON = 1;
  2300  00716E  80C2               	bsf	4034,0,c	;volatile
  2301  007170  0012               	return		;funcret
  2302  007172                     __end_of_setupADC:
  2303                           	opt callstack 0
  2304                           
  2305 ;; *************** function _readAllSensors *****************
  2306 ;; Defined at:
  2307 ;;		line 759 in file "./functions.c"
  2308 ;; Parameters:    Size  Location     Type
  2309 ;;		None
  2310 ;; Auto vars:     Size  Location     Type
  2311 ;;  tempSensorVa    5   12[COMRAM] unsigned char [5]
  2312 ;;  a               1   17[COMRAM] unsigned char 
  2313 ;; Return value:  Size  Location     Type
  2314 ;;                  1    wreg      void 
  2315 ;; Registers used:
  2316 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2317 ;; Tracked objects:
  2318 ;;		On entry : 0/0
  2319 ;;		On exit  : 0/0
  2320 ;;		Unchanged: 0/0
  2321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2322 ;;      Params:         0       0       0       0       0       0       0
  2323 ;;      Locals:         6       0       0       0       0       0       0
  2324 ;;      Temps:          2       0       0       0       0       0       0
  2325 ;;      Totals:         8       0       0       0       0       0       0
  2326 ;;Total ram usage:        8 bytes
  2327 ;; Hardware stack levels used:    1
  2328 ;; Hardware stack levels required when called:    2
  2329 ;; This function calls:
  2330 ;;		_abs
  2331 ;;		_aveSensor
  2332 ;; This function is called by:
  2333 ;;		_pyCal
  2334 ;;		_navigate
  2335 ;; This function uses a non-reentrant model
  2336 ;;
  2337                           
  2338                           	psect	text15
  2339  0077F4                     __ptext15:
  2340                           	opt callstack 0
  2341  0077F4                     _readAllSensors:
  2342                           	opt callstack 26
  2343                           
  2344                           ;./functions.c: 760:     unsigned char tempSensorVals[5];;./functions.c: 761:     unsign
      +                          ed char a;;./functions.c: 762:     for (a = 0; a < 5; a++){
  2345                           
  2346                           ;incstack = 0
  2347  0077F4  0E00               	movlw	0
  2348  0077F6  6E12               	movwf	readAllSensors@a,c
  2349  0077F8                     l2779:
  2350                           
  2351                           ;./functions.c: 763:         tempSensorVals[a] = aveSensor(sensorChannels[a]);
  2352  0077F8  0E0D               	movlw	low readAllSensors@tempSensorVals
  2353  0077FA  2412               	addwf	readAllSensors@a,w,c
  2354  0077FC  6ED9               	movwf	fsr2l,c
  2355  0077FE  6ADA               	clrf	fsr2h,c
  2356  007800  0E00               	movlw	high readAllSensors@tempSensorVals
  2357  007802  22DA               	addwfc	fsr2h,f,c
  2358  007804  0ECA               	movlw	low _sensorChannels
  2359  007806  2412               	addwf	readAllSensors@a,w,c
  2360  007808  6EE1               	movwf	fsr1l,c
  2361  00780A  6AE2               	clrf	fsr1h,c
  2362  00780C  0E00               	movlw	high _sensorChannels
  2363  00780E  22E2               	addwfc	fsr1h,f,c
  2364  007810  50E7               	movf	indf1,w,c
  2365  007812  EC46  F039         	call	_aveSensor
  2366  007816  6EDF               	movwf	indf2,c
  2367                           
  2368                           ;./functions.c: 764:     }
  2369  007818  2A12               	incf	readAllSensors@a,f,c
  2370  00781A  0E04               	movlw	4
  2371  00781C  6412               	cpfsgt	readAllSensors@a,c
  2372  00781E  D7EC               	goto	l2779
  2373                           
  2374                           ;./functions.c: 765:     for (a = 0; a < 5; a++){
  2375  007820  0E00               	movlw	0
  2376  007822  6E12               	movwf	readAllSensors@a,c
  2377  007824                     l2791:
  2378                           
  2379                           ;./functions.c: 766:         sensorVals[a] = aveSensor(sensorChannels[a]);
  2380  007824  0E50               	movlw	low _sensorVals
  2381  007826  2412               	addwf	readAllSensors@a,w,c
  2382  007828  6ED9               	movwf	fsr2l,c
  2383  00782A  6ADA               	clrf	fsr2h,c
  2384  00782C  0E00               	movlw	high _sensorVals
  2385  00782E  22DA               	addwfc	fsr2h,f,c
  2386  007830  0ECA               	movlw	low _sensorChannels
  2387  007832  2412               	addwf	readAllSensors@a,w,c
  2388  007834  6EE1               	movwf	fsr1l,c
  2389  007836  6AE2               	clrf	fsr1h,c
  2390  007838  0E00               	movlw	high _sensorChannels
  2391  00783A  22E2               	addwfc	fsr1h,f,c
  2392  00783C  50E7               	movf	indf1,w,c
  2393  00783E  EC46  F039         	call	_aveSensor
  2394  007842  6EDF               	movwf	indf2,c
  2395                           
  2396                           ;./functions.c: 768:         if (abs(tempSensorVals[a] - sensorVals[a]) > 30){
  2397  007844  0E0D               	movlw	low readAllSensors@tempSensorVals
  2398  007846  2412               	addwf	readAllSensors@a,w,c
  2399  007848  6ED9               	movwf	fsr2l,c
  2400  00784A  6ADA               	clrf	fsr2h,c
  2401  00784C  0E00               	movlw	high readAllSensors@tempSensorVals
  2402  00784E  22DA               	addwfc	fsr2h,f,c
  2403  007850  50DF               	movf	indf2,w,c
  2404  007852  6E0B               	movwf	??_readAllSensors& (0+255),c
  2405  007854  0E50               	movlw	low _sensorVals
  2406  007856  2412               	addwf	readAllSensors@a,w,c
  2407  007858  6ED9               	movwf	fsr2l,c
  2408  00785A  6ADA               	clrf	fsr2h,c
  2409  00785C  0E00               	movlw	high _sensorVals
  2410  00785E  22DA               	addwfc	fsr2h,f,c
  2411  007860  50DF               	movf	indf2,w,c
  2412  007862  6E0C               	movwf	(??_readAllSensors+1)& (0+255),c
  2413  007864  500C               	movf	??_readAllSensors+1,w,c
  2414  007866  5C0B               	subwf	??_readAllSensors,w,c
  2415  007868  6E01               	movwf	abs@a,c
  2416  00786A  6A02               	clrf	abs@a+1,c
  2417  00786C  A0D8               	btfss	status,0,c
  2418  00786E  0602               	decf	abs@a+1,f,c
  2419  007870  ECF3  F038         	call	_abs	;wreg free
  2420  007874  BE02               	btfsc	?_abs+1,7,c
  2421  007876  D024               	goto	l2799
  2422  007878  5002               	movf	?_abs+1,w,c
  2423  00787A  E104               	bnz	u1350
  2424  00787C  0E1F               	movlw	31
  2425  00787E  5C01               	subwf	?_abs,w,c
  2426  007880  A0D8               	btfss	status,0,c
  2427  007882  D01E               	goto	l2799
  2428  007884                     u1350:
  2429                           
  2430                           ;./functions.c: 769:             if (sensorVals[a] > tempSensorVals[a]){
  2431  007884  0E50               	movlw	low _sensorVals
  2432  007886  2412               	addwf	readAllSensors@a,w,c
  2433  007888  6ED9               	movwf	fsr2l,c
  2434  00788A  6ADA               	clrf	fsr2h,c
  2435  00788C  0E00               	movlw	high _sensorVals
  2436  00788E  22DA               	addwfc	fsr2h,f,c
  2437  007890  0E0D               	movlw	low readAllSensors@tempSensorVals
  2438  007892  2412               	addwf	readAllSensors@a,w,c
  2439  007894  6EE1               	movwf	fsr1l,c
  2440  007896  6AE2               	clrf	fsr1h,c
  2441  007898  0E00               	movlw	high readAllSensors@tempSensorVals
  2442  00789A  22E2               	addwfc	fsr1h,f,c
  2443  00789C  50DE               	movf	postinc2,w,c
  2444  00789E  5CE6               	subwf	postinc1,w,c
  2445  0078A0  B0D8               	btfsc	status,0,c
  2446  0078A2  D00E               	goto	l2799
  2447                           
  2448                           ;./functions.c: 770:                 sensorVals[a] = tempSensorVals[a];
  2449  0078A4  0E0D               	movlw	low readAllSensors@tempSensorVals
  2450  0078A6  2412               	addwf	readAllSensors@a,w,c
  2451  0078A8  6ED9               	movwf	fsr2l,c
  2452  0078AA  6ADA               	clrf	fsr2h,c
  2453  0078AC  0E00               	movlw	high readAllSensors@tempSensorVals
  2454  0078AE  22DA               	addwfc	fsr2h,f,c
  2455  0078B0  0E50               	movlw	low _sensorVals
  2456  0078B2  2412               	addwf	readAllSensors@a,w,c
  2457  0078B4  6EE1               	movwf	fsr1l,c
  2458  0078B6  6AE2               	clrf	fsr1h,c
  2459  0078B8  0E00               	movlw	high _sensorVals
  2460  0078BA  22E2               	addwfc	fsr1h,f,c
  2461  0078BC  CFDF FFE7          	movff	indf2,indf1
  2462  0078C0                     l2799:
  2463                           
  2464                           ;./functions.c: 773:     }
  2465  0078C0  2A12               	incf	readAllSensors@a,f,c
  2466  0078C2  0E04               	movlw	4
  2467  0078C4  6412               	cpfsgt	readAllSensors@a,c
  2468  0078C6  D7AE               	goto	l2791
  2469  0078C8  0012               	return	
  2470  0078CA                     __end_of_readAllSensors:
  2471                           	opt callstack 0
  2472                           
  2473 ;; *************** function _displayRaceColor *****************
  2474 ;; Defined at:
  2475 ;;		line 739 in file "./functions.c"
  2476 ;; Parameters:    Size  Location     Type
  2477 ;;		None
  2478 ;; Auto vars:     Size  Location     Type
  2479 ;;		None
  2480 ;; Return value:  Size  Location     Type
  2481 ;;                  1    wreg      void 
  2482 ;; Registers used:
  2483 ;;		wreg, status,2
  2484 ;; Tracked objects:
  2485 ;;		On entry : 0/0
  2486 ;;		On exit  : 0/0
  2487 ;;		Unchanged: 0/0
  2488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2489 ;;      Params:         0       0       0       0       0       0       0
  2490 ;;      Locals:         0       0       0       0       0       0       0
  2491 ;;      Temps:          0       0       0       0       0       0       0
  2492 ;;      Totals:         0       0       0       0       0       0       0
  2493 ;;Total ram usage:        0 bytes
  2494 ;; Hardware stack levels used:    1
  2495 ;; This function calls:
  2496 ;;		Nothing
  2497 ;; This function is called by:
  2498 ;;		_navigate
  2499 ;; This function uses a non-reentrant model
  2500 ;;
  2501                           
  2502                           	psect	text16
  2503  00724E                     __ptext16:
  2504                           	opt callstack 0
  2505  00724E                     _displayRaceColor:
  2506                           	opt callstack 28
  2507                           
  2508                           ;./functions.c: 740:     if (raceColor[0]){
  2509                           
  2510                           ;incstack = 0
  2511  00724E  0100               	movlb	0	; () banked
  2512  007250  51BA               	movf	_raceColor& (0+255),w,b
  2513  007252  B4D8               	btfsc	status,2,c
  2514  007254  D003               	goto	l2807
  2515                           
  2516                           ; BSR set to: 0
  2517                           ;./functions.c: 741:         PORTD = 0b10111111;
  2518  007256  0EBF               	movlw	191
  2519  007258  6E83               	movwf	3971,c	;volatile
  2520                           
  2521                           ;./functions.c: 742:     }
  2522  00725A  0012               	return	
  2523  00725C                     l2807:
  2524                           
  2525                           ; BSR set to: 0
  2526  00725C  51BB               	movf	(_raceColor+1)& (0+255),w,b
  2527  00725E  B4D8               	btfsc	status,2,c
  2528  007260  D003               	goto	l2811
  2529                           
  2530                           ; BSR set to: 0
  2531                           ;./functions.c: 744:         PORTD = 0b10000010;
  2532  007262  0E82               	movlw	130
  2533  007264  6E83               	movwf	3971,c	;volatile
  2534                           
  2535                           ;./functions.c: 745:     }
  2536  007266  0012               	return	
  2537  007268                     l2811:
  2538                           
  2539                           ; BSR set to: 0
  2540  007268  51BC               	movf	(_raceColor+2)& (0+255),w,b
  2541  00726A  B4D8               	btfsc	status,2,c
  2542  00726C  D003               	goto	l2815
  2543                           
  2544                           ; BSR set to: 0
  2545                           ;./functions.c: 747:         PORTD = 0b10001000;
  2546  00726E  0E88               	movlw	136
  2547  007270  6E83               	movwf	3971,c	;volatile
  2548                           
  2549                           ;./functions.c: 748:     }
  2550  007272  0012               	return	
  2551  007274                     l2815:
  2552                           
  2553                           ; BSR set to: 0
  2554  007274  51BD               	movf	(_raceColor+3)& (0+255),w,b
  2555  007276  B4D8               	btfsc	status,2,c
  2556  007278  D003               	goto	l2819
  2557                           
  2558                           ; BSR set to: 0
  2559                           ;./functions.c: 750:         PORTD = 0b10000000;
  2560  00727A  0E80               	movlw	128
  2561  00727C  6E83               	movwf	3971,c	;volatile
  2562                           
  2563                           ;./functions.c: 751:     }
  2564  00727E  0012               	return	
  2565  007280                     l2819:
  2566                           
  2567                           ; BSR set to: 0
  2568  007280  51BE               	movf	(_raceColor+4)& (0+255),w,b
  2569  007282  B4D8               	btfsc	status,2,c
  2570  007284  0012               	return	
  2571                           
  2572                           ; BSR set to: 0
  2573                           ;./functions.c: 753:         PORTD = 0b11001000;
  2574  007286  0EC8               	movlw	200
  2575  007288  6E83               	movwf	3971,c	;volatile
  2576  00728A  0012               	return	
  2577  00728C                     __end_of_displayRaceColor:
  2578                           	opt callstack 0
  2579                           
  2580 ;; *************** function _displayColorDetected *****************
  2581 ;; Defined at:
  2582 ;;		line 674 in file "./functions.c"
  2583 ;; Parameters:    Size  Location     Type
  2584 ;;  sensor          1    wreg     unsigned char 
  2585 ;; Auto vars:     Size  Location     Type
  2586 ;;  sensor          1    2[COMRAM] unsigned char 
  2587 ;; Return value:  Size  Location     Type
  2588 ;;                  1    wreg      void 
  2589 ;; Registers used:
  2590 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2591 ;; Tracked objects:
  2592 ;;		On entry : 0/0
  2593 ;;		On exit  : 0/0
  2594 ;;		Unchanged: 0/0
  2595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2596 ;;      Params:         0       0       0       0       0       0       0
  2597 ;;      Locals:         1       0       0       0       0       0       0
  2598 ;;      Temps:          2       0       0       0       0       0       0
  2599 ;;      Totals:         3       0       0       0       0       0       0
  2600 ;;Total ram usage:        3 bytes
  2601 ;; Hardware stack levels used:    1
  2602 ;; This function calls:
  2603 ;;		Nothing
  2604 ;; This function is called by:
  2605 ;;		_navigate
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           	psect	text17
  2610  0076E2                     __ptext17:
  2611                           	opt callstack 0
  2612  0076E2                     _displayColorDetected:
  2613                           	opt callstack 28
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;incstack = 0
  2617                           ;displayColorDetected@sensor stored from wreg
  2618  0076E2  6E03               	movwf	displayColorDetected@sensor,c
  2619                           
  2620                           ;./functions.c: 675:     switch (colorsDetected[sensor])
  2621  0076E4  D024               	goto	l2855
  2622  0076E6                     l430:
  2623                           
  2624                           ;./functions.c: 678:         PORTAbits.RA0 = 1;
  2625  0076E6  8080               	bsf	3968,0,c	;volatile
  2626                           
  2627                           ;./functions.c: 679:         PORTAbits.RA1 = 0;
  2628  0076E8  9280               	bcf	3968,1,c	;volatile
  2629                           
  2630                           ;./functions.c: 680:         PORTAbits.RA2 = 0;
  2631  0076EA  9480               	bcf	3968,2,c	;volatile
  2632                           
  2633                           ;./functions.c: 681:         PORTAbits.RA3 = 0;
  2634  0076EC  9680               	bcf	3968,3,c	;volatile
  2635                           
  2636                           ;./functions.c: 682:         PORTAbits.RA4 = 0;
  2637  0076EE  9880               	bcf	3968,4,c	;volatile
  2638                           
  2639                           ;./functions.c: 683:         break;
  2640  0076F0  0012               	return	
  2641  0076F2                     l432:
  2642                           
  2643                           ;./functions.c: 685:         PORTAbits.RA0 = 0;
  2644  0076F2  9080               	bcf	3968,0,c	;volatile
  2645                           
  2646                           ;./functions.c: 686:         PORTAbits.RA1 = 1;
  2647  0076F4  8280               	bsf	3968,1,c	;volatile
  2648                           
  2649                           ;./functions.c: 687:         PORTAbits.RA2 = 0;
  2650  0076F6  9480               	bcf	3968,2,c	;volatile
  2651                           
  2652                           ;./functions.c: 688:         PORTAbits.RA3 = 0;
  2653  0076F8  9680               	bcf	3968,3,c	;volatile
  2654                           
  2655                           ;./functions.c: 689:         PORTAbits.RA4 = 0;
  2656  0076FA  9880               	bcf	3968,4,c	;volatile
  2657                           
  2658                           ;./functions.c: 690:         break;
  2659  0076FC  0012               	return	
  2660  0076FE                     l433:
  2661                           
  2662                           ;./functions.c: 692:         PORTAbits.RA0 = 0;
  2663  0076FE  9080               	bcf	3968,0,c	;volatile
  2664                           
  2665                           ;./functions.c: 693:         PORTAbits.RA1 = 0;
  2666  007700  9280               	bcf	3968,1,c	;volatile
  2667                           
  2668                           ;./functions.c: 694:         PORTAbits.RA2 = 1;
  2669  007702  8480               	bsf	3968,2,c	;volatile
  2670                           
  2671                           ;./functions.c: 695:         PORTAbits.RA3 = 0;
  2672  007704  9680               	bcf	3968,3,c	;volatile
  2673                           
  2674                           ;./functions.c: 696:         PORTAbits.RA4 = 0;
  2675  007706  9880               	bcf	3968,4,c	;volatile
  2676                           
  2677                           ;./functions.c: 697:         break;
  2678  007708  0012               	return	
  2679  00770A                     l434:
  2680                           
  2681                           ;./functions.c: 699:         PORTAbits.RA0 = 0;
  2682  00770A  9080               	bcf	3968,0,c	;volatile
  2683                           
  2684                           ;./functions.c: 700:         PORTAbits.RA1 = 0;
  2685  00770C  9280               	bcf	3968,1,c	;volatile
  2686                           
  2687                           ;./functions.c: 701:         PORTAbits.RA2 = 0;
  2688  00770E  9480               	bcf	3968,2,c	;volatile
  2689                           
  2690                           ;./functions.c: 702:         PORTAbits.RA3 = 1;
  2691  007710  8680               	bsf	3968,3,c	;volatile
  2692                           
  2693                           ;./functions.c: 703:         PORTAbits.RA4 = 0;
  2694  007712  9880               	bcf	3968,4,c	;volatile
  2695                           
  2696                           ;./functions.c: 704:         break;
  2697  007714  0012               	return	
  2698  007716                     l435:
  2699                           
  2700                           ;./functions.c: 706:         PORTAbits.RA0 = 0;
  2701  007716  9080               	bcf	3968,0,c	;volatile
  2702                           
  2703                           ;./functions.c: 707:         PORTAbits.RA1 = 0;
  2704  007718  9280               	bcf	3968,1,c	;volatile
  2705                           
  2706                           ;./functions.c: 708:         PORTAbits.RA2 = 0;
  2707  00771A  9480               	bcf	3968,2,c	;volatile
  2708                           
  2709                           ;./functions.c: 709:         PORTAbits.RA3 = 0;
  2710  00771C  9680               	bcf	3968,3,c	;volatile
  2711                           
  2712                           ;./functions.c: 710:         PORTAbits.RA4 = 1;
  2713  00771E  8880               	bsf	3968,4,c	;volatile
  2714                           
  2715                           ;./functions.c: 711:         break;
  2716  007720  0012               	return	
  2717  007722                     l436:
  2718                           
  2719                           ;./functions.c: 714:         PORTAbits.RA0 = 1;
  2720  007722  8080               	bsf	3968,0,c	;volatile
  2721                           
  2722                           ;./functions.c: 715:         PORTAbits.RA1 = 1;
  2723  007724  8280               	bsf	3968,1,c	;volatile
  2724                           
  2725                           ;./functions.c: 716:         PORTAbits.RA2 = 1;
  2726  007726  8480               	bsf	3968,2,c	;volatile
  2727                           
  2728                           ;./functions.c: 717:         PORTAbits.RA3 = 1;
  2729  007728  8680               	bsf	3968,3,c	;volatile
  2730                           
  2731                           ;./functions.c: 718:         PORTAbits.RA4 = 1;
  2732  00772A  8880               	bsf	3968,4,c	;volatile
  2733                           
  2734                           ;./functions.c: 719:         break;
  2735  00772C  0012               	return	
  2736  00772E                     l2855:
  2737  00772E  0EE9               	movlw	low _colorsDetected
  2738  007730  2403               	addwf	displayColorDetected@sensor,w,c
  2739  007732  6ED9               	movwf	fsr2l,c
  2740  007734  6ADA               	clrf	fsr2h,c
  2741  007736  0E00               	movlw	high _colorsDetected
  2742  007738  22DA               	addwfc	fsr2h,f,c
  2743  00773A  50DF               	movf	indf2,w,c
  2744  00773C  6E01               	movwf	??_displayColorDetected& (0+255),c
  2745  00773E  6A02               	clrf	(??_displayColorDetected+1)& (0+255),c
  2746                           
  2747                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2748                           ; Switch size 1, requested type "simple"
  2749                           ; Number of cases is 1, Range of values is 0 to 0
  2750                           ; switch strategies available:
  2751                           ; Name         Instructions Cycles
  2752                           ; simple_byte            4     3 (average)
  2753                           ;	Chosen strategy is simple_byte
  2754  007740  5002               	movf	??_displayColorDetected+1,w,c
  2755  007742  0A00               	xorlw	0	; case 0
  2756  007744  A4D8               	btfss	status,2,c
  2757  007746  D7ED               	goto	l436
  2758                           
  2759                           ; Switch size 1, requested type "simple"
  2760                           ; Number of cases is 5, Range of values is 66 to 110
  2761                           ; switch strategies available:
  2762                           ; Name         Instructions Cycles
  2763                           ; simple_byte           16     9 (average)
  2764                           ;	Chosen strategy is simple_byte
  2765  007748  5001               	movf	??_displayColorDetected,w,c
  2766  00774A  0A42               	xorlw	66	; case 66
  2767  00774C  B4D8               	btfsc	status,2,c
  2768  00774E  D7DD               	goto	l434
  2769  007750  0A05               	xorlw	5	; case 71
  2770  007752  B4D8               	btfsc	status,2,c
  2771  007754  D7CE               	goto	l432
  2772  007756  0A15               	xorlw	21	; case 82
  2773  007758  B4D8               	btfsc	status,2,c
  2774  00775A  D7D1               	goto	l433
  2775  00775C  0A05               	xorlw	5	; case 87
  2776  00775E  B4D8               	btfsc	status,2,c
  2777  007760  D7C2               	goto	l430
  2778  007762  0A39               	xorlw	57	; case 110
  2779  007764  B4D8               	btfsc	status,2,c
  2780  007766  D7D7               	goto	l435
  2781  007768  D7DC               	goto	l436
  2782  00776A                     __end_of_displayColorDetected:
  2783                           	opt callstack 0
  2784                           
  2785 ;; *************** function _determineDirection *****************
  2786 ;; Defined at:
  2787 ;;		line 575 in file "./functions.c"
  2788 ;; Parameters:    Size  Location     Type
  2789 ;;		None
  2790 ;; Auto vars:     Size  Location     Type
  2791 ;;		None
  2792 ;; Return value:  Size  Location     Type
  2793 ;;                  1    wreg      void 
  2794 ;; Registers used:
  2795 ;;		wreg, status,2, cstack
  2796 ;; Tracked objects:
  2797 ;;		On entry : 0/0
  2798 ;;		On exit  : 0/0
  2799 ;;		Unchanged: 0/0
  2800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2801 ;;      Params:         0       0       0       0       0       0       0
  2802 ;;      Locals:         0       0       0       0       0       0       0
  2803 ;;      Temps:          0       0       0       0       0       0       0
  2804 ;;      Totals:         0       0       0       0       0       0       0
  2805 ;;Total ram usage:        0 bytes
  2806 ;; Hardware stack levels used:    1
  2807 ;; Hardware stack levels required when called:    2
  2808 ;; This function calls:
  2809 ;;		_hardLeft
  2810 ;;		_hardRight
  2811 ;;		_left
  2812 ;;		_right
  2813 ;;		_searchMode
  2814 ;;		_straight
  2815 ;; This function is called by:
  2816 ;;		_navigate
  2817 ;; This function uses a non-reentrant model
  2818 ;;
  2819                           
  2820                           	psect	text18
  2821  006FDC                     __ptext18:
  2822                           	opt callstack 0
  2823  006FDC                     _determineDirection:
  2824                           	opt callstack 26
  2825                           
  2826                           ;./functions.c: 576:     straight();
  2827                           
  2828                           ;incstack = 0
  2829  006FDC  EC5F  F038         	call	_straight	;wreg free
  2830  006FE0  0012               	return		;funcret
  2831  006FE2                     __end_of_determineDirection:
  2832                           	opt callstack 0
  2833                           
  2834 ;; *************** function _straight *****************
  2835 ;; Defined at:
  2836 ;;		line 496 in file "./functions.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;		None
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;		None
  2841 ;; Return value:  Size  Location     Type
  2842 ;;                  1    wreg      void 
  2843 ;; Registers used:
  2844 ;;		wreg, status,2
  2845 ;; Tracked objects:
  2846 ;;		On entry : 0/0
  2847 ;;		On exit  : 0/0
  2848 ;;		Unchanged: 0/0
  2849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2850 ;;      Params:         0       0       0       0       0       0       0
  2851 ;;      Locals:         0       0       0       0       0       0       0
  2852 ;;      Temps:          0       0       0       0       0       0       0
  2853 ;;      Totals:         0       0       0       0       0       0       0
  2854 ;;Total ram usage:        0 bytes
  2855 ;; Hardware stack levels used:    1
  2856 ;; This function calls:
  2857 ;;		Nothing
  2858 ;; This function is called by:
  2859 ;;		_determineDirection
  2860 ;; This function uses a non-reentrant model
  2861 ;;
  2862                           
  2863                           	psect	text19
  2864  0070BE                     __ptext19:
  2865                           	opt callstack 0
  2866  0070BE                     _straight:
  2867                           	opt callstack 27
  2868                           
  2869                           ;./functions.c: 497:     PORTAbits.RA5 = 1;
  2870                           
  2871                           ;incstack = 0
  2872  0070BE  8A80               	bsf	3968,5,c	;volatile
  2873                           
  2874                           ;./functions.c: 498:     PORTAbits.RA6 = 0;
  2875  0070C0  9C80               	bcf	3968,6,c	;volatile
  2876                           
  2877                           ;./functions.c: 499:     PORTAbits.RA7 = 0;
  2878  0070C2  9E80               	bcf	3968,7,c	;volatile
  2879                           
  2880                           ;./functions.c: 501:     PORTCbits.RC0 = 0;
  2881  0070C4  9082               	bcf	3970,0,c	;volatile
  2882                           
  2883                           ;./functions.c: 502:     PORTCbits.RC1 = 1;
  2884  0070C6  8282               	bsf	3970,1,c	;volatile
  2885                           
  2886                           ;./functions.c: 504:     PORTEbits.RE0 = 0;
  2887  0070C8  9084               	bcf	3972,0,c	;volatile
  2888                           
  2889                           ;./functions.c: 505:     PORTEbits.RE1 = 1;
  2890  0070CA  8284               	bsf	3972,1,c	;volatile
  2891                           
  2892                           ;./functions.c: 507:     CCPR1L = 200;
  2893  0070CC  0EC8               	movlw	200
  2894  0070CE  6EBE               	movwf	4030,c	;volatile
  2895                           
  2896                           ;./functions.c: 508:     CCPR5L = 200;
  2897  0070D0  0EC8               	movlw	200
  2898  0070D2  010F               	movlb	15	; () banked
  2899  0070D4  6F55               	movwf	85,b	;volatile
  2900                           
  2901                           ; BSR set to: 15
  2902  0070D6  0012               	return		;funcret
  2903  0070D8                     __end_of_straight:
  2904                           	opt callstack 0
  2905                           
  2906 ;; *************** function _searchMode *****************
  2907 ;; Defined at:
  2908 ;;		line 481 in file "./functions.c"
  2909 ;; Parameters:    Size  Location     Type
  2910 ;;		None
  2911 ;; Auto vars:     Size  Location     Type
  2912 ;;		None
  2913 ;; Return value:  Size  Location     Type
  2914 ;;                  1    wreg      void 
  2915 ;; Registers used:
  2916 ;;		wreg, status,2, cstack
  2917 ;; Tracked objects:
  2918 ;;		On entry : 0/0
  2919 ;;		On exit  : 0/0
  2920 ;;		Unchanged: 0/0
  2921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2922 ;;      Params:         0       0       0       0       0       0       0
  2923 ;;      Locals:         0       0       0       0       0       0       0
  2924 ;;      Temps:          0       0       0       0       0       0       0
  2925 ;;      Totals:         0       0       0       0       0       0       0
  2926 ;;Total ram usage:        0 bytes
  2927 ;; Hardware stack levels used:    1
  2928 ;; Hardware stack levels required when called:    1
  2929 ;; This function calls:
  2930 ;;		_right
  2931 ;; This function is called by:
  2932 ;;		_determineDirection
  2933 ;; This function uses a non-reentrant model
  2934 ;;
  2935                           
  2936                           	psect	text20
  2937  007016                     __ptext20:
  2938                           	opt callstack 0
  2939  007016                     _searchMode:
  2940                           	opt callstack 26
  2941                           
  2942                           ;./functions.c: 482:     PORTAbits.RA5 = 1;
  2943                           
  2944                           ; BSR set to: 15
  2945                           ;incstack = 0
  2946  007016  8A80               	bsf	3968,5,c	;volatile
  2947                           
  2948                           ;./functions.c: 483:     PORTAbits.RA6 = 1;
  2949  007018  8C80               	bsf	3968,6,c	;volatile
  2950                           
  2951                           ;./functions.c: 484:     PORTAbits.RA7 = 1;
  2952  00701A  8E80               	bsf	3968,7,c	;volatile
  2953                           
  2954                           ;./functions.c: 485:     right();
  2955  00701C  EC52  F038         	call	_right	;wreg free
  2956  007020  0012               	return		;funcret
  2957  007022                     __end_of_searchMode:
  2958                           	opt callstack 0
  2959                           
  2960 ;; *************** function _right *****************
  2961 ;; Defined at:
  2962 ;;		line 543 in file "./functions.c"
  2963 ;; Parameters:    Size  Location     Type
  2964 ;;		None
  2965 ;; Auto vars:     Size  Location     Type
  2966 ;;		None
  2967 ;; Return value:  Size  Location     Type
  2968 ;;                  1    wreg      void 
  2969 ;; Registers used:
  2970 ;;		wreg, status,2
  2971 ;; Tracked objects:
  2972 ;;		On entry : 0/0
  2973 ;;		On exit  : 0/0
  2974 ;;		Unchanged: 0/0
  2975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2976 ;;      Params:         0       0       0       0       0       0       0
  2977 ;;      Locals:         0       0       0       0       0       0       0
  2978 ;;      Temps:          0       0       0       0       0       0       0
  2979 ;;      Totals:         0       0       0       0       0       0       0
  2980 ;;Total ram usage:        0 bytes
  2981 ;; Hardware stack levels used:    1
  2982 ;; This function calls:
  2983 ;;		Nothing
  2984 ;; This function is called by:
  2985 ;;		_searchMode
  2986 ;;		_determineDirection
  2987 ;; This function uses a non-reentrant model
  2988 ;;
  2989                           
  2990                           	psect	text21
  2991  0070A4                     __ptext21:
  2992                           	opt callstack 0
  2993  0070A4                     _right:
  2994                           	opt callstack 26
  2995                           
  2996                           ;./functions.c: 544:     PORTAbits.RA5 = 0;
  2997                           
  2998                           ;incstack = 0
  2999  0070A4  9A80               	bcf	3968,5,c	;volatile
  3000                           
  3001                           ;./functions.c: 545:     PORTAbits.RA6 = 1;
  3002  0070A6  8C80               	bsf	3968,6,c	;volatile
  3003                           
  3004                           ;./functions.c: 546:     PORTAbits.RA7 = 0;
  3005  0070A8  9E80               	bcf	3968,7,c	;volatile
  3006                           
  3007                           ;./functions.c: 548:     PORTCbits.RC0 = 0;
  3008  0070AA  9082               	bcf	3970,0,c	;volatile
  3009                           
  3010                           ;./functions.c: 549:     PORTCbits.RC1 = 1;
  3011  0070AC  8282               	bsf	3970,1,c	;volatile
  3012                           
  3013                           ;./functions.c: 551:     PORTEbits.RE0 = 0;
  3014  0070AE  9084               	bcf	3972,0,c	;volatile
  3015                           
  3016                           ;./functions.c: 552:     PORTEbits.RE1 = 1;
  3017  0070B0  8284               	bsf	3972,1,c	;volatile
  3018                           
  3019                           ;./functions.c: 554:     CCPR1L = 150;
  3020  0070B2  0E96               	movlw	150
  3021  0070B4  6EBE               	movwf	4030,c	;volatile
  3022                           
  3023                           ;./functions.c: 555:     CCPR5L = 100;
  3024  0070B6  0E64               	movlw	100
  3025  0070B8  010F               	movlb	15	; () banked
  3026  0070BA  6F55               	movwf	85,b	;volatile
  3027                           
  3028                           ; BSR set to: 15
  3029  0070BC  0012               	return		;funcret
  3030  0070BE                     __end_of_right:
  3031                           	opt callstack 0
  3032                           
  3033 ;; *************** function _left *****************
  3034 ;; Defined at:
  3035 ;;		line 511 in file "./functions.c"
  3036 ;; Parameters:    Size  Location     Type
  3037 ;;		None
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;		None
  3040 ;; Return value:  Size  Location     Type
  3041 ;;                  1    wreg      void 
  3042 ;; Registers used:
  3043 ;;		wreg, status,2
  3044 ;; Tracked objects:
  3045 ;;		On entry : 0/0
  3046 ;;		On exit  : 0/0
  3047 ;;		Unchanged: 0/0
  3048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3049 ;;      Params:         0       0       0       0       0       0       0
  3050 ;;      Locals:         0       0       0       0       0       0       0
  3051 ;;      Temps:          0       0       0       0       0       0       0
  3052 ;;      Totals:         0       0       0       0       0       0       0
  3053 ;;Total ram usage:        0 bytes
  3054 ;; Hardware stack levels used:    1
  3055 ;; This function calls:
  3056 ;;		Nothing
  3057 ;; This function is called by:
  3058 ;;		_determineDirection
  3059 ;; This function uses a non-reentrant model
  3060 ;;
  3061                           
  3062                           	psect	text22
  3063  00708A                     __ptext22:
  3064                           	opt callstack 0
  3065  00708A                     _left:
  3066                           	opt callstack 27
  3067                           
  3068                           ;./functions.c: 512:     PORTAbits.RA5 = 0;
  3069                           
  3070                           ; BSR set to: 15
  3071                           ;incstack = 0
  3072  00708A  9A80               	bcf	3968,5,c	;volatile
  3073                           
  3074                           ;./functions.c: 513:     PORTAbits.RA6 = 0;
  3075  00708C  9C80               	bcf	3968,6,c	;volatile
  3076                           
  3077                           ;./functions.c: 514:     PORTAbits.RA7 = 1;
  3078  00708E  8E80               	bsf	3968,7,c	;volatile
  3079                           
  3080                           ;./functions.c: 516:     PORTCbits.RC0 = 0;
  3081  007090  9082               	bcf	3970,0,c	;volatile
  3082                           
  3083                           ;./functions.c: 517:     PORTCbits.RC1 = 1;
  3084  007092  8282               	bsf	3970,1,c	;volatile
  3085                           
  3086                           ;./functions.c: 519:     PORTEbits.RE0 = 0;
  3087  007094  9084               	bcf	3972,0,c	;volatile
  3088                           
  3089                           ;./functions.c: 520:     PORTEbits.RE1 = 1;
  3090  007096  8284               	bsf	3972,1,c	;volatile
  3091                           
  3092                           ;./functions.c: 522:     CCPR1L = 100;
  3093  007098  0E64               	movlw	100
  3094  00709A  6EBE               	movwf	4030,c	;volatile
  3095                           
  3096                           ;./functions.c: 523:     CCPR5L = 150;
  3097  00709C  0E96               	movlw	150
  3098  00709E  010F               	movlb	15	; () banked
  3099  0070A0  6F55               	movwf	85,b	;volatile
  3100                           
  3101                           ; BSR set to: 15
  3102  0070A2  0012               	return		;funcret
  3103  0070A4                     __end_of_left:
  3104                           	opt callstack 0
  3105                           
  3106 ;; *************** function _hardRight *****************
  3107 ;; Defined at:
  3108 ;;		line 559 in file "./functions.c"
  3109 ;; Parameters:    Size  Location     Type
  3110 ;;		None
  3111 ;; Auto vars:     Size  Location     Type
  3112 ;;		None
  3113 ;; Return value:  Size  Location     Type
  3114 ;;                  1    wreg      void 
  3115 ;; Registers used:
  3116 ;;		wreg, status,2
  3117 ;; Tracked objects:
  3118 ;;		On entry : 0/0
  3119 ;;		On exit  : 0/0
  3120 ;;		Unchanged: 0/0
  3121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3122 ;;      Params:         0       0       0       0       0       0       0
  3123 ;;      Locals:         0       0       0       0       0       0       0
  3124 ;;      Temps:          0       0       0       0       0       0       0
  3125 ;;      Totals:         0       0       0       0       0       0       0
  3126 ;;Total ram usage:        0 bytes
  3127 ;; Hardware stack levels used:    1
  3128 ;; This function calls:
  3129 ;;		Nothing
  3130 ;; This function is called by:
  3131 ;;		_determineDirection
  3132 ;; This function uses a non-reentrant model
  3133 ;;
  3134                           
  3135                           	psect	text23
  3136  007070                     __ptext23:
  3137                           	opt callstack 0
  3138  007070                     _hardRight:
  3139                           	opt callstack 27
  3140                           
  3141                           ;./functions.c: 560:     PORTAbits.RA5 = 0;
  3142                           
  3143                           ; BSR set to: 15
  3144                           ;incstack = 0
  3145  007070  9A80               	bcf	3968,5,c	;volatile
  3146                           
  3147                           ;./functions.c: 561:     PORTAbits.RA6 = 1;
  3148  007072  8C80               	bsf	3968,6,c	;volatile
  3149                           
  3150                           ;./functions.c: 562:     PORTAbits.RA7 = 0;
  3151  007074  9E80               	bcf	3968,7,c	;volatile
  3152                           
  3153                           ;./functions.c: 564:     PORTCbits.RC0 = 0;
  3154  007076  9082               	bcf	3970,0,c	;volatile
  3155                           
  3156                           ;./functions.c: 565:     PORTCbits.RC1 = 1;
  3157  007078  8282               	bsf	3970,1,c	;volatile
  3158                           
  3159                           ;./functions.c: 567:     PORTEbits.RE0 = 0;
  3160  00707A  9084               	bcf	3972,0,c	;volatile
  3161                           
  3162                           ;./functions.c: 568:     PORTEbits.RE1 = 1;
  3163  00707C  8284               	bsf	3972,1,c	;volatile
  3164                           
  3165                           ;./functions.c: 570:     CCPR1L = 150;
  3166  00707E  0E96               	movlw	150
  3167  007080  6EBE               	movwf	4030,c	;volatile
  3168                           
  3169                           ;./functions.c: 571:     CCPR5L = 50;
  3170  007082  0E32               	movlw	50
  3171  007084  010F               	movlb	15	; () banked
  3172  007086  6F55               	movwf	85,b	;volatile
  3173                           
  3174                           ; BSR set to: 15
  3175  007088  0012               	return		;funcret
  3176  00708A                     __end_of_hardRight:
  3177                           	opt callstack 0
  3178                           
  3179 ;; *************** function _hardLeft *****************
  3180 ;; Defined at:
  3181 ;;		line 527 in file "./functions.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;		None
  3184 ;; Auto vars:     Size  Location     Type
  3185 ;;		None
  3186 ;; Return value:  Size  Location     Type
  3187 ;;                  1    wreg      void 
  3188 ;; Registers used:
  3189 ;;		wreg, status,2
  3190 ;; Tracked objects:
  3191 ;;		On entry : 0/0
  3192 ;;		On exit  : 0/0
  3193 ;;		Unchanged: 0/0
  3194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3195 ;;      Params:         0       0       0       0       0       0       0
  3196 ;;      Locals:         0       0       0       0       0       0       0
  3197 ;;      Temps:          0       0       0       0       0       0       0
  3198 ;;      Totals:         0       0       0       0       0       0       0
  3199 ;;Total ram usage:        0 bytes
  3200 ;; Hardware stack levels used:    1
  3201 ;; This function calls:
  3202 ;;		Nothing
  3203 ;; This function is called by:
  3204 ;;		_determineDirection
  3205 ;; This function uses a non-reentrant model
  3206 ;;
  3207                           
  3208                           	psect	text24
  3209  007056                     __ptext24:
  3210                           	opt callstack 0
  3211  007056                     _hardLeft:
  3212                           	opt callstack 27
  3213                           
  3214                           ;./functions.c: 528:     PORTAbits.RA5 = 0;
  3215                           
  3216                           ; BSR set to: 15
  3217                           ;incstack = 0
  3218  007056  9A80               	bcf	3968,5,c	;volatile
  3219                           
  3220                           ;./functions.c: 529:     PORTAbits.RA6 = 0;
  3221  007058  9C80               	bcf	3968,6,c	;volatile
  3222                           
  3223                           ;./functions.c: 530:     PORTAbits.RA7 = 1;
  3224  00705A  8E80               	bsf	3968,7,c	;volatile
  3225                           
  3226                           ;./functions.c: 532:     PORTCbits.RC0 = 0;
  3227  00705C  9082               	bcf	3970,0,c	;volatile
  3228                           
  3229                           ;./functions.c: 533:     PORTCbits.RC1 = 1;
  3230  00705E  8282               	bsf	3970,1,c	;volatile
  3231                           
  3232                           ;./functions.c: 535:     PORTEbits.RE0 = 0;
  3233  007060  9084               	bcf	3972,0,c	;volatile
  3234                           
  3235                           ;./functions.c: 536:     PORTEbits.RE1 = 1;
  3236  007062  8284               	bsf	3972,1,c	;volatile
  3237                           
  3238                           ;./functions.c: 538:     CCPR1L = 50;
  3239  007064  0E32               	movlw	50
  3240  007066  6EBE               	movwf	4030,c	;volatile
  3241                           
  3242                           ;./functions.c: 539:     CCPR5L = 150;
  3243  007068  0E96               	movlw	150
  3244  00706A  010F               	movlb	15	; () banked
  3245  00706C  6F55               	movwf	85,b	;volatile
  3246                           
  3247                           ; BSR set to: 15
  3248  00706E  0012               	return		;funcret
  3249  007070                     __end_of_hardLeft:
  3250                           	opt callstack 0
  3251                           
  3252 ;; *************** function _classifyColors *****************
  3253 ;; Defined at:
  3254 ;;		line 652 in file "./functions.c"
  3255 ;; Parameters:    Size  Location     Type
  3256 ;;		None
  3257 ;; Auto vars:     Size  Location     Type
  3258 ;;  a               1   14[COMRAM] unsigned char 
  3259 ;;  sensorRanges   10    4[COMRAM] PTR unsigned char [5]
  3260 ;;		 -> RRranges(5), Rranges(5), Mranges(5), Lranges(5), 
  3261 ;;		 -> LLranges(5), 
  3262 ;; Return value:  Size  Location     Type
  3263 ;;                  1    wreg      void 
  3264 ;; Registers used:
  3265 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3266 ;; Tracked objects:
  3267 ;;		On entry : 0/0
  3268 ;;		On exit  : 0/0
  3269 ;;		Unchanged: 0/0
  3270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3271 ;;      Params:         0       0       0       0       0       0       0
  3272 ;;      Locals:        11       0       0       0       0       0       0
  3273 ;;      Temps:          4       0       0       0       0       0       0
  3274 ;;      Totals:        15       0       0       0       0       0       0
  3275 ;;Total ram usage:       15 bytes
  3276 ;; Hardware stack levels used:    1
  3277 ;; This function calls:
  3278 ;;		Nothing
  3279 ;; This function is called by:
  3280 ;;		_navigate
  3281 ;; This function uses a non-reentrant model
  3282 ;;
  3283                           
  3284                           	psect	text25
  3285  0079B6                     __ptext25:
  3286                           	opt callstack 0
  3287  0079B6                     _classifyColors:
  3288                           	opt callstack 28
  3289                           
  3290                           ;./functions.c: 653:     unsigned char* sensorRanges[] = {LLranges, Lranges, Mranges, Rr
      +                          anges, RRranges};
  3291                           
  3292                           ; BSR set to: 15
  3293                           ;incstack = 0
  3294  0079B6  EE20  F0A6         	lfsr	2,classifyColors@F6062
  3295  0079BA  EE10  F005         	lfsr	1,classifyColors@sensorRanges
  3296  0079BE  0E09               	movlw	9
  3297  0079C0                     u1431:
  3298  0079C0  CFDB FFE3          	movff	plusw2,plusw1
  3299  0079C4  06E8               	decf	wreg,f,c
  3300  0079C6  E2FC               	bc	u1431
  3301                           
  3302                           ;./functions.c: 655:     for (unsigned char a = 0; a < 5; a++){
  3303  0079C8  0E00               	movlw	0
  3304  0079CA  6E0F               	movwf	classifyColors@a,c
  3305  0079CC                     l2833:
  3306                           
  3307                           ;./functions.c: 656:         if (sensorVals[a] < sensorRanges[a][0]){
  3308  0079CC  500F               	movf	classifyColors@a,w,c
  3309  0079CE  0D02               	mullw	2
  3310  0079D0  0E05               	movlw	low classifyColors@sensorRanges
  3311  0079D2  24F3               	addwf	prodl,w,c
  3312  0079D4  6ED9               	movwf	fsr2l,c
  3313  0079D6  0E00               	movlw	high classifyColors@sensorRanges
  3314  0079D8  20F4               	addwfc	prodh,w,c
  3315  0079DA  6EDA               	movwf	fsr2h,c
  3316  0079DC  CFDE F001          	movff	postinc2,??_classifyColors
  3317  0079E0  CFDD F002          	movff	postdec2,??_classifyColors+1
  3318  0079E4  C001  FFD9         	movff	??_classifyColors,fsr2l
  3319  0079E8  C002  FFDA         	movff	??_classifyColors+1,fsr2h
  3320  0079EC  0E50               	movlw	low _sensorVals
  3321  0079EE  240F               	addwf	classifyColors@a,w,c
  3322  0079F0  6EE1               	movwf	fsr1l,c
  3323  0079F2  6AE2               	clrf	fsr1h,c
  3324  0079F4  0E00               	movlw	high _sensorVals
  3325  0079F6  22E2               	addwfc	fsr1h,f,c
  3326  0079F8  50DE               	movf	postinc2,w,c
  3327  0079FA  5CE6               	subwf	postinc1,w,c
  3328  0079FC  B0D8               	btfsc	status,0,c
  3329  0079FE  D008               	goto	l2837
  3330                           
  3331                           ;./functions.c: 657:             colorsDetected[a] = 'W';
  3332  007A00  0EE9               	movlw	low _colorsDetected
  3333  007A02  240F               	addwf	classifyColors@a,w,c
  3334  007A04  6ED9               	movwf	fsr2l,c
  3335  007A06  6ADA               	clrf	fsr2h,c
  3336  007A08  0E00               	movlw	high _colorsDetected
  3337  007A0A  22DA               	addwfc	fsr2h,f,c
  3338  007A0C  0E57               	movlw	87
  3339  007A0E  D047               	goto	L1
  3340  007A10                     l2837:
  3341  007A10  500F               	movf	classifyColors@a,w,c
  3342  007A12  0D02               	mullw	2
  3343  007A14  0E05               	movlw	low classifyColors@sensorRanges
  3344  007A16  24F3               	addwf	prodl,w,c
  3345  007A18  6ED9               	movwf	fsr2l,c
  3346  007A1A  0E00               	movlw	high classifyColors@sensorRanges
  3347  007A1C  20F4               	addwfc	prodh,w,c
  3348  007A1E  6EDA               	movwf	fsr2h,c
  3349  007A20  EE10 F001          	lfsr	1,1
  3350  007A24  50DE               	movf	postinc2,w,c
  3351  007A26  26E1               	addwf	fsr1l,f,c
  3352  007A28  50DD               	movf	postdec2,w,c
  3353  007A2A  22E2               	addwfc	fsr1h,f,c
  3354  007A2C  0E50               	movlw	low _sensorVals
  3355  007A2E  240F               	addwf	classifyColors@a,w,c
  3356  007A30  6ED9               	movwf	fsr2l,c
  3357  007A32  6ADA               	clrf	fsr2h,c
  3358  007A34  0E00               	movlw	high _sensorVals
  3359  007A36  22DA               	addwfc	fsr2h,f,c
  3360  007A38  50E6               	movf	postinc1,w,c
  3361  007A3A  5CDE               	subwf	postinc2,w,c
  3362  007A3C  B0D8               	btfsc	status,0,c
  3363  007A3E  D008               	goto	l2841
  3364                           
  3365                           ;./functions.c: 660:             colorsDetected[a] = 'G';
  3366  007A40  0EE9               	movlw	low _colorsDetected
  3367  007A42  240F               	addwf	classifyColors@a,w,c
  3368  007A44  6ED9               	movwf	fsr2l,c
  3369  007A46  6ADA               	clrf	fsr2h,c
  3370  007A48  0E00               	movlw	high _colorsDetected
  3371  007A4A  22DA               	addwfc	fsr2h,f,c
  3372  007A4C  0E47               	movlw	71
  3373  007A4E  D027               	goto	L1
  3374  007A50                     l2841:
  3375  007A50  500F               	movf	classifyColors@a,w,c
  3376  007A52  0D02               	mullw	2
  3377  007A54  0E05               	movlw	low classifyColors@sensorRanges
  3378  007A56  24F3               	addwf	prodl,w,c
  3379  007A58  6ED9               	movwf	fsr2l,c
  3380  007A5A  0E00               	movlw	high classifyColors@sensorRanges
  3381  007A5C  20F4               	addwfc	prodh,w,c
  3382  007A5E  6EDA               	movwf	fsr2h,c
  3383  007A60  EE10 F004          	lfsr	1,4
  3384  007A64  50DE               	movf	postinc2,w,c
  3385  007A66  26E1               	addwf	fsr1l,f,c
  3386  007A68  50DD               	movf	postdec2,w,c
  3387  007A6A  22E2               	addwfc	fsr1h,f,c
  3388  007A6C  0E50               	movlw	low _sensorVals
  3389  007A6E  240F               	addwf	classifyColors@a,w,c
  3390  007A70  6ED9               	movwf	fsr2l,c
  3391  007A72  6ADA               	clrf	fsr2h,c
  3392  007A74  0E00               	movlw	high _sensorVals
  3393  007A76  22DA               	addwfc	fsr2h,f,c
  3394  007A78  50E6               	movf	postinc1,w,c
  3395  007A7A  5CDE               	subwf	postinc2,w,c
  3396  007A7C  B0D8               	btfsc	status,0,c
  3397  007A7E  D008               	goto	l2845
  3398                           
  3399                           ;./functions.c: 663:             colorsDetected[a] = 'B';
  3400  007A80  0EE9               	movlw	low _colorsDetected
  3401  007A82  240F               	addwf	classifyColors@a,w,c
  3402  007A84  6ED9               	movwf	fsr2l,c
  3403  007A86  6ADA               	clrf	fsr2h,c
  3404  007A88  0E00               	movlw	high _colorsDetected
  3405  007A8A  22DA               	addwfc	fsr2h,f,c
  3406  007A8C  0E42               	movlw	66
  3407  007A8E  D007               	goto	L1
  3408  007A90                     l2845:
  3409                           
  3410                           ;./functions.c: 666:             colorsDetected[a] = 'n';
  3411  007A90  0EE9               	movlw	low _colorsDetected
  3412  007A92  240F               	addwf	classifyColors@a,w,c
  3413  007A94  6ED9               	movwf	fsr2l,c
  3414  007A96  6ADA               	clrf	fsr2h,c
  3415  007A98  0E00               	movlw	high _colorsDetected
  3416  007A9A  22DA               	addwfc	fsr2h,f,c
  3417  007A9C  0E6E               	movlw	110
  3418  007A9E                     L1:
  3419  007A9E  6EDF               	movwf	indf2,c
  3420                           
  3421                           ;./functions.c: 668:     }
  3422  007AA0  2A0F               	incf	classifyColors@a,f,c
  3423  007AA2  0E04               	movlw	4
  3424  007AA4  640F               	cpfsgt	classifyColors@a,c
  3425  007AA6  D792               	goto	l2833
  3426  007AA8  0012               	return	
  3427  007AAA                     __end_of_classifyColors:
  3428                           	opt callstack 0
  3429                           
  3430 ;; *************** function _capTouch *****************
  3431 ;; Defined at:
  3432 ;;		line 452 in file "./functions.c"
  3433 ;; Parameters:    Size  Location     Type
  3434 ;;		None
  3435 ;; Auto vars:     Size  Location     Type
  3436 ;;  a               1   40[COMRAM] unsigned char 
  3437 ;;  message        26   10[COMRAM] unsigned char [26]
  3438 ;;  change          2    0        int 
  3439 ;;  touch2          1   39[COMRAM] unsigned char 
  3440 ;;  touch1          1   38[COMRAM] unsigned char 
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  1    wreg      void 
  3443 ;; Registers used:
  3444 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3445 ;; Tracked objects:
  3446 ;;		On entry : 0/0
  3447 ;;		On exit  : 0/0
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3450 ;;      Params:         0       0       0       0       0       0       0
  3451 ;;      Locals:        31       0       0       0       0       0       0
  3452 ;;      Temps:          0       0       0       0       0       0       0
  3453 ;;      Totals:        31       0       0       0       0       0       0
  3454 ;;Total ram usage:       31 bytes
  3455 ;; Hardware stack levels used:    1
  3456 ;; Hardware stack levels required when called:    2
  3457 ;; This function calls:
  3458 ;;		_abs
  3459 ;;		_aveSensor
  3460 ;;		_msDelay
  3461 ;;		_trans
  3462 ;; This function is called by:
  3463 ;;		_RCE
  3464 ;; This function uses a non-reentrant model
  3465 ;;
  3466                           
  3467                           	psect	text26
  3468  0074F0                     __ptext26:
  3469                           	opt callstack 0
  3470  0074F0                     _capTouch:
  3471                           	opt callstack 27
  3472                           
  3473                           ;./functions.c: 454:     unsigned char message[] = "\nSanic waits for a touch\n";
  3474                           
  3475                           ;incstack = 0
  3476  0074F0  EE20  F060         	lfsr	2,capTouch@F6046
  3477  0074F4  EE10  F00B         	lfsr	1,capTouch@message
  3478  0074F8  0E19               	movlw	25
  3479  0074FA                     u2111:
  3480  0074FA  CFDB FFE3          	movff	plusw2,plusw1
  3481  0074FE  06E8               	decf	wreg,f,c
  3482  007500  E2FC               	bc	u2111
  3483                           
  3484                           ;./functions.c: 456:     for (unsigned char a = 0; a < 25; a++)
  3485  007502  0E00               	movlw	0
  3486  007504  6E29               	movwf	capTouch@a,c
  3487  007506                     l3465:
  3488                           
  3489                           ;./functions.c: 457:     {;./functions.c: 458:         trans(message[a]);
  3490  007506  0E0B               	movlw	low capTouch@message
  3491  007508  2429               	addwf	capTouch@a,w,c
  3492  00750A  6ED9               	movwf	fsr2l,c
  3493  00750C  6ADA               	clrf	fsr2h,c
  3494  00750E  0E00               	movlw	high capTouch@message
  3495  007510  22DA               	addwfc	fsr2h,f,c
  3496  007512  50DF               	movf	indf2,w,c
  3497  007514  EC05  F038         	call	_trans
  3498                           
  3499                           ;./functions.c: 459:     }
  3500  007518  2A29               	incf	capTouch@a,f,c
  3501  00751A  0E18               	movlw	24
  3502  00751C  6429               	cpfsgt	capTouch@a,c
  3503  00751E  D7F3               	goto	l3465
  3504                           
  3505                           ;./functions.c: 462:     unsigned char touch1 = 0;
  3506  007520  0E00               	movlw	0
  3507  007522  6E27               	movwf	capTouch@touch1,c
  3508                           
  3509                           ;./functions.c: 463:     unsigned char touch2 = 0;
  3510  007524  0E00               	movlw	0
  3511  007526  6E28               	movwf	capTouch@touch2,c
  3512  007528                     l3473:
  3513                           
  3514                           ;./functions.c: 466:         touch1 = aveSensor(15);
  3515  007528  0E0F               	movlw	15
  3516  00752A  EC46  F039         	call	_aveSensor
  3517  00752E  6E27               	movwf	capTouch@touch1,c
  3518                           
  3519                           ;./functions.c: 467:         msDelay(5);
  3520  007530  0E05               	movlw	5
  3521  007532  EC88  F038         	call	_msDelay
  3522                           
  3523                           ;./functions.c: 468:         touch2 = aveSensor(15);
  3524  007536  0E0F               	movlw	15
  3525  007538  EC46  F039         	call	_aveSensor
  3526  00753C  6E28               	movwf	capTouch@touch2,c
  3527                           
  3528                           ;./functions.c: 472:         if (abs(touch2 - touch1) > 50){
  3529  00753E  5027               	movf	capTouch@touch1,w,c
  3530  007540  5C28               	subwf	capTouch@touch2,w,c
  3531  007542  6E01               	movwf	abs@a,c
  3532  007544  6A02               	clrf	abs@a+1,c
  3533  007546  A0D8               	btfss	status,0,c
  3534  007548  0602               	decf	abs@a+1,f,c
  3535  00754A  ECF3  F038         	call	_abs	;wreg free
  3536  00754E  BE02               	btfsc	?_abs+1,7,c
  3537  007550  D7EB               	goto	l3473
  3538  007552  5002               	movf	?_abs+1,w,c
  3539  007554  E105               	bnz	l346
  3540  007556  0E33               	movlw	51
  3541  007558  5C01               	subwf	?_abs,w,c
  3542  00755A  B0D8               	btfsc	status,0,c
  3543  00755C  0012               	return	
  3544  00755E  D7E4               	goto	l3473
  3545  007560                     l346:
  3546  007560  0012               	return		;funcret
  3547  007562                     __end_of_capTouch:
  3548                           	opt callstack 0
  3549                           
  3550 ;; *************** function _abs *****************
  3551 ;; Defined at:
  3552 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  3553 ;; Parameters:    Size  Location     Type
  3554 ;;  a               2    0[COMRAM] int 
  3555 ;; Auto vars:     Size  Location     Type
  3556 ;;		None
  3557 ;; Return value:  Size  Location     Type
  3558 ;;                  2    0[COMRAM] int 
  3559 ;; Registers used:
  3560 ;;		wreg, status,2, status,0
  3561 ;; Tracked objects:
  3562 ;;		On entry : 0/0
  3563 ;;		On exit  : 0/0
  3564 ;;		Unchanged: 0/0
  3565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3566 ;;      Params:         2       0       0       0       0       0       0
  3567 ;;      Locals:         0       0       0       0       0       0       0
  3568 ;;      Temps:          2       0       0       0       0       0       0
  3569 ;;      Totals:         4       0       0       0       0       0       0
  3570 ;;Total ram usage:        4 bytes
  3571 ;; Hardware stack levels used:    1
  3572 ;; This function calls:
  3573 ;;		Nothing
  3574 ;; This function is called by:
  3575 ;;		_capTouch
  3576 ;;		_readAllSensors
  3577 ;; This function uses a non-reentrant model
  3578 ;;
  3579                           
  3580                           	psect	text27
  3581  0071E6                     __ptext27:
  3582                           	opt callstack 0
  3583  0071E6                     _abs:
  3584                           	opt callstack 27
  3585                           
  3586                           ;incstack = 0
  3587  0071E6  BE02               	btfsc	abs@a+1,7,c
  3588  0071E8  D005               	goto	u1180
  3589  0071EA  5002               	movf	abs@a+1,w,c
  3590  0071EC  E110               	bnz	l1272
  3591  0071EE  0401               	decf	abs@a,w,c
  3592  0071F0  B0D8               	btfsc	status,0,c
  3593  0071F2  D00D               	goto	l1272
  3594  0071F4                     u1180:
  3595  0071F4  C001  F003         	movff	abs@a,??_abs
  3596  0071F8  C002  F004         	movff	abs@a+1,??_abs+1
  3597  0071FC  1E03               	comf	??_abs,f,c
  3598  0071FE  1E04               	comf	??_abs+1,f,c
  3599  007200  4A03               	infsnz	??_abs,f,c
  3600  007202  2A04               	incf	??_abs+1,f,c
  3601  007204  C003  F001         	movff	??_abs,?_abs
  3602  007208  C004  F002         	movff	??_abs+1,?_abs+1
  3603  00720C  0012               	return	
  3604  00720E                     l1272:
  3605  00720E  C001  F001         	movff	abs@a,?_abs
  3606  007212  C002  F002         	movff	abs@a+1,?_abs+1
  3607  007216  0012               	return		;funcret
  3608  007218                     __end_of_abs:
  3609                           	opt callstack 0
  3610                           
  3611 ;; *************** function _calibrate *****************
  3612 ;; Defined at:
  3613 ;;		line 138 in file "./functions.c"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;		None
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;  b               1   47[COMRAM] unsigned char 
  3618 ;;  samples         1   45[COMRAM] unsigned char 
  3619 ;;  samples         1   44[COMRAM] unsigned char 
  3620 ;;  samples         1   43[COMRAM] unsigned char 
  3621 ;;  samples         1   42[COMRAM] unsigned char 
  3622 ;;  samples         1   41[COMRAM] unsigned char 
  3623 ;;  a               1   46[COMRAM] unsigned char 
  3624 ;;  rangeArray     10   31[COMRAM] PTR unsigned char [5]
  3625 ;;		 -> RRranges(5), Rranges(5), Mranges(5), Lranges(5), 
  3626 ;;		 -> LLranges(5), 
  3627 ;;  temp            1   48[COMRAM] unsigned char 
  3628 ;; Return value:  Size  Location     Type
  3629 ;;                  1    wreg      void 
  3630 ;; Registers used:
  3631 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3632 ;; Tracked objects:
  3633 ;;		On entry : 0/0
  3634 ;;		On exit  : 0/0
  3635 ;;		Unchanged: 0/0
  3636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3637 ;;      Params:         0       0       0       0       0       0       0
  3638 ;;      Locals:        18       0       0       0       0       0       0
  3639 ;;      Temps:          2       0       0       0       0       0       0
  3640 ;;      Totals:        20       0       0       0       0       0       0
  3641 ;;Total ram usage:       20 bytes
  3642 ;; Hardware stack levels used:    1
  3643 ;; Hardware stack levels required when called:    3
  3644 ;; This function calls:
  3645 ;;		_aveSensor
  3646 ;;		_ranges
  3647 ;;		_sixSecDelay
  3648 ;; This function is called by:
  3649 ;;		_RCE
  3650 ;; This function uses a non-reentrant model
  3651 ;;
  3652                           
  3653                           	psect	text28
  3654  007D44                     __ptext28:
  3655                           	opt callstack 0
  3656  007D44                     _calibrate:
  3657                           	opt callstack 26
  3658                           
  3659                           ;./functions.c: 140:     ranges();
  3660                           
  3661                           ;incstack = 0
  3662  007D44  EC65  F03C         	call	_ranges	;wreg free
  3663                           
  3664                           ;./functions.c: 141:     unsigned char *rangeArray[] = {LLranges, Lranges, Mranges, Rran
      +                          ges, RRranges};
  3665  007D48  EE20  F0B0         	lfsr	2,calibrate@F6017
  3666  007D4C  EE10  F020         	lfsr	1,calibrate@rangeArray
  3667  007D50  0E09               	movlw	9
  3668  007D52                     u1581:
  3669  007D52  CFDB FFE3          	movff	plusw2,plusw1
  3670  007D56  06E8               	decf	wreg,f,c
  3671  007D58  E2FC               	bc	u1581
  3672                           
  3673                           ;./functions.c: 142:     for (unsigned char a = 0; a < 5; a++)
  3674  007D5A  0E00               	movlw	0
  3675  007D5C  6E2F               	movwf	calibrate@a,c
  3676  007D5E                     l3003:
  3677                           
  3678                           ;./functions.c: 143:     {;./functions.c: 144:         for (unsigned char b = 0; b < 5; 
      +                          b++)
  3679  007D5E  0E00               	movlw	0
  3680  007D60  6E30               	movwf	calibrate@b,c
  3681  007D62                     l3009:
  3682                           
  3683                           ;./functions.c: 145:         {;./functions.c: 146:             rangeArray[a][b] = 0;
  3684  007D62  502F               	movf	calibrate@a,w,c
  3685  007D64  0D02               	mullw	2
  3686  007D66  0E20               	movlw	low calibrate@rangeArray
  3687  007D68  24F3               	addwf	prodl,w,c
  3688  007D6A  6ED9               	movwf	fsr2l,c
  3689  007D6C  0E00               	movlw	high calibrate@rangeArray
  3690  007D6E  20F4               	addwfc	prodh,w,c
  3691  007D70  6EDA               	movwf	fsr2h,c
  3692  007D72  CFDE F01E          	movff	postinc2,??_calibrate
  3693  007D76  CFDD F01F          	movff	postdec2,??_calibrate+1
  3694  007D7A  5030               	movf	calibrate@b,w,c
  3695  007D7C  241E               	addwf	??_calibrate,w,c
  3696  007D7E  6ED9               	movwf	fsr2l,c
  3697  007D80  0E00               	movlw	0
  3698  007D82  201F               	addwfc	??_calibrate+1,w,c
  3699  007D84  6EDA               	movwf	fsr2h,c
  3700  007D86  0E00               	movlw	0
  3701  007D88  6EDF               	movwf	indf2,c
  3702                           
  3703                           ;./functions.c: 147:         }
  3704  007D8A  2A30               	incf	calibrate@b,f,c
  3705  007D8C  0E04               	movlw	4
  3706  007D8E  6430               	cpfsgt	calibrate@b,c
  3707  007D90  D7E8               	goto	l3009
  3708                           
  3709                           ;./functions.c: 148:     }
  3710  007D92  2A2F               	incf	calibrate@a,f,c
  3711  007D94  0E04               	movlw	4
  3712  007D96  642F               	cpfsgt	calibrate@a,c
  3713  007D98  D7E2               	goto	l3003
  3714                           
  3715                           ;./functions.c: 150:     PORTA = 0;
  3716  007D9A  0E00               	movlw	0
  3717  007D9C  6E80               	movwf	3968,c	;volatile
  3718                           
  3719                           ;./functions.c: 154:     PORTD = 0b11000001;
  3720  007D9E  0EC1               	movlw	193
  3721  007DA0  6E83               	movwf	3971,c	;volatile
  3722                           
  3723                           ;./functions.c: 155:     sixSecDelay();
  3724  007DA2  EC21  F038         	call	_sixSecDelay	;wreg free
  3725                           
  3726                           ;./functions.c: 156:     for (unsigned char samples = 0; samples < 250; samples++)
  3727  007DA6  0E00               	movlw	0
  3728  007DA8  6E2A               	movwf	calibrate@samples,c
  3729  007DAA                     l3029:
  3730                           
  3731                           ;./functions.c: 157:     {;./functions.c: 158:         temp = aveSensor(12);
  3732  007DAA  0E0C               	movlw	12
  3733  007DAC  EC46  F039         	call	_aveSensor
  3734  007DB0  6E31               	movwf	calibrate@temp,c
  3735                           
  3736                           ;./functions.c: 159:         if (temp >= LLranges[0])
  3737  007DB2  0100               	movlb	0	; () banked
  3738  007DB4  51E4               	movf	_LLranges& (0+255),w,b
  3739  007DB6  5C31               	subwf	calibrate@temp,w,c
  3740  007DB8  B0D8               	btfsc	status,0,c
  3741                           
  3742                           ; BSR set to: 0
  3743                           ;./functions.c: 160:         {;./functions.c: 161:             LLranges[0] = temp;
  3744  007DBA  C031  F0E4         	movff	calibrate@temp,_LLranges
  3745                           
  3746                           ; BSR set to: 0
  3747                           ;./functions.c: 163:         temp = aveSensor(10);
  3748  007DBE  0E0A               	movlw	10
  3749  007DC0  EC46  F039         	call	_aveSensor
  3750  007DC4  6E31               	movwf	calibrate@temp,c
  3751                           
  3752                           ;./functions.c: 164:         if (temp >= Lranges[0])
  3753  007DC6  0100               	movlb	0	; () banked
  3754  007DC8  51DF               	movf	_Lranges& (0+255),w,b
  3755  007DCA  5C31               	subwf	calibrate@temp,w,c
  3756  007DCC  B0D8               	btfsc	status,0,c
  3757                           
  3758                           ; BSR set to: 0
  3759                           ;./functions.c: 165:         {;./functions.c: 166:             Lranges[0] = temp;
  3760  007DCE  C031  F0DF         	movff	calibrate@temp,_Lranges
  3761                           
  3762                           ; BSR set to: 0
  3763                           ;./functions.c: 168:         temp = aveSensor(8);
  3764  007DD2  0E08               	movlw	8
  3765  007DD4  EC46  F039         	call	_aveSensor
  3766  007DD8  6E31               	movwf	calibrate@temp,c
  3767                           
  3768                           ;./functions.c: 169:         if (temp >= Mranges[0])
  3769  007DDA  0100               	movlb	0	; () banked
  3770  007DDC  51DA               	movf	_Mranges& (0+255),w,b
  3771  007DDE  5C31               	subwf	calibrate@temp,w,c
  3772  007DE0  B0D8               	btfsc	status,0,c
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;./functions.c: 170:         {;./functions.c: 171:             Mranges[0] = temp;
  3776  007DE2  C031  F0DA         	movff	calibrate@temp,_Mranges
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;./functions.c: 173:         temp = aveSensor(9);
  3780  007DE6  0E09               	movlw	9
  3781  007DE8  EC46  F039         	call	_aveSensor
  3782  007DEC  6E31               	movwf	calibrate@temp,c
  3783                           
  3784                           ;./functions.c: 174:         if (temp >= Rranges[0])
  3785  007DEE  5058               	movf	_Rranges,w,c
  3786  007DF0  5C31               	subwf	calibrate@temp,w,c
  3787  007DF2  B0D8               	btfsc	status,0,c
  3788                           
  3789                           ;./functions.c: 175:         {;./functions.c: 176:             Rranges[0] = temp;
  3790  007DF4  C031  F058         	movff	calibrate@temp,_Rranges
  3791                           
  3792                           ;./functions.c: 178:         temp = aveSensor(13);
  3793  007DF8  0E0D               	movlw	13
  3794  007DFA  EC46  F039         	call	_aveSensor
  3795  007DFE  6E31               	movwf	calibrate@temp,c
  3796                           
  3797                           ;./functions.c: 179:         if (temp >= RRranges[0])
  3798  007E00  0100               	movlb	0	; () banked
  3799  007E02  51D5               	movf	_RRranges& (0+255),w,b
  3800  007E04  5C31               	subwf	calibrate@temp,w,c
  3801  007E06  B0D8               	btfsc	status,0,c
  3802                           
  3803                           ; BSR set to: 0
  3804                           ;./functions.c: 180:         {;./functions.c: 181:             RRranges[0] = temp;
  3805  007E08  C031  F0D5         	movff	calibrate@temp,_RRranges
  3806                           
  3807                           ; BSR set to: 0
  3808                           ;./functions.c: 183:     }
  3809  007E0C  2A2A               	incf	calibrate@samples,f,c
  3810                           
  3811                           ; BSR set to: 0
  3812  007E0E  0EF9               	movlw	249
  3813  007E10  642A               	cpfsgt	calibrate@samples,c
  3814  007E12  D7CB               	goto	l3029
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;./functions.c: 184:     PORTAbits.RA0 = 1;
  3818  007E14  8080               	bsf	3968,0,c	;volatile
  3819                           
  3820                           ; BSR set to: 0
  3821                           ;./functions.c: 185:     PORTD = 0b10000010;
  3822  007E16  0E82               	movlw	130
  3823  007E18  6E83               	movwf	3971,c	;volatile
  3824                           
  3825                           ; BSR set to: 0
  3826                           ;./functions.c: 187:     sixSecDelay();
  3827  007E1A  EC21  F038         	call	_sixSecDelay	;wreg free
  3828                           
  3829                           ;./functions.c: 188:     for (unsigned char samples = 0; samples < 250; samples++)
  3830  007E1E  0E00               	movlw	0
  3831  007E20  6E2B               	movwf	calibrate@samples_1256,c
  3832  007E22                     l3073:
  3833                           
  3834                           ;./functions.c: 189:     {;./functions.c: 190:         temp = aveSensor(12);
  3835  007E22  0E0C               	movlw	12
  3836  007E24  EC46  F039         	call	_aveSensor
  3837  007E28  6E31               	movwf	calibrate@temp,c
  3838                           
  3839                           ;./functions.c: 191:         if (temp >= LLranges[1])
  3840  007E2A  0100               	movlb	0	; () banked
  3841  007E2C  51E5               	movf	(_LLranges+1)& (0+255),w,b
  3842  007E2E  5C31               	subwf	calibrate@temp,w,c
  3843  007E30  B0D8               	btfsc	status,0,c
  3844                           
  3845                           ; BSR set to: 0
  3846                           ;./functions.c: 192:         {;./functions.c: 193:             LLranges[1] = temp;
  3847  007E32  C031  F0E5         	movff	calibrate@temp,_LLranges+1
  3848                           
  3849                           ; BSR set to: 0
  3850                           ;./functions.c: 195:         temp = aveSensor(10);
  3851  007E36  0E0A               	movlw	10
  3852  007E38  EC46  F039         	call	_aveSensor
  3853  007E3C  6E31               	movwf	calibrate@temp,c
  3854                           
  3855                           ;./functions.c: 196:         if (temp >= Lranges[1])
  3856  007E3E  0100               	movlb	0	; () banked
  3857  007E40  51E0               	movf	(_Lranges+1)& (0+255),w,b
  3858  007E42  5C31               	subwf	calibrate@temp,w,c
  3859  007E44  B0D8               	btfsc	status,0,c
  3860                           
  3861                           ; BSR set to: 0
  3862                           ;./functions.c: 197:         {;./functions.c: 198:             Lranges[1] = temp;
  3863  007E46  C031  F0E0         	movff	calibrate@temp,_Lranges+1
  3864                           
  3865                           ; BSR set to: 0
  3866                           ;./functions.c: 200:         temp = aveSensor(8);
  3867  007E4A  0E08               	movlw	8
  3868  007E4C  EC46  F039         	call	_aveSensor
  3869  007E50  6E31               	movwf	calibrate@temp,c
  3870                           
  3871                           ;./functions.c: 201:         if (temp >= Mranges[1])
  3872  007E52  0100               	movlb	0	; () banked
  3873  007E54  51DB               	movf	(_Mranges+1)& (0+255),w,b
  3874  007E56  5C31               	subwf	calibrate@temp,w,c
  3875  007E58  B0D8               	btfsc	status,0,c
  3876                           
  3877                           ; BSR set to: 0
  3878                           ;./functions.c: 202:         {;./functions.c: 203:             Mranges[1] = temp;
  3879  007E5A  C031  F0DB         	movff	calibrate@temp,_Mranges+1
  3880                           
  3881                           ; BSR set to: 0
  3882                           ;./functions.c: 205:         temp = aveSensor(9);
  3883  007E5E  0E09               	movlw	9
  3884  007E60  EC46  F039         	call	_aveSensor
  3885  007E64  6E31               	movwf	calibrate@temp,c
  3886                           
  3887                           ;./functions.c: 206:         if (temp >= Rranges[1])
  3888  007E66  5059               	movf	_Rranges+1,w,c
  3889  007E68  5C31               	subwf	calibrate@temp,w,c
  3890  007E6A  B0D8               	btfsc	status,0,c
  3891                           
  3892                           ;./functions.c: 207:         {;./functions.c: 208:             Rranges[1] = temp;
  3893  007E6C  C031  F059         	movff	calibrate@temp,_Rranges+1
  3894                           
  3895                           ;./functions.c: 210:         temp = aveSensor(13);
  3896  007E70  0E0D               	movlw	13
  3897  007E72  EC46  F039         	call	_aveSensor
  3898  007E76  6E31               	movwf	calibrate@temp,c
  3899                           
  3900                           ;./functions.c: 211:         if (temp >= RRranges[1])
  3901  007E78  0100               	movlb	0	; () banked
  3902  007E7A  51D6               	movf	(_RRranges+1)& (0+255),w,b
  3903  007E7C  5C31               	subwf	calibrate@temp,w,c
  3904  007E7E  B0D8               	btfsc	status,0,c
  3905                           
  3906                           ; BSR set to: 0
  3907                           ;./functions.c: 212:         {;./functions.c: 213:             RRranges[1] = temp;
  3908  007E80  C031  F0D6         	movff	calibrate@temp,_RRranges+1
  3909                           
  3910                           ; BSR set to: 0
  3911                           ;./functions.c: 215:     }
  3912  007E84  2A2B               	incf	calibrate@samples_1256,f,c
  3913                           
  3914                           ; BSR set to: 0
  3915  007E86  0EF9               	movlw	249
  3916  007E88  642B               	cpfsgt	calibrate@samples_1256,c
  3917  007E8A  D7CB               	goto	l3073
  3918                           
  3919                           ; BSR set to: 0
  3920                           ;./functions.c: 216:     PORTAbits.RA1 = 1;
  3921  007E8C  8280               	bsf	3968,1,c	;volatile
  3922                           
  3923                           ; BSR set to: 0
  3924                           ;./functions.c: 217:     PORTD = 0b10001000;
  3925  007E8E  0E88               	movlw	136
  3926  007E90  6E83               	movwf	3971,c	;volatile
  3927                           
  3928                           ; BSR set to: 0
  3929                           ;./functions.c: 219:     sixSecDelay();
  3930  007E92  EC21  F038         	call	_sixSecDelay	;wreg free
  3931                           
  3932                           ;./functions.c: 220:     for (unsigned char samples = 0; samples < 250; samples++)
  3933  007E96  0E00               	movlw	0
  3934  007E98  6E2C               	movwf	calibrate@samples_1257,c
  3935  007E9A                     l3117:
  3936                           
  3937                           ;./functions.c: 221:     {;./functions.c: 222:         temp = aveSensor(12);
  3938  007E9A  0E0C               	movlw	12
  3939  007E9C  EC46  F039         	call	_aveSensor
  3940  007EA0  6E31               	movwf	calibrate@temp,c
  3941                           
  3942                           ;./functions.c: 223:         if (temp >= LLranges[2])
  3943  007EA2  0100               	movlb	0	; () banked
  3944  007EA4  51E6               	movf	(_LLranges+2)& (0+255),w,b
  3945  007EA6  5C31               	subwf	calibrate@temp,w,c
  3946  007EA8  B0D8               	btfsc	status,0,c
  3947                           
  3948                           ; BSR set to: 0
  3949                           ;./functions.c: 224:         {;./functions.c: 225:             LLranges[2] = temp;
  3950  007EAA  C031  F0E6         	movff	calibrate@temp,_LLranges+2
  3951                           
  3952                           ; BSR set to: 0
  3953                           ;./functions.c: 227:         temp = aveSensor(10);
  3954  007EAE  0E0A               	movlw	10
  3955  007EB0  EC46  F039         	call	_aveSensor
  3956  007EB4  6E31               	movwf	calibrate@temp,c
  3957                           
  3958                           ;./functions.c: 228:         if (temp >= Lranges[2])
  3959  007EB6  0100               	movlb	0	; () banked
  3960  007EB8  51E1               	movf	(_Lranges+2)& (0+255),w,b
  3961  007EBA  5C31               	subwf	calibrate@temp,w,c
  3962  007EBC  B0D8               	btfsc	status,0,c
  3963                           
  3964                           ; BSR set to: 0
  3965                           ;./functions.c: 229:         {;./functions.c: 230:             Lranges[2] = temp;
  3966  007EBE  C031  F0E1         	movff	calibrate@temp,_Lranges+2
  3967                           
  3968                           ; BSR set to: 0
  3969                           ;./functions.c: 232:         temp = aveSensor(8);
  3970  007EC2  0E08               	movlw	8
  3971  007EC4  EC46  F039         	call	_aveSensor
  3972  007EC8  6E31               	movwf	calibrate@temp,c
  3973                           
  3974                           ;./functions.c: 233:         if (temp >= Mranges[2])
  3975  007ECA  0100               	movlb	0	; () banked
  3976  007ECC  51DC               	movf	(_Mranges+2)& (0+255),w,b
  3977  007ECE  5C31               	subwf	calibrate@temp,w,c
  3978  007ED0  B0D8               	btfsc	status,0,c
  3979                           
  3980                           ; BSR set to: 0
  3981                           ;./functions.c: 234:         {;./functions.c: 235:             Mranges[2] = temp;
  3982  007ED2  C031  F0DC         	movff	calibrate@temp,_Mranges+2
  3983                           
  3984                           ; BSR set to: 0
  3985                           ;./functions.c: 237:         temp = aveSensor(9);
  3986  007ED6  0E09               	movlw	9
  3987  007ED8  EC46  F039         	call	_aveSensor
  3988  007EDC  6E31               	movwf	calibrate@temp,c
  3989                           
  3990                           ;./functions.c: 238:         if (temp >= Rranges[2])
  3991  007EDE  505A               	movf	_Rranges+2,w,c
  3992  007EE0  5C31               	subwf	calibrate@temp,w,c
  3993  007EE2  B0D8               	btfsc	status,0,c
  3994                           
  3995                           ;./functions.c: 239:         {;./functions.c: 240:             Rranges[2] = temp;
  3996  007EE4  C031  F05A         	movff	calibrate@temp,_Rranges+2
  3997                           
  3998                           ;./functions.c: 242:         temp = aveSensor(13);
  3999  007EE8  0E0D               	movlw	13
  4000  007EEA  EC46  F039         	call	_aveSensor
  4001  007EEE  6E31               	movwf	calibrate@temp,c
  4002                           
  4003                           ;./functions.c: 243:         if (temp >= RRranges[2])
  4004  007EF0  0100               	movlb	0	; () banked
  4005  007EF2  51D7               	movf	(_RRranges+2)& (0+255),w,b
  4006  007EF4  5C31               	subwf	calibrate@temp,w,c
  4007  007EF6  B0D8               	btfsc	status,0,c
  4008                           
  4009                           ; BSR set to: 0
  4010                           ;./functions.c: 244:         {;./functions.c: 245:             RRranges[2] = temp;
  4011  007EF8  C031  F0D7         	movff	calibrate@temp,_RRranges+2
  4012                           
  4013                           ; BSR set to: 0
  4014                           ;./functions.c: 247:     }
  4015  007EFC  2A2C               	incf	calibrate@samples_1257,f,c
  4016                           
  4017                           ; BSR set to: 0
  4018  007EFE  0EF9               	movlw	249
  4019  007F00  642C               	cpfsgt	calibrate@samples_1257,c
  4020  007F02  D7CB               	goto	l3117
  4021                           
  4022                           ; BSR set to: 0
  4023                           ;./functions.c: 248:     PORTAbits.RA2 = 1;
  4024  007F04  8480               	bsf	3968,2,c	;volatile
  4025                           
  4026                           ; BSR set to: 0
  4027                           ;./functions.c: 249:     PORTD = 0b10000000;
  4028  007F06  0E80               	movlw	128
  4029  007F08  6E83               	movwf	3971,c	;volatile
  4030                           
  4031                           ; BSR set to: 0
  4032                           ;./functions.c: 251:     sixSecDelay();
  4033  007F0A  EC21  F038         	call	_sixSecDelay	;wreg free
  4034                           
  4035                           ;./functions.c: 252:     for (unsigned char samples = 0; samples < 250; samples++)
  4036  007F0E  0E00               	movlw	0
  4037  007F10  6E2D               	movwf	calibrate@samples_1258,c
  4038  007F12                     l3161:
  4039                           
  4040                           ;./functions.c: 253:     {;./functions.c: 254:         temp = aveSensor(12);
  4041  007F12  0E0C               	movlw	12
  4042  007F14  EC46  F039         	call	_aveSensor
  4043  007F18  6E31               	movwf	calibrate@temp,c
  4044                           
  4045                           ;./functions.c: 255:         if (temp >= LLranges[3])
  4046  007F1A  0100               	movlb	0	; () banked
  4047  007F1C  51E7               	movf	(_LLranges+3)& (0+255),w,b
  4048  007F1E  5C31               	subwf	calibrate@temp,w,c
  4049  007F20  B0D8               	btfsc	status,0,c
  4050                           
  4051                           ; BSR set to: 0
  4052                           ;./functions.c: 256:         {;./functions.c: 257:             LLranges[3] = temp;
  4053  007F22  C031  F0E7         	movff	calibrate@temp,_LLranges+3
  4054                           
  4055                           ; BSR set to: 0
  4056                           ;./functions.c: 259:         temp = aveSensor(10);
  4057  007F26  0E0A               	movlw	10
  4058  007F28  EC46  F039         	call	_aveSensor
  4059  007F2C  6E31               	movwf	calibrate@temp,c
  4060                           
  4061                           ;./functions.c: 260:         if (temp >= Lranges[3])
  4062  007F2E  0100               	movlb	0	; () banked
  4063  007F30  51E2               	movf	(_Lranges+3)& (0+255),w,b
  4064  007F32  5C31               	subwf	calibrate@temp,w,c
  4065  007F34  B0D8               	btfsc	status,0,c
  4066                           
  4067                           ; BSR set to: 0
  4068                           ;./functions.c: 261:         {;./functions.c: 262:             Lranges[3] = temp;
  4069  007F36  C031  F0E2         	movff	calibrate@temp,_Lranges+3
  4070                           
  4071                           ; BSR set to: 0
  4072                           ;./functions.c: 264:         temp = aveSensor(8);
  4073  007F3A  0E08               	movlw	8
  4074  007F3C  EC46  F039         	call	_aveSensor
  4075  007F40  6E31               	movwf	calibrate@temp,c
  4076                           
  4077                           ;./functions.c: 265:         if (temp >= Mranges[3])
  4078  007F42  0100               	movlb	0	; () banked
  4079  007F44  51DD               	movf	(_Mranges+3)& (0+255),w,b
  4080  007F46  5C31               	subwf	calibrate@temp,w,c
  4081  007F48  B0D8               	btfsc	status,0,c
  4082                           
  4083                           ; BSR set to: 0
  4084                           ;./functions.c: 266:         {;./functions.c: 267:             Mranges[3] = temp;
  4085  007F4A  C031  F0DD         	movff	calibrate@temp,_Mranges+3
  4086                           
  4087                           ; BSR set to: 0
  4088                           ;./functions.c: 269:         temp = aveSensor(9);
  4089  007F4E  0E09               	movlw	9
  4090  007F50  EC46  F039         	call	_aveSensor
  4091  007F54  6E31               	movwf	calibrate@temp,c
  4092                           
  4093                           ;./functions.c: 270:         if (temp >= Rranges[3])
  4094  007F56  505B               	movf	_Rranges+3,w,c
  4095  007F58  5C31               	subwf	calibrate@temp,w,c
  4096  007F5A  B0D8               	btfsc	status,0,c
  4097                           
  4098                           ;./functions.c: 271:         {;./functions.c: 272:             Rranges[3] = temp;
  4099  007F5C  C031  F05B         	movff	calibrate@temp,_Rranges+3
  4100                           
  4101                           ;./functions.c: 274:         temp = aveSensor(13);
  4102  007F60  0E0D               	movlw	13
  4103  007F62  EC46  F039         	call	_aveSensor
  4104  007F66  6E31               	movwf	calibrate@temp,c
  4105                           
  4106                           ;./functions.c: 275:         if (temp >= RRranges[3])
  4107  007F68  0100               	movlb	0	; () banked
  4108  007F6A  51D8               	movf	(_RRranges+3)& (0+255),w,b
  4109  007F6C  5C31               	subwf	calibrate@temp,w,c
  4110  007F6E  B0D8               	btfsc	status,0,c
  4111                           
  4112                           ; BSR set to: 0
  4113                           ;./functions.c: 276:         {;./functions.c: 277:             RRranges[3] = temp;
  4114  007F70  C031  F0D8         	movff	calibrate@temp,_RRranges+3
  4115                           
  4116                           ; BSR set to: 0
  4117                           ;./functions.c: 279:     }
  4118  007F74  2A2D               	incf	calibrate@samples_1258,f,c
  4119                           
  4120                           ; BSR set to: 0
  4121  007F76  0EF9               	movlw	249
  4122  007F78  642D               	cpfsgt	calibrate@samples_1258,c
  4123  007F7A  D7CB               	goto	l3161
  4124                           
  4125                           ; BSR set to: 0
  4126                           ;./functions.c: 280:     PORTAbits.RA3 = 1;
  4127  007F7C  8680               	bsf	3968,3,c	;volatile
  4128                           
  4129                           ; BSR set to: 0
  4130                           ;./functions.c: 281:     PORTD = 0b11001000;
  4131  007F7E  0EC8               	movlw	200
  4132  007F80  6E83               	movwf	3971,c	;volatile
  4133                           
  4134                           ; BSR set to: 0
  4135                           ;./functions.c: 283:     sixSecDelay();
  4136  007F82  EC21  F038         	call	_sixSecDelay	;wreg free
  4137                           
  4138                           ;./functions.c: 284:     for (unsigned char samples = 0; samples < 250; samples++)
  4139  007F86  0E00               	movlw	0
  4140  007F88  6E2E               	movwf	calibrate@samples_1259,c
  4141  007F8A                     l3205:
  4142                           
  4143                           ;./functions.c: 285:     {;./functions.c: 286:         temp = aveSensor(12);
  4144  007F8A  0E0C               	movlw	12
  4145  007F8C  EC46  F039         	call	_aveSensor
  4146  007F90  6E31               	movwf	calibrate@temp,c
  4147                           
  4148                           ;./functions.c: 287:         if (temp >= LLranges[4])
  4149  007F92  0100               	movlb	0	; () banked
  4150  007F94  51E8               	movf	(_LLranges+4)& (0+255),w,b
  4151  007F96  5C31               	subwf	calibrate@temp,w,c
  4152  007F98  B0D8               	btfsc	status,0,c
  4153                           
  4154                           ; BSR set to: 0
  4155                           ;./functions.c: 288:         {;./functions.c: 289:             LLranges[4] = temp;
  4156  007F9A  C031  F0E8         	movff	calibrate@temp,_LLranges+4
  4157                           
  4158                           ; BSR set to: 0
  4159                           ;./functions.c: 291:         temp = aveSensor(10);
  4160  007F9E  0E0A               	movlw	10
  4161  007FA0  EC46  F039         	call	_aveSensor
  4162  007FA4  6E31               	movwf	calibrate@temp,c
  4163                           
  4164                           ;./functions.c: 292:         if (temp >= Lranges[4])
  4165  007FA6  0100               	movlb	0	; () banked
  4166  007FA8  51E3               	movf	(_Lranges+4)& (0+255),w,b
  4167  007FAA  5C31               	subwf	calibrate@temp,w,c
  4168  007FAC  B0D8               	btfsc	status,0,c
  4169                           
  4170                           ; BSR set to: 0
  4171                           ;./functions.c: 293:         {;./functions.c: 294:             Lranges[4] = temp;
  4172  007FAE  C031  F0E3         	movff	calibrate@temp,_Lranges+4
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;./functions.c: 296:         temp = aveSensor(8);
  4176  007FB2  0E08               	movlw	8
  4177  007FB4  EC46  F039         	call	_aveSensor
  4178  007FB8  6E31               	movwf	calibrate@temp,c
  4179                           
  4180                           ;./functions.c: 297:         if (temp >= Mranges[4])
  4181  007FBA  0100               	movlb	0	; () banked
  4182  007FBC  51DE               	movf	(_Mranges+4)& (0+255),w,b
  4183  007FBE  5C31               	subwf	calibrate@temp,w,c
  4184  007FC0  B0D8               	btfsc	status,0,c
  4185                           
  4186                           ; BSR set to: 0
  4187                           ;./functions.c: 298:         {;./functions.c: 299:             Mranges[4] = temp;
  4188  007FC2  C031  F0DE         	movff	calibrate@temp,_Mranges+4
  4189                           
  4190                           ; BSR set to: 0
  4191                           ;./functions.c: 301:         temp = aveSensor(9);
  4192  007FC6  0E09               	movlw	9
  4193  007FC8  EC46  F039         	call	_aveSensor
  4194  007FCC  6E31               	movwf	calibrate@temp,c
  4195                           
  4196                           ;./functions.c: 302:         if (temp >= Rranges[4])
  4197  007FCE  505C               	movf	_Rranges+4,w,c
  4198  007FD0  5C31               	subwf	calibrate@temp,w,c
  4199  007FD2  B0D8               	btfsc	status,0,c
  4200                           
  4201                           ;./functions.c: 303:         {;./functions.c: 304:             Rranges[4] = temp;
  4202  007FD4  C031  F05C         	movff	calibrate@temp,_Rranges+4
  4203                           
  4204                           ;./functions.c: 306:         temp = aveSensor(13);
  4205  007FD8  0E0D               	movlw	13
  4206  007FDA  EC46  F039         	call	_aveSensor
  4207  007FDE  6E31               	movwf	calibrate@temp,c
  4208                           
  4209                           ;./functions.c: 307:         if (temp >= RRranges[4])
  4210  007FE0  0100               	movlb	0	; () banked
  4211  007FE2  51D9               	movf	(_RRranges+4)& (0+255),w,b
  4212  007FE4  5C31               	subwf	calibrate@temp,w,c
  4213  007FE6  B0D8               	btfsc	status,0,c
  4214                           
  4215                           ; BSR set to: 0
  4216                           ;./functions.c: 308:         {;./functions.c: 309:             RRranges[4] = temp;
  4217  007FE8  C031  F0D9         	movff	calibrate@temp,_RRranges+4
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;./functions.c: 311:     }
  4221  007FEC  2A2E               	incf	calibrate@samples_1259,f,c
  4222                           
  4223                           ; BSR set to: 0
  4224  007FEE  0EF9               	movlw	249
  4225  007FF0  642E               	cpfsgt	calibrate@samples_1259,c
  4226  007FF2  D7CB               	goto	l3205
  4227                           
  4228                           ; BSR set to: 0
  4229                           ;./functions.c: 312:     PORTAbits.RA4 = 1;
  4230  007FF4  8880               	bsf	3968,4,c	;volatile
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;./functions.c: 314:     ranges();
  4234  007FF6  EC65  F03C         	call	_ranges	;wreg free
  4235                           
  4236                           ;./functions.c: 315:     PORTA = 0;
  4237  007FFA  0E00               	movlw	0
  4238  007FFC  6E80               	movwf	3968,c	;volatile
  4239  007FFE  0012               	return		;funcret
  4240  008000                     __end_of_calibrate:
  4241                           	opt callstack 0
  4242                           
  4243 ;; *************** function _sixSecDelay *****************
  4244 ;; Defined at:
  4245 ;;		line 945 in file "./functions.c"
  4246 ;; Parameters:    Size  Location     Type
  4247 ;;		None
  4248 ;; Auto vars:     Size  Location     Type
  4249 ;;  a               1    1[COMRAM] unsigned char 
  4250 ;; Return value:  Size  Location     Type
  4251 ;;                  1    wreg      void 
  4252 ;; Registers used:
  4253 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4254 ;; Tracked objects:
  4255 ;;		On entry : 0/0
  4256 ;;		On exit  : 0/0
  4257 ;;		Unchanged: 0/0
  4258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4259 ;;      Params:         0       0       0       0       0       0       0
  4260 ;;      Locals:         1       0       0       0       0       0       0
  4261 ;;      Temps:          0       0       0       0       0       0       0
  4262 ;;      Totals:         1       0       0       0       0       0       0
  4263 ;;Total ram usage:        1 bytes
  4264 ;; Hardware stack levels used:    1
  4265 ;; Hardware stack levels required when called:    1
  4266 ;; This function calls:
  4267 ;;		_msDelay
  4268 ;; This function is called by:
  4269 ;;		_calibrate
  4270 ;; This function uses a non-reentrant model
  4271 ;;
  4272                           
  4273                           	psect	text29
  4274  007042                     __ptext29:
  4275                           	opt callstack 0
  4276  007042                     _sixSecDelay:
  4277                           	opt callstack 27
  4278                           
  4279                           ;./functions.c: 947:     for (unsigned char a = 0; a < 90; a++)
  4280                           
  4281                           ;incstack = 0
  4282  007042  0E00               	movlw	0
  4283  007044  6E02               	movwf	sixSecDelay@a,c
  4284  007046                     l2751:
  4285                           
  4286                           ;./functions.c: 948:     {;./functions.c: 949:         msDelay(63);
  4287  007046  0E3F               	movlw	63
  4288  007048  EC88  F038         	call	_msDelay
  4289                           
  4290                           ;./functions.c: 950:     }
  4291  00704C  2A02               	incf	sixSecDelay@a,f,c
  4292  00704E  0E59               	movlw	89
  4293  007050  6402               	cpfsgt	sixSecDelay@a,c
  4294  007052  D7F9               	goto	l2751
  4295  007054  0012               	return	
  4296  007056                     __end_of_sixSecDelay:
  4297                           	opt callstack 0
  4298                           
  4299 ;; *************** function _msDelay *****************
  4300 ;; Defined at:
  4301 ;;		line 955 in file "./functions.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;  delayInMs       1    wreg     unsigned char 
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;  delayInMs       1    0[COMRAM] unsigned char 
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  1    wreg      void 
  4308 ;; Registers used:
  4309 ;;		wreg, status,2, status,0, prodl, prodh
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4315 ;;      Params:         0       0       0       0       0       0       0
  4316 ;;      Locals:         1       0       0       0       0       0       0
  4317 ;;      Temps:          0       0       0       0       0       0       0
  4318 ;;      Totals:         1       0       0       0       0       0       0
  4319 ;;Total ram usage:        1 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; This function calls:
  4322 ;;		Nothing
  4323 ;; This function is called by:
  4324 ;;		_pyCal
  4325 ;;		_navigate
  4326 ;;		_capTouch
  4327 ;;		_sixSecDelay
  4328 ;; This function uses a non-reentrant model
  4329 ;;
  4330                           
  4331                           	psect	text30
  4332  007110                     __ptext30:
  4333                           	opt callstack 0
  4334  007110                     _msDelay:
  4335                           	opt callstack 28
  4336                           
  4337                           ;incstack = 0
  4338                           ;msDelay@delayInMs stored from wreg
  4339  007110  6E01               	movwf	msDelay@delayInMs,c
  4340                           
  4341                           ;./functions.c: 955: void msDelay(unsigned char delayInMs);./functions.c: 956: {;./funct
      +                          ions.c: 957:     TMR6 = 0;
  4342  007112  0E00               	movlw	0
  4343  007114  010F               	movlb	15	; () banked
  4344  007116  6F4C               	movwf	76,b	;volatile
  4345                           
  4346                           ; BSR set to: 15
  4347                           ;./functions.c: 958:     PR6 = 4 * delayInMs;
  4348  007118  5001               	movf	msDelay@delayInMs,w,c
  4349  00711A  0D04               	mullw	4
  4350  00711C  CFF3 FF4B          	movff	prodl,3915	;volatile
  4351                           
  4352                           ; BSR set to: 15
  4353                           ;./functions.c: 959:     T6CON = 0xFF;
  4354  007120  694A               	setf	74,b	;volatile
  4355  007122                     l541:
  4356  007122  A47E               	btfss	3966,2,c	;volatile
  4357  007124  D7FE               	goto	l541
  4358                           
  4359                           ;./functions.c: 962:     PIR5bits.TMR6IF = 0;
  4360  007126  947E               	bcf	3966,2,c	;volatile
  4361                           
  4362                           ;./functions.c: 963:     T6CON = 0;
  4363  007128  0E00               	movlw	0
  4364  00712A  010F               	movlb	15	; () banked
  4365  00712C  6F4A               	movwf	74,b	;volatile
  4366                           
  4367                           ; BSR set to: 15
  4368  00712E  0012               	return		;funcret
  4369  007130                     __end_of_msDelay:
  4370                           	opt callstack 0
  4371                           
  4372 ;; *************** function _ranges *****************
  4373 ;; Defined at:
  4374 ;;		line 859 in file "./functions.c"
  4375 ;; Parameters:    Size  Location     Type
  4376 ;;		None
  4377 ;; Auto vars:     Size  Location     Type
  4378 ;;  b               1   27[COMRAM] unsigned char 
  4379 ;;  a               1   28[COMRAM] unsigned char 
  4380 ;;  rangeArray     10   17[COMRAM] PTR unsigned char [5]
  4381 ;;		 -> RRranges(5), Rranges(5), Mranges(5), Lranges(5), 
  4382 ;;		 -> LLranges(5), 
  4383 ;; Return value:  Size  Location     Type
  4384 ;;                  1    wreg      void 
  4385 ;; Registers used:
  4386 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4387 ;; Tracked objects:
  4388 ;;		On entry : 0/0
  4389 ;;		On exit  : 0/0
  4390 ;;		Unchanged: 0/0
  4391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4392 ;;      Params:         0       0       0       0       0       0       0
  4393 ;;      Locals:        12       0       0       0       0       0       0
  4394 ;;      Temps:          2       0       0       0       0       0       0
  4395 ;;      Totals:        14       0       0       0       0       0       0
  4396 ;;Total ram usage:       14 bytes
  4397 ;; Hardware stack levels used:    1
  4398 ;; Hardware stack levels required when called:    2
  4399 ;; This function calls:
  4400 ;;		___awdiv
  4401 ;;		_trans
  4402 ;;		_writeToEEP
  4403 ;; This function is called by:
  4404 ;;		_calibrate
  4405 ;; This function uses a non-reentrant model
  4406 ;;
  4407                           
  4408                           	psect	text31
  4409  0078CA                     __ptext31:
  4410                           	opt callstack 0
  4411  0078CA                     _ranges:
  4412                           	opt callstack 26
  4413                           
  4414                           ;./functions.c: 861:     unsigned char* rangeArray[] = {LLranges, Lranges, Mranges, Rran
      +                          ges, RRranges};
  4415                           
  4416                           ; BSR set to: 15
  4417                           ;incstack = 0
  4418  0078CA  EE20  F09C         	lfsr	2,ranges@F6083
  4419  0078CE  EE10  F012         	lfsr	1,ranges@rangeArray
  4420  0078D2  0E09               	movlw	9
  4421  0078D4                     u1281:
  4422  0078D4  CFDB FFE3          	movff	plusw2,plusw1
  4423  0078D8  06E8               	decf	wreg,f,c
  4424  0078DA  E2FC               	bc	u1281
  4425                           
  4426                           ;./functions.c: 863:     for (unsigned char a = 0; a < 5; a++){
  4427  0078DC  0E00               	movlw	0
  4428  0078DE  6E1D               	movwf	ranges@a,c
  4429  0078E0                     l2719:
  4430                           
  4431                           ;./functions.c: 864:         rangeArray[a][1] = (rangeArray[a][1] + rangeArray[a][2]) / 
      +                          2;
  4432  0078E0  501D               	movf	ranges@a,w,c
  4433  0078E2  0D02               	mullw	2
  4434  0078E4  0E12               	movlw	low ranges@rangeArray
  4435  0078E6  24F3               	addwf	prodl,w,c
  4436  0078E8  6ED9               	movwf	fsr2l,c
  4437  0078EA  0E00               	movlw	high ranges@rangeArray
  4438  0078EC  20F4               	addwfc	prodh,w,c
  4439  0078EE  6EDA               	movwf	fsr2h,c
  4440  0078F0  EE10 F001          	lfsr	1,1
  4441  0078F4  50DE               	movf	postinc2,w,c
  4442  0078F6  26E1               	addwf	fsr1l,f,c
  4443  0078F8  50DD               	movf	postdec2,w,c
  4444  0078FA  22E2               	addwfc	fsr1h,f,c
  4445  0078FC  501D               	movf	ranges@a,w,c
  4446  0078FE  0D02               	mullw	2
  4447  007900  0E12               	movlw	low ranges@rangeArray
  4448  007902  24F3               	addwf	prodl,w,c
  4449  007904  6ED9               	movwf	fsr2l,c
  4450  007906  0E00               	movlw	high ranges@rangeArray
  4451  007908  20F4               	addwfc	prodh,w,c
  4452  00790A  6EDA               	movwf	fsr2h,c
  4453  00790C  EE00 F002          	lfsr	0,2
  4454  007910  50DE               	movf	postinc2,w,c
  4455  007912  26E9               	addwf	fsr0l,f,c
  4456  007914  50DD               	movf	postdec2,w,c
  4457  007916  22EA               	addwfc	fsr0h,f,c
  4458  007918  50EF               	movf	indf0,w,c
  4459  00791A  6E10               	movwf	??_ranges& (0+255),c
  4460  00791C  501D               	movf	ranges@a,w,c
  4461  00791E  0D02               	mullw	2
  4462  007920  0E12               	movlw	low ranges@rangeArray
  4463  007922  24F3               	addwf	prodl,w,c
  4464  007924  6ED9               	movwf	fsr2l,c
  4465  007926  0E00               	movlw	high ranges@rangeArray
  4466  007928  20F4               	addwfc	prodh,w,c
  4467  00792A  6EDA               	movwf	fsr2h,c
  4468  00792C  EE00 F001          	lfsr	0,1
  4469  007930  50DE               	movf	postinc2,w,c
  4470  007932  26E9               	addwf	fsr0l,f,c
  4471  007934  50DD               	movf	postdec2,w,c
  4472  007936  22EA               	addwfc	fsr0h,f,c
  4473  007938  50EF               	movf	indf0,w,c
  4474  00793A  6E11               	movwf	(??_ranges+1)& (0+255),c
  4475  00793C  5011               	movf	??_ranges+1,w,c
  4476  00793E  2410               	addwf	??_ranges,w,c
  4477  007940  6E01               	movwf	___awdiv@dividend,c
  4478  007942  6A02               	clrf	___awdiv@dividend+1,c
  4479  007944  3602               	rlcf	___awdiv@dividend+1,f,c
  4480  007946  0E00               	movlw	0
  4481  007948  6E04               	movwf	___awdiv@divisor+1,c
  4482  00794A  0E02               	movlw	2
  4483  00794C  6E03               	movwf	___awdiv@divisor,c
  4484  00794E  EC2F  F03B         	call	___awdiv	;wreg free
  4485  007952  5001               	movf	?___awdiv,w,c
  4486  007954  6EE7               	movwf	indf1,c
  4487                           
  4488                           ;./functions.c: 865:         for (unsigned char b = 0; b < 5; b++){
  4489  007956  0E00               	movlw	0
  4490  007958  6E1C               	movwf	ranges@b,c
  4491  00795A                     l2727:
  4492                           
  4493                           ;./functions.c: 866:             trans(rangeArray[a][b]);
  4494  00795A  501D               	movf	ranges@a,w,c
  4495  00795C  0D02               	mullw	2
  4496  00795E  0E12               	movlw	low ranges@rangeArray
  4497  007960  24F3               	addwf	prodl,w,c
  4498  007962  6ED9               	movwf	fsr2l,c
  4499  007964  0E00               	movlw	high ranges@rangeArray
  4500  007966  20F4               	addwfc	prodh,w,c
  4501  007968  6EDA               	movwf	fsr2h,c
  4502  00796A  CFDE F010          	movff	postinc2,??_ranges
  4503  00796E  CFDD F011          	movff	postdec2,??_ranges+1
  4504  007972  501C               	movf	ranges@b,w,c
  4505  007974  2410               	addwf	??_ranges,w,c
  4506  007976  6ED9               	movwf	fsr2l,c
  4507  007978  0E00               	movlw	0
  4508  00797A  2011               	addwfc	??_ranges+1,w,c
  4509  00797C  6EDA               	movwf	fsr2h,c
  4510  00797E  50DF               	movf	indf2,w,c
  4511  007980  EC05  F038         	call	_trans
  4512                           
  4513                           ;./functions.c: 867:         }
  4514  007984  2A1C               	incf	ranges@b,f,c
  4515  007986  0E04               	movlw	4
  4516  007988  641C               	cpfsgt	ranges@b,c
  4517  00798A  D7E7               	goto	l2727
  4518                           
  4519                           ;./functions.c: 868:         trans('\n');
  4520  00798C  0E0A               	movlw	10
  4521  00798E  EC05  F038         	call	_trans
  4522                           
  4523                           ;./functions.c: 869:     }
  4524  007992  2A1D               	incf	ranges@a,f,c
  4525  007994  0E04               	movlw	4
  4526  007996  641D               	cpfsgt	ranges@a,c
  4527  007998  D7A3               	goto	l2719
  4528                           
  4529                           ;./functions.c: 871:     LLranges[0] += 10;
  4530  00799A  0E0A               	movlw	10
  4531  00799C  0100               	movlb	0	; () banked
  4532  00799E  27E4               	addwf	_LLranges& (0+255),f,b
  4533                           
  4534                           ;./functions.c: 872:     Lranges[0] += 10;
  4535  0079A0  0E0A               	movlw	10
  4536  0079A2  27DF               	addwf	_Lranges& (0+255),f,b
  4537                           
  4538                           ;./functions.c: 873:     Mranges[0] += 10;
  4539  0079A4  0E0A               	movlw	10
  4540  0079A6  27DA               	addwf	_Mranges& (0+255),f,b
  4541                           
  4542                           ;./functions.c: 874:     Rranges[0] += 10;
  4543  0079A8  0E0A               	movlw	10
  4544  0079AA  2658               	addwf	_Rranges,f,c
  4545                           
  4546                           ;./functions.c: 875:     RRranges[0] += 10;
  4547  0079AC  0E0A               	movlw	10
  4548  0079AE  27D5               	addwf	_RRranges& (0+255),f,b
  4549                           
  4550                           ; BSR set to: 0
  4551                           ;./functions.c: 877:     writeToEEP();
  4552  0079B0  EC46  F03A         	call	_writeToEEP	;wreg free
  4553  0079B4  0012               	return		;funcret
  4554  0079B6                     __end_of_ranges:
  4555                           	opt callstack 0
  4556                           
  4557 ;; *************** function _writeToEEP *****************
  4558 ;; Defined at:
  4559 ;;		line 893 in file "./functions.c"
  4560 ;; Parameters:    Size  Location     Type
  4561 ;;		None
  4562 ;; Auto vars:     Size  Location     Type
  4563 ;;  b               1   14[COMRAM] unsigned char 
  4564 ;;  a               1   13[COMRAM] unsigned char 
  4565 ;;  rs             10    2[COMRAM] PTR unsigned char [5]
  4566 ;;		 -> RRranges(5), Rranges(5), Mranges(5), Lranges(5), 
  4567 ;;		 -> LLranges(5), 
  4568 ;;  address         1   12[COMRAM] unsigned char 
  4569 ;; Return value:  Size  Location     Type
  4570 ;;                  1    wreg      void 
  4571 ;; Registers used:
  4572 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4573 ;; Tracked objects:
  4574 ;;		On entry : 0/0
  4575 ;;		On exit  : 0/0
  4576 ;;		Unchanged: 0/0
  4577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4578 ;;      Params:         0       0       0       0       0       0       0
  4579 ;;      Locals:        13       0       0       0       0       0       0
  4580 ;;      Temps:          2       0       0       0       0       0       0
  4581 ;;      Totals:        15       0       0       0       0       0       0
  4582 ;;Total ram usage:       15 bytes
  4583 ;; Hardware stack levels used:    1
  4584 ;; Hardware stack levels required when called:    1
  4585 ;; This function calls:
  4586 ;;		_EE_WRT
  4587 ;; This function is called by:
  4588 ;;		_ranges
  4589 ;; This function uses a non-reentrant model
  4590 ;;
  4591                           
  4592                           	psect	text32
  4593  00748C                     __ptext32:
  4594                           	opt callstack 0
  4595  00748C                     _writeToEEP:
  4596                           	opt callstack 26
  4597                           
  4598                           ;./functions.c: 894:     unsigned char* rs[] = {LLranges, Lranges, Mranges, Rranges, RRr
      +                          anges};
  4599                           
  4600                           ;incstack = 0
  4601  00748C  EE20  F092         	lfsr	2,writeToEEP@F6092
  4602  007490  EE10  F003         	lfsr	1,writeToEEP@rs
  4603  007494  0E09               	movlw	9
  4604  007496                     u1191:
  4605  007496  CFDB FFE3          	movff	plusw2,plusw1
  4606  00749A  06E8               	decf	wreg,f,c
  4607  00749C  E2FC               	bc	u1191
  4608                           
  4609                           ;./functions.c: 895:     unsigned char address = 0;
  4610  00749E  0E00               	movlw	0
  4611  0074A0  6E0D               	movwf	writeToEEP@address,c
  4612                           
  4613                           ;./functions.c: 896:     for (unsigned char a = 0; a < 5; a++){
  4614  0074A2  0E00               	movlw	0
  4615  0074A4  6E0E               	movwf	writeToEEP@a,c
  4616  0074A6                     l2611:
  4617                           
  4618                           ;./functions.c: 897:         for (unsigned char b = 0; b < 5; b++){
  4619  0074A6  0E00               	movlw	0
  4620  0074A8  6E0F               	movwf	writeToEEP@b,c
  4621  0074AA                     l513:
  4622                           
  4623                           ;./functions.c: 898:             EEADR = address++;
  4624  0074AA  C00D  FFA9         	movff	writeToEEP@address,4009	;volatile
  4625  0074AE  2A0D               	incf	writeToEEP@address,f,c
  4626                           
  4627                           ;./functions.c: 899:             EEDATA = rs[a][b];
  4628  0074B0  500E               	movf	writeToEEP@a,w,c
  4629  0074B2  0D02               	mullw	2
  4630  0074B4  0E03               	movlw	low writeToEEP@rs
  4631  0074B6  24F3               	addwf	prodl,w,c
  4632  0074B8  6ED9               	movwf	fsr2l,c
  4633  0074BA  0E00               	movlw	high writeToEEP@rs
  4634  0074BC  20F4               	addwfc	prodh,w,c
  4635  0074BE  6EDA               	movwf	fsr2h,c
  4636  0074C0  CFDE F001          	movff	postinc2,??_writeToEEP
  4637  0074C4  CFDD F002          	movff	postdec2,??_writeToEEP+1
  4638  0074C8  500F               	movf	writeToEEP@b,w,c
  4639  0074CA  2401               	addwf	??_writeToEEP,w,c
  4640  0074CC  6ED9               	movwf	fsr2l,c
  4641  0074CE  0E00               	movlw	0
  4642  0074D0  2002               	addwfc	??_writeToEEP+1,w,c
  4643  0074D2  6EDA               	movwf	fsr2h,c
  4644  0074D4  50DF               	movf	indf2,w,c
  4645  0074D6  6EA8               	movwf	4008,c	;volatile
  4646                           
  4647                           ;./functions.c: 900:             EE_WRT();
  4648  0074D8  EC6C  F038         	call	_EE_WRT	;wreg free
  4649                           
  4650                           ;./functions.c: 901:         }
  4651  0074DC  2A0F               	incf	writeToEEP@b,f,c
  4652  0074DE  0E04               	movlw	4
  4653  0074E0  640F               	cpfsgt	writeToEEP@b,c
  4654  0074E2  D7E3               	goto	l513
  4655                           
  4656                           ;./functions.c: 902:     }
  4657  0074E4  2A0E               	incf	writeToEEP@a,f,c
  4658  0074E6  0E04               	movlw	4
  4659  0074E8  640E               	cpfsgt	writeToEEP@a,c
  4660  0074EA  D7DD               	goto	l2611
  4661                           
  4662                           ;./functions.c: 903:     EECON1bits.WREN = 0;
  4663  0074EC  94A6               	bcf	4006,2,c	;volsfr
  4664                           
  4665                           ;./functions.c: 904:     return;
  4666  0074EE  0012               	return		;funcret
  4667  0074F0                     __end_of_writeToEEP:
  4668                           	opt callstack 0
  4669                           
  4670 ;; *************** function _EE_WRT *****************
  4671 ;; Defined at:
  4672 ;;		line 907 in file "./functions.c"
  4673 ;; Parameters:    Size  Location     Type
  4674 ;;		None
  4675 ;; Auto vars:     Size  Location     Type
  4676 ;;		None
  4677 ;; Return value:  Size  Location     Type
  4678 ;;                  1    wreg      void 
  4679 ;; Registers used:
  4680 ;;		wreg, status,2
  4681 ;; Tracked objects:
  4682 ;;		On entry : 0/0
  4683 ;;		On exit  : 0/0
  4684 ;;		Unchanged: 0/0
  4685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4686 ;;      Params:         0       0       0       0       0       0       0
  4687 ;;      Locals:         0       0       0       0       0       0       0
  4688 ;;      Temps:          0       0       0       0       0       0       0
  4689 ;;      Totals:         0       0       0       0       0       0       0
  4690 ;;Total ram usage:        0 bytes
  4691 ;; Hardware stack levels used:    1
  4692 ;; This function calls:
  4693 ;;		Nothing
  4694 ;; This function is called by:
  4695 ;;		_writeToEEP
  4696 ;; This function uses a non-reentrant model
  4697 ;;
  4698                           
  4699                           	psect	text33
  4700  0070D8                     __ptext33:
  4701                           	opt callstack 0
  4702  0070D8                     _EE_WRT:
  4703                           	opt callstack 26
  4704                           
  4705                           ;./functions.c: 908:     EECON1bits.EEPGD = 0;
  4706                           
  4707                           ;incstack = 0
  4708  0070D8  9EA6               	bcf	4006,7,c	;volsfr
  4709                           
  4710                           ;./functions.c: 909:     EECON1bits.CFGS = 0;
  4711  0070DA  9CA6               	bcf	4006,6,c	;volsfr
  4712                           
  4713                           ;./functions.c: 910:     EECON1bits.WREN = 1;
  4714  0070DC  84A6               	bsf	4006,2,c	;volsfr
  4715                           
  4716                           ;./functions.c: 911:     INTCONbits.GIE = 0;
  4717  0070DE  9EF2               	bcf	4082,7,c	;volatile
  4718                           
  4719                           ;./functions.c: 912:     EECON2 = 0x55;
  4720  0070E0  0E55               	movlw	85
  4721  0070E2  6EA7               	movwf	4007,c	;volsfr
  4722                           
  4723                           ;./functions.c: 913:     EECON2 = 0xAA;
  4724  0070E4  0EAA               	movlw	170
  4725  0070E6  6EA7               	movwf	4007,c	;volsfr
  4726                           
  4727                           ;./functions.c: 914:     EECON1bits.WR = 1;
  4728  0070E8  82A6               	bsf	4006,1,c	;volsfr
  4729                           
  4730                           ;./functions.c: 915:     INTCONbits.GIE = 1;
  4731  0070EA  8EF2               	bsf	4082,7,c	;volatile
  4732  0070EC                     l518:
  4733  0070EC  A8A1               	btfss	4001,4,c	;volatile
  4734  0070EE  D7FE               	goto	l518
  4735                           
  4736                           ;./functions.c: 917:     PIR2bits.EEIF = 0;
  4737  0070F0  98A1               	bcf	4001,4,c	;volatile
  4738  0070F2  0012               	return		;funcret
  4739  0070F4                     __end_of_EE_WRT:
  4740                           	opt callstack 0
  4741                           
  4742 ;; *************** function ___awdiv *****************
  4743 ;; Defined at:
  4744 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  4745 ;; Parameters:    Size  Location     Type
  4746 ;;  dividend        2    0[COMRAM] int 
  4747 ;;  divisor         2    2[COMRAM] int 
  4748 ;; Auto vars:     Size  Location     Type
  4749 ;;  quotient        2    6[COMRAM] int 
  4750 ;;  sign            1    5[COMRAM] unsigned char 
  4751 ;;  counter         1    4[COMRAM] unsigned char 
  4752 ;; Return value:  Size  Location     Type
  4753 ;;                  2    0[COMRAM] int 
  4754 ;; Registers used:
  4755 ;;		wreg, status,2, status,0
  4756 ;; Tracked objects:
  4757 ;;		On entry : 0/0
  4758 ;;		On exit  : 0/0
  4759 ;;		Unchanged: 0/0
  4760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4761 ;;      Params:         4       0       0       0       0       0       0
  4762 ;;      Locals:         4       0       0       0       0       0       0
  4763 ;;      Temps:          0       0       0       0       0       0       0
  4764 ;;      Totals:         8       0       0       0       0       0       0
  4765 ;;Total ram usage:        8 bytes
  4766 ;; Hardware stack levels used:    1
  4767 ;; This function calls:
  4768 ;;		Nothing
  4769 ;; This function is called by:
  4770 ;;		_ranges
  4771 ;; This function uses a non-reentrant model
  4772 ;;
  4773                           
  4774                           	psect	text34
  4775  00765E                     __ptext34:
  4776                           	opt callstack 0
  4777  00765E                     ___awdiv:
  4778                           	opt callstack 27
  4779                           
  4780                           ;incstack = 0
  4781  00765E  0E00               	movlw	0
  4782  007660  6E06               	movwf	___awdiv@sign,c
  4783  007662  AE04               	btfss	___awdiv@divisor+1,7,c
  4784  007664  D006               	goto	l2639
  4785  007666  6C03               	negf	___awdiv@divisor,c
  4786  007668  1E04               	comf	___awdiv@divisor+1,f,c
  4787  00766A  B0D8               	btfsc	status,0,c
  4788  00766C  2A04               	incf	___awdiv@divisor+1,f,c
  4789  00766E  0E01               	movlw	1
  4790  007670  6E06               	movwf	___awdiv@sign,c
  4791  007672                     l2639:
  4792  007672  AE02               	btfss	___awdiv@dividend+1,7,c
  4793  007674  D006               	goto	l2645
  4794  007676  6C01               	negf	___awdiv@dividend,c
  4795  007678  1E02               	comf	___awdiv@dividend+1,f,c
  4796  00767A  B0D8               	btfsc	status,0,c
  4797  00767C  2A02               	incf	___awdiv@dividend+1,f,c
  4798  00767E  0E01               	movlw	1
  4799  007680  1A06               	xorwf	___awdiv@sign,f,c
  4800  007682                     l2645:
  4801  007682  0E00               	movlw	0
  4802  007684  6E08               	movwf	___awdiv@quotient+1,c
  4803  007686  0E00               	movlw	0
  4804  007688  6E07               	movwf	___awdiv@quotient,c
  4805  00768A  5003               	movf	___awdiv@divisor,w,c
  4806  00768C  1004               	iorwf	___awdiv@divisor+1,w,c
  4807  00768E  B4D8               	btfsc	status,2,c
  4808  007690  D01C               	goto	l2667
  4809  007692  0E01               	movlw	1
  4810  007694  6E05               	movwf	___awdiv@counter,c
  4811  007696  D004               	goto	l2653
  4812  007698                     l2651:
  4813  007698  90D8               	bcf	status,0,c
  4814  00769A  3603               	rlcf	___awdiv@divisor,f,c
  4815  00769C  3604               	rlcf	___awdiv@divisor+1,f,c
  4816  00769E  2A05               	incf	___awdiv@counter,f,c
  4817  0076A0                     l2653:
  4818  0076A0  AE04               	btfss	___awdiv@divisor+1,7,c
  4819  0076A2  D7FA               	goto	l2651
  4820  0076A4                     u1250:
  4821  0076A4  90D8               	bcf	status,0,c
  4822  0076A6  3607               	rlcf	___awdiv@quotient,f,c
  4823  0076A8  3608               	rlcf	___awdiv@quotient+1,f,c
  4824  0076AA  5003               	movf	___awdiv@divisor,w,c
  4825  0076AC  5C01               	subwf	___awdiv@dividend,w,c
  4826  0076AE  5004               	movf	___awdiv@divisor+1,w,c
  4827  0076B0  5802               	subwfb	___awdiv@dividend+1,w,c
  4828  0076B2  A0D8               	btfss	status,0,c
  4829  0076B4  D005               	goto	l2663
  4830  0076B6  5003               	movf	___awdiv@divisor,w,c
  4831  0076B8  5E01               	subwf	___awdiv@dividend,f,c
  4832  0076BA  5004               	movf	___awdiv@divisor+1,w,c
  4833  0076BC  5A02               	subwfb	___awdiv@dividend+1,f,c
  4834  0076BE  8007               	bsf	___awdiv@quotient,0,c
  4835  0076C0                     l2663:
  4836  0076C0  90D8               	bcf	status,0,c
  4837  0076C2  3204               	rrcf	___awdiv@divisor+1,f,c
  4838  0076C4  3203               	rrcf	___awdiv@divisor,f,c
  4839  0076C6  2E05               	decfsz	___awdiv@counter,f,c
  4840  0076C8  D7ED               	goto	u1250
  4841  0076CA                     l2667:
  4842  0076CA  5006               	movf	___awdiv@sign,w,c
  4843  0076CC  B4D8               	btfsc	status,2,c
  4844  0076CE  D004               	goto	l2671
  4845  0076D0  6C07               	negf	___awdiv@quotient,c
  4846  0076D2  1E08               	comf	___awdiv@quotient+1,f,c
  4847  0076D4  B0D8               	btfsc	status,0,c
  4848  0076D6  2A08               	incf	___awdiv@quotient+1,f,c
  4849  0076D8                     l2671:
  4850  0076D8  C007  F001         	movff	___awdiv@quotient,?___awdiv
  4851  0076DC  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  4852  0076E0  0012               	return		;funcret
  4853  0076E2                     __end_of___awdiv:
  4854                           	opt callstack 0
  4855                           
  4856 ;; *************** function _aveSensor *****************
  4857 ;; Defined at:
  4858 ;;		line 844 in file "./functions.c"
  4859 ;; Parameters:    Size  Location     Type
  4860 ;;  s               1    wreg     unsigned char 
  4861 ;; Auto vars:     Size  Location     Type
  4862 ;;  s               1    5[COMRAM] unsigned char 
  4863 ;;  a               1    9[COMRAM] unsigned char 
  4864 ;;  measurements    2    6[COMRAM] unsigned int 
  4865 ;;  result          1    8[COMRAM] unsigned char 
  4866 ;; Return value:  Size  Location     Type
  4867 ;;                  1    wreg      unsigned char 
  4868 ;; Registers used:
  4869 ;;		wreg, status,2, status,0, cstack
  4870 ;; Tracked objects:
  4871 ;;		On entry : 0/0
  4872 ;;		On exit  : 0/0
  4873 ;;		Unchanged: 0/0
  4874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4875 ;;      Params:         0       0       0       0       0       0       0
  4876 ;;      Locals:         5       0       0       0       0       0       0
  4877 ;;      Temps:          2       0       0       0       0       0       0
  4878 ;;      Totals:         7       0       0       0       0       0       0
  4879 ;;Total ram usage:        7 bytes
  4880 ;; Hardware stack levels used:    1
  4881 ;; Hardware stack levels required when called:    1
  4882 ;; This function calls:
  4883 ;;		_readADC
  4884 ;;		_setADCChannel
  4885 ;; This function is called by:
  4886 ;;		_calibrate
  4887 ;;		_capTouch
  4888 ;;		_readAllSensors
  4889 ;; This function uses a non-reentrant model
  4890 ;;
  4891                           
  4892                           	psect	text35
  4893  00728C                     __ptext35:
  4894                           	opt callstack 0
  4895  00728C                     _aveSensor:
  4896                           	opt callstack 26
  4897                           
  4898                           ;incstack = 0
  4899                           ;aveSensor@s stored from wreg
  4900  00728C  6E06               	movwf	aveSensor@s,c
  4901                           
  4902                           ;./functions.c: 844: unsigned char aveSensor(unsigned char s);./functions.c: 845: {;./fu
      +                          nctions.c: 846:     setADCChannel(s);
  4903  00728E  5006               	movf	aveSensor@s,w,c
  4904  007290  ECED  F03A         	call	_setADCChannel
  4905                           
  4906                           ;./functions.c: 847:     unsigned int measurements = 0;
  4907  007294  0E00               	movlw	0
  4908  007296  6E08               	movwf	aveSensor@measurements+1,c
  4909  007298  0E00               	movlw	0
  4910  00729A  6E07               	movwf	aveSensor@measurements,c
  4911                           
  4912                           ;./functions.c: 849:     for (unsigned char a = 0; a < 8; a++)
  4913  00729C  0E00               	movlw	0
  4914  00729E  6E0A               	movwf	aveSensor@a,c
  4915  0072A0                     l2541:
  4916                           
  4917                           ;./functions.c: 850:     {;./functions.c: 851:         measurements += readADC();
  4918  0072A0  ECF1  F037         	call	_readADC	;wreg free
  4919  0072A4  6E04               	movwf	??_aveSensor& (0+255),c
  4920  0072A6  5004               	movf	??_aveSensor,w,c
  4921  0072A8  2607               	addwf	aveSensor@measurements,f,c
  4922  0072AA  0E00               	movlw	0
  4923  0072AC  2208               	addwfc	aveSensor@measurements+1,f,c
  4924                           
  4925                           ;./functions.c: 852:     }
  4926  0072AE  2A0A               	incf	aveSensor@a,f,c
  4927  0072B0  0E07               	movlw	7
  4928  0072B2  640A               	cpfsgt	aveSensor@a,c
  4929  0072B4  D7F5               	goto	l2541
  4930                           
  4931                           ;./functions.c: 854:     unsigned char result = measurements / 8;
  4932  0072B6  C007  F004         	movff	aveSensor@measurements,??_aveSensor
  4933  0072BA  C008  F005         	movff	aveSensor@measurements+1,??_aveSensor+1
  4934  0072BE  90D8               	bcf	status,0,c
  4935  0072C0  3205               	rrcf	??_aveSensor+1,f,c
  4936  0072C2  3204               	rrcf	??_aveSensor,f,c
  4937  0072C4  90D8               	bcf	status,0,c
  4938  0072C6  3205               	rrcf	??_aveSensor+1,f,c
  4939  0072C8  3204               	rrcf	??_aveSensor,f,c
  4940  0072CA  90D8               	bcf	status,0,c
  4941  0072CC  3205               	rrcf	??_aveSensor+1,f,c
  4942  0072CE  3204               	rrcf	??_aveSensor,f,c
  4943  0072D0  5004               	movf	??_aveSensor,w,c
  4944  0072D2  6E09               	movwf	aveSensor@result,c
  4945                           
  4946                           ;./functions.c: 856:     return result;
  4947  0072D4  5009               	movf	aveSensor@result,w,c
  4948  0072D6  0012               	return		;funcret
  4949  0072D8                     __end_of_aveSensor:
  4950                           	opt callstack 0
  4951                           
  4952 ;; *************** function _setADCChannel *****************
  4953 ;; Defined at:
  4954 ;;		line 793 in file "./functions.c"
  4955 ;; Parameters:    Size  Location     Type
  4956 ;;  channel         1    wreg     unsigned char 
  4957 ;; Auto vars:     Size  Location     Type
  4958 ;;  channel         1    2[COMRAM] unsigned char 
  4959 ;; Return value:  Size  Location     Type
  4960 ;;                  1    wreg      void 
  4961 ;; Registers used:
  4962 ;;		wreg, status,2, status,0
  4963 ;; Tracked objects:
  4964 ;;		On entry : 0/0
  4965 ;;		On exit  : 0/0
  4966 ;;		Unchanged: 0/0
  4967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4968 ;;      Params:         0       0       0       0       0       0       0
  4969 ;;      Locals:         1       0       0       0       0       0       0
  4970 ;;      Temps:          2       0       0       0       0       0       0
  4971 ;;      Totals:         3       0       0       0       0       0       0
  4972 ;;Total ram usage:        3 bytes
  4973 ;; Hardware stack levels used:    1
  4974 ;; This function calls:
  4975 ;;		Nothing
  4976 ;; This function is called by:
  4977 ;;		_aveSensor
  4978 ;; This function uses a non-reentrant model
  4979 ;;
  4980                           
  4981                           	psect	text36
  4982  0075DA                     __ptext36:
  4983                           	opt callstack 0
  4984  0075DA                     _setADCChannel:
  4985                           	opt callstack 26
  4986                           
  4987                           ;incstack = 0
  4988                           ;setADCChannel@channel stored from wreg
  4989  0075DA  6E03               	movwf	setADCChannel@channel,c
  4990                           
  4991                           ;./functions.c: 793: void setADCChannel(unsigned char channel);./functions.c: 794: {;./f
      +                          unctions.c: 795:     ADCON0bits.CHS = channel;
  4992  0075DC  C003  F001         	movff	setADCChannel@channel,??_setADCChannel
  4993  0075E0  4601               	rlncf	??_setADCChannel,f,c
  4994  0075E2  4601               	rlncf	??_setADCChannel,f,c
  4995  0075E4  50C2               	movf	4034,w,c	;volatile
  4996  0075E6  1801               	xorwf	??_setADCChannel,w,c
  4997  0075E8  0B83               	andlw	-125
  4998  0075EA  1801               	xorwf	??_setADCChannel,w,c
  4999  0075EC  6EC2               	movwf	4034,c	;volatile
  5000                           
  5001                           ;./functions.c: 797:     switch (channel)
  5002  0075EE  D01C               	goto	l2511
  5003  0075F0                     l471:
  5004                           
  5005                           ;./functions.c: 800:         TRISBbits.TRISB2 = 1;
  5006  0075F0  8493               	bsf	3987,2,c	;volatile
  5007                           
  5008                           ;./functions.c: 801:         ANSELBbits.ANSB2 = 1;
  5009  0075F2  010F               	movlb	15	; () banked
  5010  0075F4  8539               	bsf	57,2,b	;volatile
  5011                           
  5012                           ;./functions.c: 802:         break;
  5013  0075F6  0012               	return	
  5014  0075F8                     l473:
  5015                           
  5016                           ;./functions.c: 804:         TRISBbits.TRISB3 = 1;
  5017  0075F8  8693               	bsf	3987,3,c	;volatile
  5018                           
  5019                           ;./functions.c: 805:         ANSELBbits.ANSB3 = 1;
  5020  0075FA  010F               	movlb	15	; () banked
  5021  0075FC  8739               	bsf	57,3,b	;volatile
  5022                           
  5023                           ;./functions.c: 806:         break;
  5024  0075FE  0012               	return	
  5025  007600                     l474:
  5026                           
  5027                           ;./functions.c: 808:         TRISBbits.TRISB1 = 1;
  5028  007600  8293               	bsf	3987,1,c	;volatile
  5029                           
  5030                           ;./functions.c: 809:         ANSELBbits.ANSB1 = 1;
  5031  007602  010F               	movlb	15	; () banked
  5032  007604  8339               	bsf	57,1,b	;volatile
  5033                           
  5034                           ;./functions.c: 810:         break;
  5035  007606  0012               	return	
  5036  007608                     l475:
  5037                           
  5038                           ;./functions.c: 812:         TRISBbits.TRISB0 = 1;
  5039  007608  8093               	bsf	3987,0,c	;volatile
  5040                           
  5041                           ;./functions.c: 813:         ANSELBbits.ANSB0 = 1;
  5042  00760A  010F               	movlb	15	; () banked
  5043  00760C  8139               	bsf	57,0,b	;volatile
  5044                           
  5045                           ;./functions.c: 814:         break;
  5046  00760E  0012               	return	
  5047  007610                     l476:
  5048                           
  5049                           ;./functions.c: 816:         TRISBbits.TRISB5 = 1;
  5050  007610  8A93               	bsf	3987,5,c	;volatile
  5051                           
  5052                           ;./functions.c: 817:         ANSELBbits.ANSB5 = 1;
  5053  007612  010F               	movlb	15	; () banked
  5054  007614  8B39               	bsf	57,5,b	;volatile
  5055                           
  5056                           ;./functions.c: 818:         break;
  5057  007616  0012               	return	
  5058  007618                     l477:
  5059                           
  5060                           ;./functions.c: 820:         TRISCbits.TRISC3 = 1;
  5061  007618  8694               	bsf	3988,3,c	;volatile
  5062                           
  5063                           ;./functions.c: 821:         ANSELCbits.ANSC3 = 1;
  5064  00761A  010F               	movlb	15	; () banked
  5065  00761C  873A               	bsf	58,3,b	;volatile
  5066                           
  5067                           ;./functions.c: 822:         break;
  5068  00761E  0012               	return	
  5069  007620                     l478:
  5070                           
  5071                           ;./functions.c: 825:         TRISBbits.TRISB0 = 1;
  5072  007620  8093               	bsf	3987,0,c	;volatile
  5073                           
  5074                           ;./functions.c: 826:         ANSELBbits.ANSB0 = 1;
  5075  007622  010F               	movlb	15	; () banked
  5076  007624  8139               	bsf	57,0,b	;volatile
  5077                           
  5078                           ;./functions.c: 827:         break;
  5079  007626  0012               	return	
  5080  007628                     l2511:
  5081  007628  5003               	movf	setADCChannel@channel,w,c
  5082  00762A  6E01               	movwf	??_setADCChannel& (0+255),c
  5083  00762C  6A02               	clrf	(??_setADCChannel+1)& (0+255),c
  5084                           
  5085                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5086                           ; Switch size 1, requested type "simple"
  5087                           ; Number of cases is 1, Range of values is 0 to 0
  5088                           ; switch strategies available:
  5089                           ; Name         Instructions Cycles
  5090                           ; simple_byte            4     3 (average)
  5091                           ;	Chosen strategy is simple_byte
  5092  00762E  5002               	movf	??_setADCChannel+1,w,c
  5093  007630  0A00               	xorlw	0	; case 0
  5094  007632  A4D8               	btfss	status,2,c
  5095  007634  D7F5               	goto	l478
  5096                           
  5097                           ; Switch size 1, requested type "simple"
  5098                           ; Number of cases is 6, Range of values is 8 to 15
  5099                           ; switch strategies available:
  5100                           ; Name         Instructions Cycles
  5101                           ; simple_byte           19    10 (average)
  5102                           ;	Chosen strategy is simple_byte
  5103  007636  5001               	movf	??_setADCChannel,w,c
  5104  007638  0A08               	xorlw	8	; case 8
  5105  00763A  B4D8               	btfsc	status,2,c
  5106  00763C  D7D9               	goto	l471
  5107  00763E  0A01               	xorlw	1	; case 9
  5108  007640  B4D8               	btfsc	status,2,c
  5109  007642  D7DA               	goto	l473
  5110  007644  0A03               	xorlw	3	; case 10
  5111  007646  B4D8               	btfsc	status,2,c
  5112  007648  D7DB               	goto	l474
  5113  00764A  0A06               	xorlw	6	; case 12
  5114  00764C  B4D8               	btfsc	status,2,c
  5115  00764E  D7DC               	goto	l475
  5116  007650  0A01               	xorlw	1	; case 13
  5117  007652  B4D8               	btfsc	status,2,c
  5118  007654  D7DD               	goto	l476
  5119  007656  0A02               	xorlw	2	; case 15
  5120  007658  B4D8               	btfsc	status,2,c
  5121  00765A  D7DE               	goto	l477
  5122  00765C  D7E1               	goto	l478
  5123  00765E                     __end_of_setADCChannel:
  5124                           	opt callstack 0
  5125                           
  5126 ;; *************** function _readADC *****************
  5127 ;; Defined at:
  5128 ;;		line 834 in file "./functions.c"
  5129 ;; Parameters:    Size  Location     Type
  5130 ;;		None
  5131 ;; Auto vars:     Size  Location     Type
  5132 ;;		None
  5133 ;; Return value:  Size  Location     Type
  5134 ;;                  1    wreg      unsigned char 
  5135 ;; Registers used:
  5136 ;;		wreg, status,2
  5137 ;; Tracked objects:
  5138 ;;		On entry : 0/0
  5139 ;;		On exit  : 0/0
  5140 ;;		Unchanged: 0/0
  5141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5142 ;;      Params:         0       0       0       0       0       0       0
  5143 ;;      Locals:         0       0       0       0       0       0       0
  5144 ;;      Temps:          0       0       0       0       0       0       0
  5145 ;;      Totals:         0       0       0       0       0       0       0
  5146 ;;Total ram usage:        0 bytes
  5147 ;; Hardware stack levels used:    1
  5148 ;; This function calls:
  5149 ;;		Nothing
  5150 ;; This function is called by:
  5151 ;;		_aveSensor
  5152 ;; This function uses a non-reentrant model
  5153 ;;
  5154                           
  5155                           	psect	text37
  5156  006FE2                     __ptext37:
  5157                           	opt callstack 0
  5158  006FE2                     _readADC:
  5159                           	opt callstack 26
  5160                           
  5161                           ;./functions.c: 836:     ADCON0bits.GO = 1;
  5162                           
  5163                           ; BSR set to: 15
  5164                           ;incstack = 0
  5165  006FE2  82C2               	bsf	4034,1,c	;volatile
  5166  006FE4                     l482:
  5167                           
  5168                           ;./functions.c: 838:     while (ADCON0bits.GO)
  5169  006FE4  B2C2               	btfsc	4034,1,c	;volatile
  5170  006FE6  D7FE               	goto	l482
  5171                           
  5172                           ;./functions.c: 840:     return ADRESH;
  5173  006FE8  50C4               	movf	4036,w,c	;volatile
  5174  006FEA  0012               	return		;funcret
  5175  006FEC                     __end_of_readADC:
  5176                           	opt callstack 0
  5177                           
  5178 ;; *************** function _PRC *****************
  5179 ;; Defined at:
  5180 ;;		line 319 in file "./functions.c"
  5181 ;; Parameters:    Size  Location     Type
  5182 ;;		None
  5183 ;; Auto vars:     Size  Location     Type
  5184 ;;  a               1   56[COMRAM] unsigned char 
  5185 ;;  a               1   55[COMRAM] unsigned char 
  5186 ;;  a               1   54[COMRAM] unsigned char 
  5187 ;;  a               1   53[COMRAM] unsigned char 
  5188 ;;  a               1   52[COMRAM] unsigned char 
  5189 ;;  a               1   51[COMRAM] unsigned char 
  5190 ;;  a               1   50[COMRAM] unsigned char 
  5191 ;;  a               1   49[COMRAM] unsigned char 
  5192 ;;  a               1   48[COMRAM] unsigned char 
  5193 ;;  message        32   11[COMRAM] unsigned char [32]
  5194 ;;  message2        5   43[COMRAM] unsigned char [5]
  5195 ;; Return value:  Size  Location     Type
  5196 ;;                  1    wreg      void 
  5197 ;; Registers used:
  5198 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5199 ;; Tracked objects:
  5200 ;;		On entry : 0/0
  5201 ;;		On exit  : 0/0
  5202 ;;		Unchanged: 0/0
  5203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5204 ;;      Params:         0       0       0       0       0       0       0
  5205 ;;      Locals:        46       0       0       0       0       0       0
  5206 ;;      Temps:          2       0       0       0       0       0       0
  5207 ;;      Totals:        48       0       0       0       0       0       0
  5208 ;;Total ram usage:       48 bytes
  5209 ;; Hardware stack levels used:    1
  5210 ;; Hardware stack levels required when called:    2
  5211 ;; This function calls:
  5212 ;;		_error
  5213 ;;		_trans
  5214 ;; This function is called by:
  5215 ;;		_RCE
  5216 ;; This function uses a non-reentrant model
  5217 ;;
  5218                           
  5219                           	psect	text38
  5220  007BB0                     __ptext38:
  5221                           	opt callstack 0
  5222  007BB0                     _PRC:
  5223                           	opt callstack 27
  5224                           
  5225                           ;./functions.c: 321:     PORTD = 0b11111001;
  5226                           
  5227                           ;incstack = 0
  5228  007BB0  0EF9               	movlw	249
  5229  007BB2  6E83               	movwf	3971,c	;volatile
  5230  007BB4                     l3247:
  5231                           
  5232                           ;./functions.c: 323:     {;./functions.c: 324:         unsigned char message[] = "\nWhat
      +                           color should sanic race?\n";
  5233  007BB4  EE21  F000         	lfsr	2,PRC@F6028
  5234  007BB8  EE10  F00C         	lfsr	1,PRC@message
  5235  007BBC  0E1F               	movlw	31
  5236  007BBE                     u1911:
  5237  007BBE  CFDB FFE3          	movff	plusw2,plusw1
  5238  007BC2  06E8               	decf	wreg,f,c
  5239  007BC4  E2FC               	bc	u1911
  5240                           
  5241                           ;./functions.c: 325:         unsigned char message2[] = "\nSet";
  5242  007BC6  EE20  F0D0         	lfsr	2,PRC@F6030
  5243  007BCA  EE10  F02C         	lfsr	1,PRC@message2
  5244  007BCE  0E04               	movlw	4
  5245  007BD0                     u1921:
  5246  007BD0  CFDB FFE3          	movff	plusw2,plusw1
  5247  007BD4  06E8               	decf	wreg,f,c
  5248  007BD6  E2FC               	bc	u1921
  5249                           
  5250                           ;./functions.c: 327:         for (unsigned char a = 0; a < 31; a++)
  5251  007BD8  0E00               	movlw	0
  5252  007BDA  6E31               	movwf	PRC@a,c
  5253  007BDC                     l3255:
  5254                           
  5255                           ;./functions.c: 328:         {;./functions.c: 329:             trans(message[a]);
  5256  007BDC  0E0C               	movlw	low PRC@message
  5257  007BDE  2431               	addwf	PRC@a,w,c
  5258  007BE0  6ED9               	movwf	fsr2l,c
  5259  007BE2  6ADA               	clrf	fsr2h,c
  5260  007BE4  0E00               	movlw	high PRC@message
  5261  007BE6  22DA               	addwfc	fsr2h,f,c
  5262  007BE8  50DF               	movf	indf2,w,c
  5263  007BEA  EC05  F038         	call	_trans
  5264                           
  5265                           ;./functions.c: 330:         }
  5266  007BEE  2A31               	incf	PRC@a,f,c
  5267  007BF0  0E1E               	movlw	30
  5268  007BF2  6431               	cpfsgt	PRC@a,c
  5269  007BF4  D7F3               	goto	l3255
  5270  007BF6                     u1930:
  5271  007BF6  BA9E               	btfsc	3998,5,c	;volatile
  5272  007BF8  D090               	goto	l3387
  5273  007BFA  D7FD               	goto	u1930
  5274  007BFC                     l3261:
  5275                           
  5276                           ;./functions.c: 336:             for (unsigned char a = 0; a < 8; a++)
  5277  007BFC  0E00               	movlw	0
  5278  007BFE  6E32               	movwf	PRC@a_1266,c
  5279  007C00                     l3267:
  5280                           
  5281                           ;./functions.c: 337:             {;./functions.c: 338:                 raceColor[a] = 0;
  5282  007C00  0EBA               	movlw	low _raceColor
  5283  007C02  2432               	addwf	PRC@a_1266,w,c
  5284  007C04  6ED9               	movwf	fsr2l,c
  5285  007C06  6ADA               	clrf	fsr2h,c
  5286  007C08  0E00               	movlw	high _raceColor
  5287  007C0A  22DA               	addwfc	fsr2h,f,c
  5288  007C0C  0E00               	movlw	0
  5289  007C0E  6EDF               	movwf	indf2,c
  5290                           
  5291                           ;./functions.c: 339:             }
  5292  007C10  2A32               	incf	PRC@a_1266,f,c
  5293  007C12  0E07               	movlw	7
  5294  007C14  6432               	cpfsgt	PRC@a_1266,c
  5295  007C16  D7F4               	goto	l3267
  5296                           
  5297                           ;./functions.c: 340:             raceColor[3] = 1;
  5298  007C18  0E01               	movlw	1
  5299  007C1A  0100               	movlb	0	; () banked
  5300  007C1C  6FBD               	movwf	(_raceColor+3)& (0+255),b
  5301                           
  5302                           ;./functions.c: 341:             for (unsigned char a = 0; a < 4; a++)
  5303  007C1E  0E00               	movlw	0
  5304  007C20  6E33               	movwf	PRC@a_1267,c
  5305  007C22                     l3279:
  5306                           
  5307                           ;./functions.c: 342:             {;./functions.c: 343:                 trans(message2[a]
      +                          );
  5308  007C22  0E2C               	movlw	low PRC@message2
  5309  007C24  2433               	addwf	PRC@a_1267,w,c
  5310  007C26  6ED9               	movwf	fsr2l,c
  5311  007C28  6ADA               	clrf	fsr2h,c
  5312  007C2A  0E00               	movlw	high PRC@message2
  5313  007C2C  22DA               	addwfc	fsr2h,f,c
  5314  007C2E  50DF               	movf	indf2,w,c
  5315  007C30  EC05  F038         	call	_trans
  5316                           
  5317                           ;./functions.c: 344:             }
  5318  007C34  2A33               	incf	PRC@a_1267,f,c
  5319  007C36  0E03               	movlw	3
  5320  007C38  6433               	cpfsgt	PRC@a_1267,c
  5321  007C3A  D7F3               	goto	l3279
  5322                           
  5323                           ;./functions.c: 345:             raceDayColor = 'B';
  5324  007C3C  0E42               	movlw	66
  5325  007C3E  6E55               	movwf	_raceDayColor,c
  5326  007C40  0012               	return	
  5327  007C42                     l3291:
  5328                           
  5329                           ;./functions.c: 349:             for (unsigned char a = 0; a < 8; a++)
  5330  007C42  0E00               	movlw	0
  5331  007C44  6E34               	movwf	PRC@a_1268,c
  5332  007C46                     l3297:
  5333                           
  5334                           ;./functions.c: 350:             {;./functions.c: 351:                 raceColor[a] = 0;
  5335  007C46  0EBA               	movlw	low _raceColor
  5336  007C48  2434               	addwf	PRC@a_1268,w,c
  5337  007C4A  6ED9               	movwf	fsr2l,c
  5338  007C4C  6ADA               	clrf	fsr2h,c
  5339  007C4E  0E00               	movlw	high _raceColor
  5340  007C50  22DA               	addwfc	fsr2h,f,c
  5341  007C52  0E00               	movlw	0
  5342  007C54  6EDF               	movwf	indf2,c
  5343                           
  5344                           ;./functions.c: 352:             }
  5345  007C56  2A34               	incf	PRC@a_1268,f,c
  5346  007C58  0E07               	movlw	7
  5347  007C5A  6434               	cpfsgt	PRC@a_1268,c
  5348  007C5C  D7F4               	goto	l3297
  5349                           
  5350                           ;./functions.c: 353:             raceColor[1] = 1;
  5351  007C5E  0E01               	movlw	1
  5352  007C60  0100               	movlb	0	; () banked
  5353  007C62  6FBB               	movwf	(_raceColor+1)& (0+255),b
  5354                           
  5355                           ;./functions.c: 354:             for (unsigned char a = 0; a < 4; a++)
  5356  007C64  0E00               	movlw	0
  5357  007C66  6E35               	movwf	PRC@a_1269,c
  5358  007C68                     l3309:
  5359                           
  5360                           ;./functions.c: 355:             {;./functions.c: 356:                 trans(message2[a]
      +                          );
  5361  007C68  0E2C               	movlw	low PRC@message2
  5362  007C6A  2435               	addwf	PRC@a_1269,w,c
  5363  007C6C  6ED9               	movwf	fsr2l,c
  5364  007C6E  6ADA               	clrf	fsr2h,c
  5365  007C70  0E00               	movlw	high PRC@message2
  5366  007C72  22DA               	addwfc	fsr2h,f,c
  5367  007C74  50DF               	movf	indf2,w,c
  5368  007C76  EC05  F038         	call	_trans
  5369                           
  5370                           ;./functions.c: 357:             }
  5371  007C7A  2A35               	incf	PRC@a_1269,f,c
  5372  007C7C  0E03               	movlw	3
  5373  007C7E  6435               	cpfsgt	PRC@a_1269,c
  5374  007C80  D7F3               	goto	l3309
  5375                           
  5376                           ;./functions.c: 358:             raceDayColor = 'G';
  5377  007C82  0E47               	movlw	71
  5378  007C84  6E55               	movwf	_raceDayColor,c
  5379  007C86  0012               	return	
  5380  007C88                     l3321:
  5381                           
  5382                           ;./functions.c: 362:             for (unsigned char a = 0; a < 8; a++)
  5383  007C88  0E00               	movlw	0
  5384  007C8A  6E36               	movwf	PRC@a_1270,c
  5385  007C8C                     l3327:
  5386                           
  5387                           ;./functions.c: 363:             {;./functions.c: 364:                 raceColor[a] = 0;
  5388  007C8C  0EBA               	movlw	low _raceColor
  5389  007C8E  2436               	addwf	PRC@a_1270,w,c
  5390  007C90  6ED9               	movwf	fsr2l,c
  5391  007C92  6ADA               	clrf	fsr2h,c
  5392  007C94  0E00               	movlw	high _raceColor
  5393  007C96  22DA               	addwfc	fsr2h,f,c
  5394  007C98  0E00               	movlw	0
  5395  007C9A  6EDF               	movwf	indf2,c
  5396                           
  5397                           ;./functions.c: 365:             }
  5398  007C9C  2A36               	incf	PRC@a_1270,f,c
  5399  007C9E  0E07               	movlw	7
  5400  007CA0  6436               	cpfsgt	PRC@a_1270,c
  5401  007CA2  D7F4               	goto	l3327
  5402                           
  5403                           ;./functions.c: 366:             raceColor[2] = 1;
  5404  007CA4  0E01               	movlw	1
  5405  007CA6  0100               	movlb	0	; () banked
  5406  007CA8  6FBC               	movwf	(_raceColor+2)& (0+255),b
  5407                           
  5408                           ;./functions.c: 367:             for (unsigned char a = 0; a < 4; a++)
  5409  007CAA  0E00               	movlw	0
  5410  007CAC  6E37               	movwf	PRC@a_1271,c
  5411  007CAE                     l3339:
  5412                           
  5413                           ;./functions.c: 368:             {;./functions.c: 369:                 trans(message2[a]
      +                          );
  5414  007CAE  0E2C               	movlw	low PRC@message2
  5415  007CB0  2437               	addwf	PRC@a_1271,w,c
  5416  007CB2  6ED9               	movwf	fsr2l,c
  5417  007CB4  6ADA               	clrf	fsr2h,c
  5418  007CB6  0E00               	movlw	high PRC@message2
  5419  007CB8  22DA               	addwfc	fsr2h,f,c
  5420  007CBA  50DF               	movf	indf2,w,c
  5421  007CBC  EC05  F038         	call	_trans
  5422                           
  5423                           ;./functions.c: 370:             }
  5424  007CC0  2A37               	incf	PRC@a_1271,f,c
  5425  007CC2  0E03               	movlw	3
  5426  007CC4  6437               	cpfsgt	PRC@a_1271,c
  5427  007CC6  D7F3               	goto	l3339
  5428                           
  5429                           ;./functions.c: 371:             raceDayColor = 'R';
  5430  007CC8  0E52               	movlw	82
  5431  007CCA  6E55               	movwf	_raceDayColor,c
  5432  007CCC  0012               	return	
  5433  007CCE                     l3351:
  5434                           
  5435                           ;./functions.c: 375:             for (unsigned char a = 0; a < 8; a++)
  5436  007CCE  0E00               	movlw	0
  5437  007CD0  6E38               	movwf	PRC@a_1272,c
  5438  007CD2                     l3357:
  5439                           
  5440                           ;./functions.c: 376:             {;./functions.c: 377:                 raceColor[a] = 0;
  5441  007CD2  0EBA               	movlw	low _raceColor
  5442  007CD4  2438               	addwf	PRC@a_1272,w,c
  5443  007CD6  6ED9               	movwf	fsr2l,c
  5444  007CD8  6ADA               	clrf	fsr2h,c
  5445  007CDA  0E00               	movlw	high _raceColor
  5446  007CDC  22DA               	addwfc	fsr2h,f,c
  5447  007CDE  0E00               	movlw	0
  5448  007CE0  6EDF               	movwf	indf2,c
  5449                           
  5450                           ;./functions.c: 378:             }
  5451  007CE2  2A38               	incf	PRC@a_1272,f,c
  5452  007CE4  0E07               	movlw	7
  5453  007CE6  6438               	cpfsgt	PRC@a_1272,c
  5454  007CE8  D7F4               	goto	l3357
  5455                           
  5456                           ;./functions.c: 379:             raceColor[4] = 1;
  5457  007CEA  0E01               	movlw	1
  5458  007CEC  0100               	movlb	0	; () banked
  5459  007CEE  6FBE               	movwf	(_raceColor+4)& (0+255),b
  5460                           
  5461                           ;./functions.c: 380:             for (unsigned char a = 0; a < 4; a++)
  5462  007CF0  0E00               	movlw	0
  5463  007CF2  6E39               	movwf	PRC@a_1273,c
  5464  007CF4                     l3369:
  5465                           
  5466                           ;./functions.c: 381:             {;./functions.c: 382:                 trans(message2[a]
      +                          );
  5467  007CF4  0E2C               	movlw	low PRC@message2
  5468  007CF6  2439               	addwf	PRC@a_1273,w,c
  5469  007CF8  6ED9               	movwf	fsr2l,c
  5470  007CFA  6ADA               	clrf	fsr2h,c
  5471  007CFC  0E00               	movlw	high PRC@message2
  5472  007CFE  22DA               	addwfc	fsr2h,f,c
  5473  007D00  50DF               	movf	indf2,w,c
  5474  007D02  EC05  F038         	call	_trans
  5475                           
  5476                           ;./functions.c: 383:             }
  5477  007D06  2A39               	incf	PRC@a_1273,f,c
  5478  007D08  0E03               	movlw	3
  5479  007D0A  6439               	cpfsgt	PRC@a_1273,c
  5480  007D0C  D7F3               	goto	l3369
  5481                           
  5482                           ;./functions.c: 384:             raceDayColor = 'n';
  5483  007D0E  0E6E               	movlw	110
  5484  007D10  6E55               	movwf	_raceDayColor,c
  5485  007D12  0012               	return	
  5486  007D14                     l3381:
  5487                           
  5488                           ;./functions.c: 389:             error();
  5489  007D14  EC0C  F039         	call	_error	;wreg free
  5490                           
  5491                           ;./functions.c: 390:             continue;
  5492  007D18  D74D               	goto	l3247
  5493  007D1A                     l3387:
  5494  007D1A  50AE               	movf	4014,w,c	;volatile
  5495  007D1C  6E0A               	movwf	??_PRC& (0+255),c
  5496  007D1E  6A0B               	clrf	(??_PRC+1)& (0+255),c
  5497                           
  5498                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5499                           ; Switch size 1, requested type "simple"
  5500                           ; Number of cases is 1, Range of values is 0 to 0
  5501                           ; switch strategies available:
  5502                           ; Name         Instructions Cycles
  5503                           ; simple_byte            4     3 (average)
  5504                           ;	Chosen strategy is simple_byte
  5505  007D20  500B               	movf	??_PRC+1,w,c
  5506  007D22  0A00               	xorlw	0	; case 0
  5507  007D24  A4D8               	btfss	status,2,c
  5508  007D26  D7F6               	goto	l3381
  5509                           
  5510                           ; Switch size 1, requested type "simple"
  5511                           ; Number of cases is 4, Range of values is 66 to 110
  5512                           ; switch strategies available:
  5513                           ; Name         Instructions Cycles
  5514                           ; simple_byte           13     7 (average)
  5515                           ;	Chosen strategy is simple_byte
  5516  007D28  500A               	movf	??_PRC,w,c
  5517  007D2A  0A42               	xorlw	66	; case 66
  5518  007D2C  B4D8               	btfsc	status,2,c
  5519  007D2E  D766               	goto	l3261
  5520  007D30  0A05               	xorlw	5	; case 71
  5521  007D32  B4D8               	btfsc	status,2,c
  5522  007D34  D786               	goto	l3291
  5523  007D36  0A15               	xorlw	21	; case 82
  5524  007D38  B4D8               	btfsc	status,2,c
  5525  007D3A  D7A6               	goto	l3321
  5526  007D3C  0A3C               	xorlw	60	; case 110
  5527  007D3E  B4D8               	btfsc	status,2,c
  5528  007D40  D7C6               	goto	l3351
  5529  007D42  D7E8               	goto	l3381
  5530  007D44                     __end_of_PRC:
  5531                           	opt callstack 0
  5532                           
  5533 ;; *************** function _error *****************
  5534 ;; Defined at:
  5535 ;;		line 881 in file "./functions.c"
  5536 ;; Parameters:    Size  Location     Type
  5537 ;;		None
  5538 ;; Auto vars:     Size  Location     Type
  5539 ;;  a               1    8[COMRAM] unsigned char 
  5540 ;;  message         7    1[COMRAM] unsigned char [7]
  5541 ;; Return value:  Size  Location     Type
  5542 ;;                  1    wreg      void 
  5543 ;; Registers used:
  5544 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5545 ;; Tracked objects:
  5546 ;;		On entry : 0/0
  5547 ;;		On exit  : 0/0
  5548 ;;		Unchanged: 0/0
  5549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5550 ;;      Params:         0       0       0       0       0       0       0
  5551 ;;      Locals:         8       0       0       0       0       0       0
  5552 ;;      Temps:          0       0       0       0       0       0       0
  5553 ;;      Totals:         8       0       0       0       0       0       0
  5554 ;;Total ram usage:        8 bytes
  5555 ;; Hardware stack levels used:    1
  5556 ;; Hardware stack levels required when called:    1
  5557 ;; This function calls:
  5558 ;;		_trans
  5559 ;; This function is called by:
  5560 ;;		_PRC
  5561 ;;		_RCE
  5562 ;; This function uses a non-reentrant model
  5563 ;;
  5564                           
  5565                           	psect	text39
  5566  007218                     __ptext39:
  5567                           	opt callstack 0
  5568  007218                     _error:
  5569                           	opt callstack 28
  5570                           
  5571                           ;./functions.c: 883:     unsigned char message[] = "ERROR\n";
  5572                           
  5573                           ;incstack = 0
  5574  007218  EE20  F0C3         	lfsr	2,error@F6088
  5575  00721C  EE10  F002         	lfsr	1,error@message
  5576  007220  0E06               	movlw	6
  5577  007222                     u1321:
  5578  007222  CFDB FFE3          	movff	plusw2,plusw1
  5579  007226  06E8               	decf	wreg,f,c
  5580  007228  E2FC               	bc	u1321
  5581                           
  5582                           ;./functions.c: 885:     for (unsigned char a = 0; a < 6; a++)
  5583  00722A  0E00               	movlw	0
  5584  00722C  6E09               	movwf	error@a,c
  5585  00722E                     l2765:
  5586                           
  5587                           ;./functions.c: 886:     {;./functions.c: 887:         trans(message[a]);
  5588  00722E  0E02               	movlw	low error@message
  5589  007230  2409               	addwf	error@a,w,c
  5590  007232  6ED9               	movwf	fsr2l,c
  5591  007234  6ADA               	clrf	fsr2h,c
  5592  007236  0E00               	movlw	high error@message
  5593  007238  22DA               	addwfc	fsr2h,f,c
  5594  00723A  50DF               	movf	indf2,w,c
  5595  00723C  EC05  F038         	call	_trans
  5596                           
  5597                           ;./functions.c: 888:     }
  5598  007240  2A09               	incf	error@a,f,c
  5599  007242  0E05               	movlw	5
  5600  007244  6409               	cpfsgt	error@a,c
  5601  007246  D7F3               	goto	l2765
  5602                           
  5603                           ;./functions.c: 890:     RCREG = 0;
  5604  007248  0E00               	movlw	0
  5605  00724A  6EAE               	movwf	4014,c	;volatile
  5606  00724C  0012               	return		;funcret
  5607  00724E                     __end_of_error:
  5608                           	opt callstack 0
  5609                           
  5610 ;; *************** function _trans *****************
  5611 ;; Defined at:
  5612 ;;		line 777 in file "./functions.c"
  5613 ;; Parameters:    Size  Location     Type
  5614 ;;  s               1    wreg     unsigned char 
  5615 ;; Auto vars:     Size  Location     Type
  5616 ;;  s               1    0[COMRAM] unsigned char 
  5617 ;; Return value:  Size  Location     Type
  5618 ;;                  1    wreg      void 
  5619 ;; Registers used:
  5620 ;;		wreg
  5621 ;; Tracked objects:
  5622 ;;		On entry : 0/0
  5623 ;;		On exit  : 0/0
  5624 ;;		Unchanged: 0/0
  5625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5626 ;;      Params:         0       0       0       0       0       0       0
  5627 ;;      Locals:         1       0       0       0       0       0       0
  5628 ;;      Temps:          0       0       0       0       0       0       0
  5629 ;;      Totals:         1       0       0       0       0       0       0
  5630 ;;Total ram usage:        1 bytes
  5631 ;; Hardware stack levels used:    1
  5632 ;; This function calls:
  5633 ;;		Nothing
  5634 ;; This function is called by:
  5635 ;;		_PRC
  5636 ;;		_pyCal
  5637 ;;		_capTouch
  5638 ;;		_ranges
  5639 ;;		_error
  5640 ;;		_RCE
  5641 ;; This function uses a non-reentrant model
  5642 ;;
  5643                           
  5644                           	psect	text40
  5645  00700A                     __ptext40:
  5646                           	opt callstack 0
  5647  00700A                     _trans:
  5648                           	opt callstack 29
  5649                           
  5650                           ;incstack = 0
  5651                           ;trans@s stored from wreg
  5652  00700A  6E01               	movwf	trans@s,c
  5653  00700C                     
  5654                           ;./functions.c: 779:     while (!PIR1bits.TX1IF)
  5655                           
  5656                           ;./functions.c: 780:         ;
  5657  00700C  A89E               	btfss	3998,4,c	;volatile
  5658  00700E  D7FE               	goto	l2553
  5659                           
  5660                           ;./functions.c: 781:     TXREG = s;
  5661  007010  C001  FFAD         	movff	trans@s,4013	;volatile
  5662  007014  0012               	return		;funcret
  5663  007016                     __end_of_trans:
  5664                           	opt callstack 0
  5665  0000                     
  5666                           	psect	rparam
  5667  0000                     tosu	equ	0xFFF
  5668                           tosh	equ	0xFFE
  5669                           tosl	equ	0xFFD
  5670                           stkptr	equ	0xFFC
  5671                           pclatu	equ	0xFFB
  5672                           pclath	equ	0xFFA
  5673                           pcl	equ	0xFF9
  5674                           tblptru	equ	0xFF8
  5675                           tblptrh	equ	0xFF7
  5676                           tblptrl	equ	0xFF6
  5677                           tablat	equ	0xFF5
  5678                           prodh	equ	0xFF4
  5679                           prodl	equ	0xFF3
  5680                           indf0	equ	0xFEF
  5681                           postinc0	equ	0xFEE
  5682                           postdec0	equ	0xFED
  5683                           preinc0	equ	0xFEC
  5684                           plusw0	equ	0xFEB
  5685                           fsr0h	equ	0xFEA
  5686                           fsr0l	equ	0xFE9
  5687                           wreg	equ	0xFE8
  5688                           indf1	equ	0xFE7
  5689                           postinc1	equ	0xFE6
  5690                           postdec1	equ	0xFE5
  5691                           preinc1	equ	0xFE4
  5692                           plusw1	equ	0xFE3
  5693                           fsr1h	equ	0xFE2
  5694                           fsr1l	equ	0xFE1
  5695                           bsr	equ	0xFE0
  5696                           indf2	equ	0xFDF
  5697                           postinc2	equ	0xFDE
  5698                           postdec2	equ	0xFDD
  5699                           preinc2	equ	0xFDC
  5700                           plusw2	equ	0xFDB
  5701                           fsr2h	equ	0xFDA
  5702                           fsr2l	equ	0xFD9
  5703                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        182
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     79      93
    BANK0           160      0     142
    BANK1           256      0      32
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    readFromEEP@rs	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(COMRAM[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(BANK0[5]), 

    readFromEEP@F6099	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(COMRAM[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(BANK0[5]), 

    writeToEEP@rs	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(COMRAM[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(BANK0[5]), 

    writeToEEP@F6092	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(COMRAM[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(BANK0[5]), 

    ranges@rangeArray	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(COMRAM[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(BANK0[5]), 

    ranges@F6083	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(COMRAM[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(BANK0[5]), 

    classifyColors@sensorRanges	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(COMRAM[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(BANK0[5]), 

    classifyColors@F6062	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(COMRAM[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(BANK0[5]), 

    calibrate@rangeArray	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(COMRAM[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(BANK0[5]), 

    calibrate@F6017	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(COMRAM[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(BANK0[5]), 


Critical Paths under _main in COMRAM

    _main->_RCE
    _init->_readFromEEP
    _RCE->_PRC
    _pyCal->_readAllSensors
    _navigate->_readAllSensors
    _readAllSensors->_aveSensor
    _capTouch->_aveSensor
    _calibrate->_ranges
    _sixSecDelay->_msDelay
    _ranges->_writeToEEP
    _aveSensor->_setADCChannel
    _PRC->_error
    _error->_trans

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6726
                                _RCE
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     184
                         _clearPorts
                        _readFromEEP
                           _setupADC
                           _setupOSC
                        _setupSerial
 ---------------------------------------------------------------------------------
 (2) _setupSerial                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setupOSC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _readFromEEP                                         15    15      0     184
                                              0 COMRAM    15    15      0
                            _EE_READ
 ---------------------------------------------------------------------------------
 (3) _EE_READ                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clearPorts                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RCE                                                 22    22      0    6542
                                             57 COMRAM    22    22      0
                                _PRC
                          _calibrate
                           _capTouch
                              _error
                           _navigate
                              _pyCal
                              _trans
 ---------------------------------------------------------------------------------
 (2) _pyCal                                                2     2      0     896
                                             18 COMRAM     2     2      0
                            _msDelay
                     _readAllSensors
                           _setupADC
                              _trans
 ---------------------------------------------------------------------------------
 (2) _navigate                                             0     0      0    1162
                     _classifyColors
                 _determineDirection
               _displayColorDetected
                   _displayRaceColor
                            _msDelay
                     _readAllSensors
                           _setupADC
                       _setupPWMLeft
                      _setupPWMRight
                         _stopMotors
                          _testBlack
 ---------------------------------------------------------------------------------
 (3) _testBlack                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _stopMotors                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _setupPWMRight                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _setupPWMLeft                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setupADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _readAllSensors                                       8     8      0     782
                                             10 COMRAM     8     8      0
                                _abs
                          _aveSensor
 ---------------------------------------------------------------------------------
 (3) _displayRaceColor                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _displayColorDetected                                 3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _determineDirection                                   0     0      0       0
                           _hardLeft
                          _hardRight
                               _left
                              _right
                         _searchMode
                           _straight
 ---------------------------------------------------------------------------------
 (4) _straight                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _searchMode                                           0     0      0       0
                              _right
 ---------------------------------------------------------------------------------
 (5) _right                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _left                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _hardRight                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _hardLeft                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _classifyColors                                      15    15      0     336
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 (2) _capTouch                                            31    31      0     564
                                             10 COMRAM    31    31      0
                                _abs
                          _aveSensor
                            _msDelay
                              _trans
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     218
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _calibrate                                           20    20      0    2642
                                             29 COMRAM    20    20      0
                          _aveSensor
                             _ranges
                        _sixSecDelay
 ---------------------------------------------------------------------------------
 (3) _sixSecDelay                                          1     1      0      68
                                              1 COMRAM     1     1      0
                            _msDelay
 ---------------------------------------------------------------------------------
 (3) _msDelay                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ranges                                              14    14      0     899
                                             15 COMRAM    14    14      0
                            ___awdiv
                              _trans
                         _writeToEEP
 ---------------------------------------------------------------------------------
 (4) _writeToEEP                                          15    15      0     184
                                              0 COMRAM    15    15      0
                             _EE_WRT
 ---------------------------------------------------------------------------------
 (5) _EE_WRT                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     398
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (4) _aveSensor                                            7     7      0     159
                                              3 COMRAM     7     7      0
                            _readADC
                      _setADCChannel
 ---------------------------------------------------------------------------------
 (5) _setADCChannel                                        3     3      0      44
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) _readADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PRC                                                 48    48      0     865
                                              9 COMRAM    48    48      0
                              _error
                              _trans
 ---------------------------------------------------------------------------------
 (2) _error                                                8     8      0     114
                                              1 COMRAM     8     8      0
                              _trans
 ---------------------------------------------------------------------------------
 (2) _trans                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _RCE
     _PRC
       _error
         _trans
       _trans
     _calibrate
       _aveSensor
         _readADC
         _setADCChannel
       _ranges
         ___awdiv
         _trans
         _writeToEEP
           _EE_WRT
       _sixSecDelay
         _msDelay
     _capTouch
       _abs
       _aveSensor
         _readADC
         _setADCChannel
       _msDelay
       _trans
     _error
       _trans
     _navigate
       _classifyColors
       _determineDirection
         _hardLeft
         _hardRight
         _left
         _right
         _searchMode
           _right
         _straight
       _displayColorDetected
       _displayRaceColor
       _msDelay
       _readAllSensors
         _abs
         _aveSensor
           _readADC
           _setADCChannel
       _setupADC
       _setupPWMLeft
       _setupPWMRight
       _stopMotors
       _testBlack
     _pyCal
       _msDelay
       _readAllSensors
         _abs
         _aveSensor
           _readADC
           _setADCChannel
       _setupADC
       _trans
     _trans
   _init
     _clearPorts
     _readFromEEP
       _EE_READ
     _setupADC
     _setupOSC
     _setupSerial

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      20       6       12.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      8E       4       88.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4F      5D       1       97.9%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10B       9        0.0%
DATA                 0      0     10B      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon May 27 15:06:37 2019

               _colorsDetected 00E9                  capTouch@F6046 0060                   ___awdiv@sign 0006  
             readFromEEP@F6099 0088                   __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000  
                 __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000                    __CFG_LVP$ON 000000  
                          l430 76E6                            l432 76F2                            l513 74AA  
                          l433 76FE                            l346 7560                            l434 770A  
                          l435 7716                            l436 7722                            l541 7122  
                          l518 70EC                            l471 75F0                            l528 744A  
                          l473 75F8                            l482 6FE4                            l474 7600  
                          l475 7608                            l476 7610                            l477 7618  
                          l573 7B10                            l478 7620                            l558 7008  
                          l579 7B20                   __CFG_CPB$OFF 000000                            _RCE 7AAA  
                          _PR2 000FBB                            _PR4 000F52                   __CFG_CPD$OFF 000000  
                          _PR6 000F4B                            _PRC 7BB0                            _abs 71E6  
                          _col 0056                            prod 000FF3                            wreg 000FE8  
              __end_of_EE_READ 6FF6                ??_setupPWMRight 0001                           ?_RCE 0001  
                         ?_PRC 0001                           RCE@a 004E                           PRC@a 0031  
                         ?_abs 0001                           l3003 7D5E                           l1272 720E  
                         l3009 7D62                           l3205 7F8A                           l3117 7E9A  
                         l3029 7DAA                           l2511 7628                           l3321 7C88  
                         l3161 7F12                           l3073 7E22                           l2611 74A6  
                         l3411 72EE                           l3309 7C68                           l3261 7BFC  
                         l2541 72A0                           l3351 7CCE                           l3327 7C8C  
                         l3255 7BDC                           l3247 7BB4                           l2553 700C  
                         l3339 7CAE                           l3291 7C42                           l3267 7C00  
                         l2651 7698                           l2811 7268                           l3451 736A  
                         l3381 7D14                           l3357 7CD2                           l2653 76A0  
                         l2645 7682                           l3429 7336                           l3279 7C22  
                         l2671 76D8                           l2663 76C0                           l2639 7672  
                         l2727 795A                           l2719 78E0                           l2751 7046  
                         l2815 7274                           l2807 725C                           l3369 7CF4  
                         l3297 7C46                           l3473 7528                           l3465 7506  
                         l2841 7A50                           l2833 79CC                           l3553 7AFC  
                         l3387 7D1A                           l2667 76CA                           l2819 7280  
                         l2931 738C                           l3571 7B3E                           l3539 7AC4  
                         l2765 722E                           l2845 7A90                           l2837 7A10  
                         l3397 72E0                           l3581 7B5C                           l3573 7B44  
                         l3557 7B0A                           l3549 7AEE                           l2855 772E  
                         l2791 7824                           l3575 7B4A                           l3593 7B96  
                         l3577 7B50                           l3585 7B62                           l3569 7B36  
                         l2779 77F8                           l3579 7B56                           l3587 7B92  
                         l3499 7446                           l2799 78C0                           u2111 74FA  
                         u1321 7222                           u1250 76A4                           u1180 71F4  
                         u2141 7434                           _LATA 000F89                           u1350 7884  
                         _LATB 000F8A                           u1191 7496                           u1431 79C0  
                         _LATC 000F8B                           _LATD 000F8C                           _FSR0 000FE9  
                         u1281 78D4                           _LATE 000F8D                           u2090 7364  
                         u2171 7AB8                           u1490 7388                           u1581 7D52  
                         u1911 7BBE                           u1921 7BD0                           u1930 7BF6  
                         _TMR1 000FCE                           _TMR2 000FBC                           _TMR4 000F53  
                         _TMR6 000F4C                           abs@a 0001                           _main 7000  
                         _left 708A                           _init 70F4                           _size 0057  
                         fsr0h 000FEA                           fsr1h 000FE2                           indf0 000FEF  
                         fsr2h 000FDA                           fsr0l 000FE9                           indf1 000FE7  
                         indf2 000FDF                           fsr1l 000FE1                           fsr2l 000FD9  
                __CFG_BORV$190 000000                           prodl 000FF3                           start 0000  
                __CFG_IESO$OFF 000000          ?_displayColorDetected 0001                   ___param_bank 000000  
               capTouch@touch1 0027                 capTouch@touch2 0028                          ??_RCE 003A  
                        ??_PRC 000A                          ??_abs 0003                   ?_readFromEEP 0001  
                 _BAUDCON1bits 000FB8                          ?_main 0001                          ?_left 0001  
                        ?_init 0001                __end_of___awdiv 76E2                          _EEADR 000FA9  
              ___awdiv@divisor 0003                          _T1CON 000FCD                          _T2CON 000FBA  
                        _T4CON 000F51                          _T6CON 000F4A                ___awdiv@counter 0005  
                        _RCREG 000FAE                          _PORTA 000F80                          _PORTB 000F81  
                        _PORTC 000F82                          _PORTD 000F83                          _PORTE 000F84  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                        _TRISD 000F95                          _TRISE 000F96                          _TXREG 000FAD  
       __size_of_setADCChannel 0084                  __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000  
                __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000                 __CFG_EBTR0$OFF 000000  
               __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000  
               __CFG_EBTR3$OFF 000000                  __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000  
                __CFG_WRTD$OFF 000000                __end_of_msDelay 7130                __end_of_readADC 6FEC  
               __CFG_EBTRB$OFF 000000                          _error 7218                          _pyCal 72D8  
                        _right 70A4             __CFG_MCLRE$EXTMCLR 000000                          _trans 700A  
                        tablat 000FF5                          plusw1 000FE3                          plusw2 000FDB  
                        status 000FD8                 __CFG_HFOFST$ON 000000                 __CFG_PBADEN$ON 000000  
              capTouch@message 000B                __initialization 7562                   __end_of_main 700A  
                 __end_of_left 70A4                   __end_of_init 7110                  calibrate@temp 0031  
           readFromEEP@address 000D                         ??_main 0050                         ??_left 0001  
                       ??_init 0010                      ??_EE_READ 0001                  __activetblptr 000002  
                       _ADCON1 000FC1                         ?_error 0001                         ?_pyCal 0001  
                       _ADRESH 000FC4                         _EEDATA 000FA8                         _CCPR1L 000FBE  
                       _CCPR5L 000F55                         _EECON2 000FA7    __size_of_determineDirection 0006  
                       ?_right 0001               ___awdiv@dividend 0001                         ?_trans 0001  
                       _ANSELA 000F38                         _ANSELB 000F39                         _ANSELC 000F3A  
                       _ANSELD 000F3B                         _ANSELE 000F3C               calibrate@samples 002A  
                       _EE_WRT 70D8                 __CFG_WDTEN$OFF 000000                         _RCSTA1 000FAB  
                       _SPBRG1 000FAF               __end_of_capTouch 7562   readAllSensors@tempSensorVals 000D  
                       _TXSTA1 000FAC         ??_displayColorDetected 0001                  _setADCChannel 75DA  
             __end_of_hardLeft 7070                 __CFG_XINST$OFF 000000              writeToEEP@address 000D  
                 ?_sixSecDelay 0001                      ??___awdiv 0005                 __CFG_STVREN$ON 000000  
                       _ranges 78CA               __end_of_navigate 7376               ___awdiv@quotient 0007  
              classifyColors@a 000F        __size_of_readAllSensors 00D6                      ??_msDelay 0001  
                    ??_readADC 0001                         error@a 0009                         pyCal@a 0014  
                 __pdataCOMRAM 0050               __end_of_setupADC 7172               __end_of_setupOSC 7000  
                       tblptrh 000FF7                         tblptrl 000FF6                         tblptru 000FF8  
           RCE@commandReceived 004A                         trans@s 0001                   ?_setupSerial 0001  
             __end_of_straight 70D8                     __accesstop 0060        __end_of__initialization 75D0  
               ?_setADCChannel 0001                  ___rparam_used 000001              ?_displayRaceColor 0001  
               __pcstackCOMRAM 0001                 calibrate@F6017 00B0                    ranges@F6083 009C  
           __size_of_calibrate 02BC                   __pidataBANK0 776B                   __pidataBANK1 7130  
           ??_displayRaceColor 0001           setADCChannel@channel 0003                  __end_of_error 724E  
                __end_of_pyCal 7326                  __end_of_right 70BE                  __end_of_trans 7016  
                    RCE@a_1463 004F           __size_of_readFromEEP 0062             __size_of_aveSensor 004C  
           __size_of_hardRight 001A                        ??_error 0002                        ??_pyCal 0013  
                      ??_right 0001                        ??_trans 0001                     __pbssBANK0 00E9  
                      ?_EE_WRT 0001                __CFG_PLLCFG$OFF 000000                      PRC@a_1270 0036  
                    PRC@a_1271 0037                      PRC@a_1272 0038                      PRC@a_1273 0039  
                    PRC@a_1266 0032                      PRC@a_1267 0033                      PRC@a_1268 0034  
                    PRC@a_1269 0035                     _clearPorts 73D0             __CFG_CCP2MX$PORTC1 000000  
      __size_of_classifyColors 00F4             __CFG_CCP3MX$PORTB5 000000                        _CCP1CON 000FBD  
                      _CCP5CON 000F54                        ?_ranges 0001             __size_of_testBlack 005A  
                      _EE_READ 6FEC                      ?_capTouch 0001                      ?_hardLeft 0001  
                      _SPBRGH1 000FB0              __end_of_calibrate 8000     displayColorDetected@sensor 0003  
                 readFromEEP@a 000E                   readFromEEP@b 000F          __end_of_setupPWMRight 71B6  
              __size_of_EE_WRT 001C                ??_setADCChannel 0001                      ?_navigate 0001  
                  PRC@message2 002C              __end_of_aveSensor 72D8              __end_of_hardRight 708A  
                   calibrate@a 002F                     calibrate@b 0030                __CFG_PWRTEN$OFF 000000  
                      _Lranges 00DF                        __Hparam 0000                        _Mranges 00DA  
                      __Lparam 0000            calibrate@rangeArray 0020                      ?_setupADC 0001  
                      _Rranges 0058              RCE@nCharsReceived 004D                      ?_setupOSC 0001  
                      ___awdiv 765E                   error@message 0002           __size_of_sixSecDelay 0014  
                    ?_straight 0001                        __pcinit 7562                        __ramtop 0600  
              __size_of_ranges 00EC                        __ptext0 7000                        __ptext1 70F4  
                      __ptext2 71B6                        __ptext3 6FF6                        __ptext4 742A  
                      __ptext5 6FEC                        __ptext6 73D0                        __ptext7 7AAA  
                      __ptext8 72D8                        __ptext9 7326                 _readAllSensors 77F4  
             ranges@rangeArray 0012                        _msDelay 7110                        _readADC 6FE2  
                 __size_of_RCE 0106                   __size_of_PRC 0194                      _T1CONbits 000FCD  
                   ??_capTouch 000B                      _T2CONbits 000FBA                   __size_of_abs 0032  
                    _T4CONbits 000F51                     ??_hardLeft 0001                     _searchMode 7016  
         end_of_initialization 75D0           __size_of_setupSerial 0030                  __Lmediumconst 0000  
                   ??_navigate 0013                        ranges@a 001D                        ranges@b 001C  
                ?_setupPWMLeft 0001              __end_of_testBlack 73D0                    ?_clearPorts 0001  
                   aveSensor@a 000A                     aveSensor@s 0006                     ??_setupADC 0001  
                   ??_setupOSC 0001                        postdec1 000FE5                        postdec2 000FDD  
                      postinc0 000FEE                        postinc1 000FE6                        postinc2 000FDE  
                 writeToEEP@rs 0003                     _sensorVals 0050         __end_of_readAllSensors 78CA  
                   ??_straight 0001                      _PORTAbits 000F80                      _PORTCbits 000F82  
                    _PORTEbits 000F84            classifyColors@F6062 00A6     __end_of_determineDirection 6FE2  
                    _TRISBbits 000F93                      _TRISCbits 000F94                      _TRISEbits 000F96  
        aveSensor@measurements 0007                 ??_setupPWMLeft 0001               msDelay@delayInMs 0001  
               __end_of_EE_WRT 70F4                     _stopMotors 7030  __size_of_displayColorDetected 0088  
               _classifyColors 79B6                     _writeToEEP 748C                ?_readAllSensors 0001  
                __pidataCOMRAM 7023                 __end_of_ranges 79B6                   _raceDayColor 0055  
          start_initialization 7562      __size_of_displayRaceColor 003E                    __end_of_RCE 7BB0  
                  __end_of_PRC 7D44            __size_of_clearPorts 005A                    __end_of_abs 7218  
                  ?_searchMode 0001                       ??_EE_WRT 0001                     error@F6088 00C3  
       __end_of_classifyColors 7AAA                 _sensorChannels 00CA                  ??_readFromEEP 0001  
                   RCE@message 003C                    __pdataBANK0 0060                    __pdataBANK1 0100  
                     ??_ranges 0010                       ?_EE_READ 0001                       RCE@F6118 007A  
                  __pbssCOMRAM 005D              __size_of_capTouch 0072              __size_of_hardLeft 001A  
   classifyColors@sensorRanges 0005                       PRC@F6030 00D0                       PRC@F6028 0100  
                    _calibrate 7D44                    ?_stopMotors 0001                ?_classifyColors 0001  
            __size_of_navigate 0050                      _aveSensor 728C                      _hardRight 7070  
                     ?___awdiv 0001                    ?_writeToEEP 0001            __size_of_searchMode 000C  
            __size_of_setupADC 0022              __size_of_setupOSC 000A               __CFG_PRICLKEN$ON 000000  
         __end_of_setupPWMLeft 7194                       ?_msDelay 0001                      capTouch@a 0029  
                     ?_readADC 0001              __size_of_straight 001A            __end_of_readFromEEP 748C  
                   PRC@message 000C                      _raceColor 00BA                       _CCPTMRS0 000F49  
                     _CCPTMRS1 000F48          calibrate@samples_1256 002B          calibrate@samples_1257 002C  
        calibrate@samples_1258 002D          calibrate@samples_1259 002E                 __size_of_error 0036  
               __size_of_pyCal 004E                 __size_of_right 001A                 __size_of_trans 000C  
                   ?_calibrate 0001          __end_of_setADCChannel 765E                       _PIE1bits 000F9D  
                     _PIE5bits 000F7D                   ??_clearPorts 0001                       _PIR1bits 000F9E  
                     _PIR2bits 000FA1                       _PIR5bits 000F7E                      _testBlack 7376  
                ??_sixSecDelay 0002               __CFG_WDTPS$32768 000000                    writeToEEP@a 000E  
                  writeToEEP@b 000F                     ?_aveSensor 0001                     ?_hardRight 0001  
       __size_of_setupPWMRight 0022                     _ADCON0bits 000FC2                     _ADCON2bits 000FC0  
                readFromEEP@rs 0003                readAllSensors@a 0012                       _LLranges 00E4  
             __size_of_EE_READ 000A               _displayRaceColor 724E            __size_of_stopMotors 0012  
                ??_setupSerial 0001             __end_of_clearPorts 742A                      copy_data0 7576  
                    copy_data1 7596                      copy_data2 75B6                       _RRranges 00D5  
              writeToEEP@F6092 0092            __size_of_writeToEEP 0064                     _EECON1bits 000FA6  
           _determineDirection 6FDC                       __Hrparam 0000               ??_readAllSensors 000B  
                     __Lrparam 0000             __CFG_BOREN$SBORDIS 000000                     ?_testBlack 0001  
            __CFG_P2BMX$PORTD2 000000            ?_determineDirection 0001                    _readFromEEP 742A  
             __size_of___awdiv 0084                     _ANSELBbits 000F39            __end_of_sixSecDelay 7056  
                   _ANSELCbits 000F3A                       _capTouch 74F0               __size_of_msDelay 0020  
             __size_of_readADC 000A   __end_of_displayColorDetected 776A                       _hardLeft 7056  
                     __ptext10 7376                       __ptext11 7030                       __ptext20 7016  
                     __ptext12 7194                       __ptext21 70A4                       __ptext13 7172  
                     __ptext30 7110                       __ptext22 708A                       __ptext14 7150  
                     __ptext31 78CA                       __ptext23 7070                       __ptext15 77F4  
                     __ptext40 700A                       __ptext32 748C                       __ptext24 7056  
                     __ptext16 724E                       __ptext33 70D8                       __ptext25 79B6  
                     __ptext17 76E2                       __ptext34 765E                       __ptext26 74F0  
                     __ptext18 6FDC                       __ptext35 728C                       __ptext27 71E6  
                     __ptext19 70BE                       __ptext36 75DA                       __ptext28 7D44  
                 ??_searchMode 0001                       __ptext37 6FE2                       __ptext29 7042  
                     __ptext38 7BB0                       __ptext39 7218           ??_determineDirection 0001  
                _setupPWMRight 7194                    ??_calibrate 001E                  __size_of_main 000A  
                __size_of_left 001A                  __size_of_init 001C                       _navigate 7326  
          __end_of_setupSerial 71E6                       _setupADC 7150                       _setupOSC 6FF6  
                  ??_aveSensor 0004                    ??_hardRight 0001          __size_of_setupPWMLeft 0022  
           __end_of_searchMode 7022                       _straight 70BE                   sixSecDelay@a 0002  
                   _INTCONbits 000FF2           determineDirection@rc 005D               ??_classifyColors 0001  
               ?_setupPWMRight 0001                   _setupPWMLeft 7172                   ??_stopMotors 0001  
                   _OSCCONbits 000FD3                    ??_testBlack 0001                    _sixSecDelay 7042  
                 ??_writeToEEP 0001                aveSensor@result 0009              __CFG_T3CMX$PORTC0 000000  
           __end_of_stopMotors 7042                    _setupSerial 71B6             __end_of_writeToEEP 74F0  
            __CFG_FOSC$INTIO67 000000       __end_of_displayRaceColor 728C           _displayColorDetected 76E2  
