

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed May 22 14:00:59 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22  0000                     
    23                           ; Version 2.05
    24                           ; Generated 20/12/2018 GMT
    25                           ; 
    26                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F45K22 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     
    58                           	psect	idataCOMRAM
    59  007E09                     __pidataCOMRAM:
    60                           	opt callstack 0
    61                           
    62                           ;initializer for _raceColor
    63  007E09  30                 	db	48
    64  007E0A  30                 	db	48
    65  007E0B  30                 	db	48
    66  007E0C  30                 	db	48
    67  007E0D  30                 	db	48
    68  007E0E  30                 	db	48
    69  007E0F  30                 	db	48
    70  007E10  30                 	db	48
    71  007E11  00                 	db	0
    72                           
    73                           ;initializer for _sensorVals
    74  007E12  FF                 	db	255
    75  007E13  FF                 	db	255
    76  007E14  FF                 	db	255
    77  007E15  FF                 	db	255
    78  007E16  FF                 	db	255
    79                           
    80                           ;initializer for _RRranges
    81  007E17  8C                 	db	140
    82  007E18  B9                 	db	185
    83  007E19  C3                 	db	195
    84  007E1A  C3                 	db	195
    85  007E1B  FF                 	db	255
    86                           
    87                           ;initializer for _Rranges
    88  007E1C  8C                 	db	140
    89  007E1D  AA                 	db	170
    90  007E1E  D2                 	db	210
    91  007E1F  AF                 	db	175
    92  007E20  FF                 	db	255
    93                           
    94                           ;initializer for _Mranges
    95  007E21  82                 	db	130
    96  007E22  A5                 	db	165
    97  007E23  AF                 	db	175
    98  007E24  BC                 	db	188
    99  007E25  FF                 	db	255
   100                           
   101                           ;initializer for _Lranges
   102  007E26  82                 	db	130
   103  007E27  B2                 	db	178
   104  007E28  B4                 	db	180
   105  007E29  BC                 	db	188
   106  007E2A  FF                 	db	255
   107                           
   108                           ;initializer for _LLranges
   109  007E2B  8C                 	db	140
   110  007E2C  A8                 	db	168
   111  007E2D  B9                 	db	185
   112  007E2E  B9                 	db	185
   113  007E2F  FF                 	db	255
   114                           
   115                           ;initializer for _col
   116  007E30  42                 	db	66
   117                           
   118                           ;initializer for _size
   119  007E31  05                 	db	5
   120  0000                     _ANSELE	set	3900
   121  0000                     _ANSELD	set	3899
   122  0000                     _ANSELB	set	3897
   123  0000                     _ANSELA	set	3896
   124  0000                     _ANSELCbits	set	3898
   125  0000                     _ANSELBbits	set	3897
   126  0000                     _ANSELC	set	3898
   127  0000                     _FSR0	set	4073
   128  0000                     _OSCCONbits	set	4051
   129  0000                     _TRISE	set	3990
   130  0000                     _LATE	set	3981
   131  0000                     _PORTE	set	3972
   132  0000                     _TRISD	set	3989
   133  0000                     _LATD	set	3980
   134  0000                     _PORTD	set	3971
   135  0000                     _TRISC	set	3988
   136  0000                     _LATC	set	3979
   137  0000                     _TRISB	set	3987
   138  0000                     _LATB	set	3978
   139  0000                     _PORTB	set	3969
   140  0000                     _TRISA	set	3986
   141  0000                     _LATA	set	3977
   142  0000                     _PORTA	set	3968
   143  0000                     _ADRESH	set	4036
   144  0000                     _TRISBbits	set	3987
   145  0000                     _ADCON0bits	set	4034
   146  0000                     _ADCON1	set	4033
   147  0000                     _ADCON2bits	set	4032
   148  0000                     _TXREG	set	4013
   149  0000                     _PORTC	set	3970
   150  0000                     _TRISCbits	set	3988
   151  0000                     _BAUDCON1bits	set	4024
   152  0000                     _SPBRGH1	set	4016
   153  0000                     _SPBRG1	set	4015
   154  0000                     _RCSTA1	set	4011
   155  0000                     _TXSTA1	set	4012
   156  0000                     _PIR1bits	set	3998
   157  0000                     _PIE1bits	set	3997
   158                           
   159                           ; #config settings
   160  0000                     
   161                           	psect	cinit
   162  007E32                     __pcinit:
   163                           	opt callstack 0
   164  007E32                     start_initialization:
   165                           	opt callstack 0
   166  007E32                     __initialization:
   167                           	opt callstack 0
   168                           
   169                           ; Initialize objects allocated to COMRAM (41 bytes)
   170                           ; load TBLPTR registers with __pidataCOMRAM
   171  007E32  0E09               	movlw	low __pidataCOMRAM
   172  007E34  6EF6               	movwf	tblptrl,c
   173  007E36  0E7E               	movlw	high __pidataCOMRAM
   174  007E38  6EF7               	movwf	tblptrh,c
   175  007E3A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   176  007E3C  6EF8               	movwf	tblptru,c
   177  007E3E  EE00  F001         	lfsr	0,__pdataCOMRAM
   178  007E42  EE10 F029          	lfsr	1,41
   179  007E46                     copy_data0:
   180  007E46  0009               	tblrd		*+
   181  007E48  CFF5 FFEE          	movff	tablat,postinc0
   182  007E4C  50E5               	movf	postdec1,w,c
   183  007E4E  50E1               	movf	fsr1l,w,c
   184  007E50  E1FA               	bnz	copy_data0
   185  007E52                     end_of_initialization:
   186                           	opt callstack 0
   187  007E52                     __end_of__initialization:
   188                           	opt callstack 0
   189  007E52  0E00               	movlw	low (__Lmediumconst shr (0+16))
   190  007E54  6EF8               	movwf	tblptru,c
   191  007E56  0100               	movlb	0
   192  007E58  EFE4  F03E         	goto	_main	;jump to C main() function
   193                           
   194                           	psect	dataCOMRAM
   195  000001                     __pdataCOMRAM:
   196                           	opt callstack 0
   197  000001                     _raceColor:
   198                           	opt callstack 0
   199  000001                     	ds	9
   200  00000A                     _sensorVals:
   201                           	opt callstack 0
   202  00000A                     	ds	5
   203  00000F                     _RRranges:
   204                           	opt callstack 0
   205  00000F                     	ds	5
   206  000014                     _Rranges:
   207                           	opt callstack 0
   208  000014                     	ds	5
   209  000019                     _Mranges:
   210                           	opt callstack 0
   211  000019                     	ds	5
   212  00001E                     _Lranges:
   213                           	opt callstack 0
   214  00001E                     	ds	5
   215  000023                     _LLranges:
   216                           	opt callstack 0
   217  000023                     	ds	5
   218  000028                     _col:
   219                           	opt callstack 0
   220  000028                     	ds	1
   221  000029                     _size:
   222                           	opt callstack 0
   223  000029                     	ds	1
   224                           
   225                           	psect	cstackCOMRAM
   226  00002A                     __pcstackCOMRAM:
   227                           	opt callstack 0
   228  00002A                     ??_setADCChannel:
   229  00002A                     ?___lwdiv:
   230                           	opt callstack 0
   231  00002A                     trans@s:
   232                           	opt callstack 0
   233  00002A                     ___lwdiv@dividend:
   234                           	opt callstack 0
   235                           
   236                           ; 2 bytes @ 0x0
   237  00002A                     	ds	2
   238  00002C                     setADCChannel@channel:
   239                           	opt callstack 0
   240  00002C                     ___lwdiv@divisor:
   241                           	opt callstack 0
   242                           
   243                           ; 2 bytes @ 0x2
   244  00002C                     	ds	2
   245  00002E                     ___lwdiv@quotient:
   246                           	opt callstack 0
   247                           
   248                           ; 2 bytes @ 0x4
   249  00002E                     	ds	2
   250  000030                     ___lwdiv@counter:
   251                           	opt callstack 0
   252                           
   253                           ; 1 bytes @ 0x6
   254  000030                     	ds	1
   255  000031                     ??_aveSensor:
   256                           
   257                           ; 1 bytes @ 0x7
   258  000031                     	ds	1
   259  000032                     aveSensor@s:
   260                           	opt callstack 0
   261                           
   262                           ; 1 bytes @ 0x8
   263  000032                     	ds	1
   264  000033                     aveSensor@measurements:
   265                           	opt callstack 0
   266                           
   267                           ; 2 bytes @ 0x9
   268  000033                     	ds	2
   269  000035                     aveSensor@result:
   270                           	opt callstack 0
   271                           
   272                           ; 1 bytes @ 0xB
   273  000035                     	ds	1
   274  000036                     aveSensor@a:
   275                           	opt callstack 0
   276                           
   277                           ; 1 bytes @ 0xC
   278  000036                     	ds	1
   279  000037                     
   280                           ; 1 bytes @ 0xD
   281 ;;
   282 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   283 ;;
   284 ;; *************** function _main *****************
   285 ;; Defined at:
   286 ;;		line 77 in file "sanic.c"
   287 ;; Parameters:    Size  Location     Type
   288 ;;		None
   289 ;; Auto vars:     Size  Location     Type
   290 ;;		None
   291 ;; Return value:  Size  Location     Type
   292 ;;                  1    wreg      void 
   293 ;; Registers used:
   294 ;;		wreg, status,2, status,0, cstack
   295 ;; Tracked objects:
   296 ;;		On entry : 0/0
   297 ;;		On exit  : 0/0
   298 ;;		Unchanged: 0/0
   299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   300 ;;      Params:         0       0       0       0       0       0       0
   301 ;;      Locals:         0       0       0       0       0       0       0
   302 ;;      Temps:          0       0       0       0       0       0       0
   303 ;;      Totals:         0       0       0       0       0       0       0
   304 ;;Total ram usage:        0 bytes
   305 ;; Hardware stack levels required when called:    2
   306 ;; This function calls:
   307 ;;		_aveSensor
   308 ;;		_init
   309 ;;		_setupADC
   310 ;;		_trans
   311 ;; This function is called by:
   312 ;;		Startup code after reset
   313 ;; This function uses a non-reentrant model
   314 ;;
   315                           
   316                           	psect	text0
   317  007DC8                     __ptext0:
   318                           	opt callstack 0
   319  007DC8                     _main:
   320                           	opt callstack 29
   321                           
   322                           ;sanic.c: 94:     init();
   323                           
   324                           ;incstack = 0
   325  007DC8  ECDD  F03E         	call	_init	;wreg free
   326                           
   327                           ;sanic.c: 95:     setupADC();
   328  007DCC  ECF3  F03E         	call	_setupADC	;wreg free
   329  007DD0                     l1036:
   330                           
   331                           ;sanic.c: 97:         PORTA = aveSensor(12);
   332  007DD0  0E0C               	movlw	12
   333  007DD2  EC46  F03F         	call	_aveSensor
   334  007DD6  6E80               	movwf	3968,c	;volatile
   335                           
   336                           ;sanic.c: 98:         trans(PORTA);
   337  007DD8  5080               	movf	3968,w,c	;volatile
   338  007DDA  ECD7  F03E         	call	_trans
   339                           
   340                           ;sanic.c: 99:         trans('\n');
   341  007DDE  0E0A               	movlw	10
   342  007DE0  ECD7  F03E         	call	_trans
   343  007DE4  D7F5               	goto	l1036
   344  007DE6                     __end_of_main:
   345                           	opt callstack 0
   346                           
   347 ;; *************** function _trans *****************
   348 ;; Defined at:
   349 ;;		line 42 in file "./functions.c"
   350 ;; Parameters:    Size  Location     Type
   351 ;;  s               1    wreg     unsigned char 
   352 ;; Auto vars:     Size  Location     Type
   353 ;;  s               1    0[COMRAM] unsigned char 
   354 ;; Return value:  Size  Location     Type
   355 ;;                  1    wreg      void 
   356 ;; Registers used:
   357 ;;		wreg
   358 ;; Tracked objects:
   359 ;;		On entry : 0/0
   360 ;;		On exit  : 0/0
   361 ;;		Unchanged: 0/0
   362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   363 ;;      Params:         0       0       0       0       0       0       0
   364 ;;      Locals:         1       0       0       0       0       0       0
   365 ;;      Temps:          0       0       0       0       0       0       0
   366 ;;      Totals:         1       0       0       0       0       0       0
   367 ;;Total ram usage:        1 bytes
   368 ;; Hardware stack levels used:    1
   369 ;; This function calls:
   370 ;;		Nothing
   371 ;; This function is called by:
   372 ;;		_main
   373 ;; This function uses a non-reentrant model
   374 ;;
   375                           
   376                           	psect	text1
   377  007DAE                     __ptext1:
   378                           	opt callstack 0
   379  007DAE                     _trans:
   380                           	opt callstack 30
   381                           
   382                           ;incstack = 0
   383                           ;trans@s stored from wreg
   384  007DAE  6E2A               	movwf	trans@s,c
   385  007DB0                     
   386                           ;./functions.c: 43:     while(!PIR1bits.TX1IF);
   387  007DB0  A89E               	btfss	3998,4,c	;volatile
   388  007DB2  D7FE               	goto	l898
   389                           
   390                           ;./functions.c: 44:     TXREG = s;
   391  007DB4  C02A  FFAD         	movff	trans@s,4013	;volatile
   392  007DB8  0012               	return		;funcret
   393  007DBA                     __end_of_trans:
   394                           	opt callstack 0
   395                           
   396 ;; *************** function _setupADC *****************
   397 ;; Defined at:
   398 ;;		line 49 in file "./functions.c"
   399 ;; Parameters:    Size  Location     Type
   400 ;;		None
   401 ;; Auto vars:     Size  Location     Type
   402 ;;		None
   403 ;; Return value:  Size  Location     Type
   404 ;;                  1    wreg      void 
   405 ;; Registers used:
   406 ;;		wreg, status,2
   407 ;; Tracked objects:
   408 ;;		On entry : 0/0
   409 ;;		On exit  : 0/0
   410 ;;		Unchanged: 0/0
   411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   412 ;;      Params:         0       0       0       0       0       0       0
   413 ;;      Locals:         0       0       0       0       0       0       0
   414 ;;      Temps:          0       0       0       0       0       0       0
   415 ;;      Totals:         0       0       0       0       0       0       0
   416 ;;Total ram usage:        0 bytes
   417 ;; Hardware stack levels used:    1
   418 ;; This function calls:
   419 ;;		Nothing
   420 ;; This function is called by:
   421 ;;		_main
   422 ;; This function uses a non-reentrant model
   423 ;;
   424                           
   425                           	psect	text2
   426  007DE6                     __ptext2:
   427                           	opt callstack 0
   428  007DE6                     _setupADC:
   429                           	opt callstack 30
   430                           
   431                           ;./functions.c: 50:     ADCON2bits.ADCS = 0b100;
   432                           
   433                           ;incstack = 0
   434  007DE6  50C0               	movf	4032,w,c	;volatile
   435  007DE8  0BF8               	andlw	-8
   436  007DEA  0904               	iorlw	4
   437  007DEC  6EC0               	movwf	4032,c	;volatile
   438                           
   439                           ;./functions.c: 51:     ADCON1 = 0;
   440  007DEE  0E00               	movlw	0
   441  007DF0  6EC1               	movwf	4033,c	;volatile
   442                           
   443                           ;./functions.c: 52:     ADCON0bits.CHS = 0b01100;
   444  007DF2  50C2               	movf	4034,w,c	;volatile
   445  007DF4  0B83               	andlw	-125
   446  007DF6  0930               	iorlw	48
   447  007DF8  6EC2               	movwf	4034,c	;volatile
   448                           
   449                           ;./functions.c: 53:     ADCON2bits.ADFM = 0;
   450  007DFA  9EC0               	bcf	4032,7,c	;volatile
   451                           
   452                           ;./functions.c: 54:     ADCON2bits.ACQT = 0b101;
   453  007DFC  50C0               	movf	4032,w,c	;volatile
   454  007DFE  0BC7               	andlw	-57
   455  007E00  0928               	iorlw	40
   456  007E02  6EC0               	movwf	4032,c	;volatile
   457                           
   458                           ;./functions.c: 55:     ADCON0bits.ADON = 1;
   459  007E04  80C2               	bsf	4034,0,c	;volatile
   460  007E06  0012               	return		;funcret
   461  007E08                     __end_of_setupADC:
   462                           	opt callstack 0
   463                           
   464 ;; *************** function _init *****************
   465 ;; Defined at:
   466 ;;		line 110 in file "sanic.c"
   467 ;; Parameters:    Size  Location     Type
   468 ;;		None
   469 ;; Auto vars:     Size  Location     Type
   470 ;;		None
   471 ;; Return value:  Size  Location     Type
   472 ;;                  1    wreg      void 
   473 ;; Registers used:
   474 ;;		wreg, status,2, cstack
   475 ;; Tracked objects:
   476 ;;		On entry : 0/0
   477 ;;		On exit  : 0/0
   478 ;;		Unchanged: 0/0
   479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   480 ;;      Params:         0       0       0       0       0       0       0
   481 ;;      Locals:         0       0       0       0       0       0       0
   482 ;;      Temps:          0       0       0       0       0       0       0
   483 ;;      Totals:         0       0       0       0       0       0       0
   484 ;;Total ram usage:        0 bytes
   485 ;; Hardware stack levels used:    1
   486 ;; Hardware stack levels required when called:    1
   487 ;; This function calls:
   488 ;;		_clearPorts
   489 ;;		_setupOSC
   490 ;;		_setupSerial
   491 ;; This function is called by:
   492 ;;		_main
   493 ;; This function uses a non-reentrant model
   494 ;;
   495                           
   496                           	psect	text3
   497  007DBA                     __ptext3:
   498                           	opt callstack 0
   499  007DBA                     _init:
   500                           	opt callstack 29
   501                           
   502                           ;sanic.c: 111:     setupOSC();
   503                           
   504                           ;incstack = 0
   505  007DBA  ECD2  F03E         	call	_setupOSC	;wreg free
   506                           
   507                           ;sanic.c: 112:     clearPorts();
   508  007DBE  EC92  F03F         	call	_clearPorts	;wreg free
   509                           
   510                           ;sanic.c: 113:     setupSerial();
   511  007DC2  EC2E  F03F         	call	_setupSerial	;wreg free
   512  007DC6  0012               	return		;funcret
   513  007DC8                     __end_of_init:
   514                           	opt callstack 0
   515                           
   516 ;; *************** function _setupSerial *****************
   517 ;; Defined at:
   518 ;;		line 22 in file "./functions.c"
   519 ;; Parameters:    Size  Location     Type
   520 ;;		None
   521 ;; Auto vars:     Size  Location     Type
   522 ;;		None
   523 ;; Return value:  Size  Location     Type
   524 ;;                  1    wreg      void 
   525 ;; Registers used:
   526 ;;		wreg, status,2
   527 ;; Tracked objects:
   528 ;;		On entry : 0/0
   529 ;;		On exit  : 0/0
   530 ;;		Unchanged: 0/0
   531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   532 ;;      Params:         0       0       0       0       0       0       0
   533 ;;      Locals:         0       0       0       0       0       0       0
   534 ;;      Temps:          0       0       0       0       0       0       0
   535 ;;      Totals:         0       0       0       0       0       0       0
   536 ;;Total ram usage:        0 bytes
   537 ;; Hardware stack levels used:    1
   538 ;; This function calls:
   539 ;;		Nothing
   540 ;; This function is called by:
   541 ;;		_init
   542 ;; This function uses a non-reentrant model
   543 ;;
   544                           
   545                           	psect	text4
   546  007E5C                     __ptext4:
   547                           	opt callstack 0
   548  007E5C                     _setupSerial:
   549                           	opt callstack 29
   550                           
   551                           ;./functions.c: 23:     PIE1bits.RC1IE = 0;
   552                           
   553                           ;incstack = 0
   554  007E5C  9A9D               	bcf	3997,5,c	;volatile
   555                           
   556                           ;./functions.c: 24:     PIE1bits.TX1IE = 0;
   557  007E5E  989D               	bcf	3997,4,c	;volatile
   558                           
   559                           ;./functions.c: 25:     PIR1bits.RCIF = 0;
   560  007E60  9A9E               	bcf	3998,5,c	;volatile
   561                           
   562                           ;./functions.c: 27:     FSR0 = 0;
   563  007E62  0E00               	movlw	0
   564  007E64  6EEA               	movwf	fsr0h,c	;volatile
   565  007E66  0E00               	movlw	0
   566  007E68  6EE9               	movwf	fsr0l,c	;volatile
   567                           
   568                           ;./functions.c: 28:     TXSTA1 = 0b00100100;
   569  007E6A  0E24               	movlw	36
   570  007E6C  6EAC               	movwf	4012,c	;volatile
   571                           
   572                           ;./functions.c: 29:     RCSTA1 = 0b10010000;
   573  007E6E  0E90               	movlw	144
   574  007E70  6EAB               	movwf	4011,c	;volatile
   575                           
   576                           ;./functions.c: 31:     SPBRG1 = 25;
   577  007E72  0E19               	movlw	25
   578  007E74  6EAF               	movwf	4015,c	;volatile
   579                           
   580                           ;./functions.c: 32:     SPBRGH1 = 0;
   581  007E76  0E00               	movlw	0
   582  007E78  6EB0               	movwf	4016,c	;volatile
   583                           
   584                           ;./functions.c: 33:     BAUDCON1bits.BRG16 = 0;
   585  007E7A  96B8               	bcf	4024,3,c	;volatile
   586                           
   587                           ;./functions.c: 34:     TRISCbits.RC6 = 1;
   588  007E7C  8C94               	bsf	3988,6,c	;volatile
   589                           
   590                           ;./functions.c: 35:     TRISCbits.RC7 = 1;
   591  007E7E  8E94               	bsf	3988,7,c	;volatile
   592                           
   593                           ;./functions.c: 37:     PORTC = 0;
   594  007E80  0E00               	movlw	0
   595  007E82  6E82               	movwf	3970,c	;volatile
   596                           
   597                           ;./functions.c: 38:     ANSELC = 0;
   598  007E84  0E00               	movlw	0
   599  007E86  010F               	movlb	15	; () banked
   600  007E88  6F3A               	movwf	58,b	;volatile
   601                           
   602                           ; BSR set to: 15
   603  007E8A  0012               	return		;funcret
   604  007E8C                     __end_of_setupSerial:
   605                           	opt callstack 0
   606                           
   607 ;; *************** function _setupOSC *****************
   608 ;; Defined at:
   609 ;;		line 165 in file "./functions.c"
   610 ;; Parameters:    Size  Location     Type
   611 ;;		None
   612 ;; Auto vars:     Size  Location     Type
   613 ;;		None
   614 ;; Return value:  Size  Location     Type
   615 ;;                  1    wreg      void 
   616 ;; Registers used:
   617 ;;		wreg, status,2
   618 ;; Tracked objects:
   619 ;;		On entry : 0/0
   620 ;;		On exit  : 0/0
   621 ;;		Unchanged: 0/0
   622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   623 ;;      Params:         0       0       0       0       0       0       0
   624 ;;      Locals:         0       0       0       0       0       0       0
   625 ;;      Temps:          0       0       0       0       0       0       0
   626 ;;      Totals:         0       0       0       0       0       0       0
   627 ;;Total ram usage:        0 bytes
   628 ;; Hardware stack levels used:    1
   629 ;; This function calls:
   630 ;;		Nothing
   631 ;; This function is called by:
   632 ;;		_init
   633 ;; This function uses a non-reentrant model
   634 ;;
   635                           
   636                           	psect	text5
   637  007DA4                     __ptext5:
   638                           	opt callstack 0
   639  007DA4                     _setupOSC:
   640                           	opt callstack 29
   641                           
   642                           ;./functions.c: 166:     OSCCONbits.IRCF = 0b101;
   643                           
   644                           ; BSR set to: 15
   645                           ;incstack = 0
   646  007DA4  50D3               	movf	4051,w,c	;volatile
   647  007DA6  0B8F               	andlw	-113
   648  007DA8  0950               	iorlw	80
   649  007DAA  6ED3               	movwf	4051,c	;volatile
   650  007DAC  0012               	return		;funcret
   651  007DAE                     __end_of_setupOSC:
   652                           	opt callstack 0
   653                           
   654 ;; *************** function _clearPorts *****************
   655 ;; Defined at:
   656 ;;		line 135 in file "./functions.c"
   657 ;; Parameters:    Size  Location     Type
   658 ;;		None
   659 ;; Auto vars:     Size  Location     Type
   660 ;;		None
   661 ;; Return value:  Size  Location     Type
   662 ;;                  1    wreg      void 
   663 ;; Registers used:
   664 ;;		wreg, status,2
   665 ;; Tracked objects:
   666 ;;		On entry : 0/0
   667 ;;		On exit  : 0/0
   668 ;;		Unchanged: 0/0
   669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   670 ;;      Params:         0       0       0       0       0       0       0
   671 ;;      Locals:         0       0       0       0       0       0       0
   672 ;;      Temps:          0       0       0       0       0       0       0
   673 ;;      Totals:         0       0       0       0       0       0       0
   674 ;;Total ram usage:        0 bytes
   675 ;; Hardware stack levels used:    1
   676 ;; This function calls:
   677 ;;		Nothing
   678 ;; This function is called by:
   679 ;;		_init
   680 ;; This function uses a non-reentrant model
   681 ;;
   682                           
   683                           	psect	text6
   684  007F24                     __ptext6:
   685                           	opt callstack 0
   686  007F24                     _clearPorts:
   687                           	opt callstack 29
   688                           
   689                           ;./functions.c: 136:     PORTA = 0;
   690                           
   691                           ;incstack = 0
   692  007F24  0E00               	movlw	0
   693  007F26  6E80               	movwf	3968,c	;volatile
   694                           
   695                           ;./functions.c: 137:     LATA = 0;
   696  007F28  0E00               	movlw	0
   697  007F2A  6E89               	movwf	3977,c	;volatile
   698                           
   699                           ;./functions.c: 138:     TRISA = 0;
   700  007F2C  0E00               	movlw	0
   701  007F2E  6E92               	movwf	3986,c	;volatile
   702                           
   703                           ;./functions.c: 139:     ANSELA = 0;
   704  007F30  0E00               	movlw	0
   705  007F32  010F               	movlb	15	; () banked
   706  007F34  6F38               	movwf	56,b	;volatile
   707                           
   708                           ;./functions.c: 141:     PORTB = 0;
   709  007F36  0E00               	movlw	0
   710  007F38  6E81               	movwf	3969,c	;volatile
   711                           
   712                           ;./functions.c: 142:     LATB = 0;
   713  007F3A  0E00               	movlw	0
   714  007F3C  6E8A               	movwf	3978,c	;volatile
   715                           
   716                           ;./functions.c: 143:     TRISB = 0;
   717  007F3E  0E00               	movlw	0
   718  007F40  6E93               	movwf	3987,c	;volatile
   719                           
   720                           ;./functions.c: 144:     ANSELB = 0;
   721  007F42  0E00               	movlw	0
   722  007F44  6F39               	movwf	57,b	;volatile
   723                           
   724                           ;./functions.c: 146:     PORTC = 0;
   725  007F46  0E00               	movlw	0
   726  007F48  6E82               	movwf	3970,c	;volatile
   727                           
   728                           ;./functions.c: 147:     LATC = 0;
   729  007F4A  0E00               	movlw	0
   730  007F4C  6E8B               	movwf	3979,c	;volatile
   731                           
   732                           ;./functions.c: 148:     TRISC = 0;
   733  007F4E  0E00               	movlw	0
   734  007F50  6E94               	movwf	3988,c	;volatile
   735                           
   736                           ;./functions.c: 149:     ANSELC = 0;
   737  007F52  0E00               	movlw	0
   738  007F54  6F3A               	movwf	58,b	;volatile
   739                           
   740                           ;./functions.c: 151:     PORTD = 0;
   741  007F56  0E00               	movlw	0
   742  007F58  6E83               	movwf	3971,c	;volatile
   743                           
   744                           ;./functions.c: 152:     LATD = 0;
   745  007F5A  0E00               	movlw	0
   746  007F5C  6E8C               	movwf	3980,c	;volatile
   747                           
   748                           ;./functions.c: 153:     TRISD = 0;
   749  007F5E  0E00               	movlw	0
   750  007F60  6E95               	movwf	3989,c	;volatile
   751                           
   752                           ;./functions.c: 154:     ANSELD = 0;
   753  007F62  0E00               	movlw	0
   754  007F64  6F3B               	movwf	59,b	;volatile
   755                           
   756                           ;./functions.c: 156:     PORTE = 0;
   757  007F66  0E00               	movlw	0
   758  007F68  6E84               	movwf	3972,c	;volatile
   759                           
   760                           ;./functions.c: 157:     LATE = 0;
   761  007F6A  0E00               	movlw	0
   762  007F6C  6E8D               	movwf	3981,c	;volatile
   763                           
   764                           ;./functions.c: 158:     TRISE = 0;
   765  007F6E  0E00               	movlw	0
   766  007F70  6E96               	movwf	3990,c	;volatile
   767                           
   768                           ;./functions.c: 159:     ANSELE = 0;
   769  007F72  0E00               	movlw	0
   770  007F74  6F3C               	movwf	60,b	;volatile
   771                           
   772                           ;./functions.c: 160:     raceColor[3] = 1;
   773  007F76  0E01               	movlw	1
   774  007F78  6E04               	movwf	_raceColor+3,c
   775                           
   776                           ; BSR set to: 15
   777  007F7A  0012               	return		;funcret
   778  007F7C                     __end_of_clearPorts:
   779                           	opt callstack 0
   780                           
   781 ;; *************** function _aveSensor *****************
   782 ;; Defined at:
   783 ;;		line 107 in file "./functions.c"
   784 ;; Parameters:    Size  Location     Type
   785 ;;  s               1    wreg     unsigned char 
   786 ;; Auto vars:     Size  Location     Type
   787 ;;  s               1    8[COMRAM] unsigned char 
   788 ;;  a               1   12[COMRAM] unsigned char 
   789 ;;  measurements    2    9[COMRAM] unsigned int 
   790 ;;  result          1   11[COMRAM] unsigned char 
   791 ;; Return value:  Size  Location     Type
   792 ;;                  1    wreg      unsigned char 
   793 ;; Registers used:
   794 ;;		wreg, status,2, status,0, cstack
   795 ;; Tracked objects:
   796 ;;		On entry : 0/0
   797 ;;		On exit  : 0/0
   798 ;;		Unchanged: 0/0
   799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   800 ;;      Params:         0       0       0       0       0       0       0
   801 ;;      Locals:         5       0       0       0       0       0       0
   802 ;;      Temps:          1       0       0       0       0       0       0
   803 ;;      Totals:         6       0       0       0       0       0       0
   804 ;;Total ram usage:        6 bytes
   805 ;; Hardware stack levels used:    1
   806 ;; Hardware stack levels required when called:    1
   807 ;; This function calls:
   808 ;;		___lwdiv
   809 ;;		_readADC
   810 ;;		_setADCChannel
   811 ;; This function is called by:
   812 ;;		_main
   813 ;; This function uses a non-reentrant model
   814 ;;
   815                           
   816                           	psect	text7
   817  007E8C                     __ptext7:
   818                           	opt callstack 0
   819  007E8C                     _aveSensor:
   820                           	opt callstack 29
   821                           
   822                           ; BSR set to: 15
   823                           ;incstack = 0
   824                           ;aveSensor@s stored from wreg
   825  007E8C  6E32               	movwf	aveSensor@s,c
   826                           
   827                           ;./functions.c: 108:     setADCChannel(s);
   828  007E8E  5032               	movf	aveSensor@s,w,c
   829  007E90  ECBE  F03F         	call	_setADCChannel
   830                           
   831                           ;./functions.c: 109:     unsigned int measurements = 0;
   832  007E94  0E00               	movlw	0
   833  007E96  6E34               	movwf	aveSensor@measurements+1,c
   834  007E98  0E00               	movlw	0
   835  007E9A  6E33               	movwf	aveSensor@measurements,c
   836                           
   837                           ;./functions.c: 111:     for (unsigned char a = 0; a < 10; a++){
   838  007E9C  0E00               	movlw	0
   839  007E9E  6E36               	movwf	aveSensor@a,c
   840  007EA0                     l1022:
   841                           
   842                           ;./functions.c: 112:         measurements += readADC();
   843  007EA0  ECCD  F03E         	call	_readADC	;wreg free
   844  007EA4  6E31               	movwf	??_aveSensor& (0+255),c
   845  007EA6  5031               	movf	??_aveSensor,w,c
   846  007EA8  2633               	addwf	aveSensor@measurements,f,c
   847  007EAA  0E00               	movlw	0
   848  007EAC  2234               	addwfc	aveSensor@measurements+1,f,c
   849                           
   850                           ;./functions.c: 113:     }
   851  007EAE  2A36               	incf	aveSensor@a,f,c
   852  007EB0  0E09               	movlw	9
   853  007EB2  6436               	cpfsgt	aveSensor@a,c
   854  007EB4  D7F5               	goto	l1022
   855                           
   856                           ;./functions.c: 115:     unsigned char result = measurements / 10;
   857  007EB6  C033  F02A         	movff	aveSensor@measurements,___lwdiv@dividend
   858  007EBA  C034  F02B         	movff	aveSensor@measurements+1,___lwdiv@dividend+1
   859  007EBE  0E00               	movlw	0
   860  007EC0  6E2D               	movwf	___lwdiv@divisor+1,c
   861  007EC2  0E0A               	movlw	10
   862  007EC4  6E2C               	movwf	___lwdiv@divisor,c
   863  007EC6  EC69  F03F         	call	___lwdiv	;wreg free
   864  007ECA  502A               	movf	?___lwdiv,w,c
   865  007ECC  6E35               	movwf	aveSensor@result,c
   866                           
   867                           ;./functions.c: 117:     return result;
   868  007ECE  5035               	movf	aveSensor@result,w,c
   869  007ED0  0012               	return		;funcret
   870  007ED2                     __end_of_aveSensor:
   871                           	opt callstack 0
   872                           
   873 ;; *************** function _setADCChannel *****************
   874 ;; Defined at:
   875 ;;		line 61 in file "./functions.c"
   876 ;; Parameters:    Size  Location     Type
   877 ;;  channel         1    wreg     unsigned char 
   878 ;; Auto vars:     Size  Location     Type
   879 ;;  channel         1    2[COMRAM] unsigned char 
   880 ;; Return value:  Size  Location     Type
   881 ;;                  1    wreg      void 
   882 ;; Registers used:
   883 ;;		wreg, status,2, status,0
   884 ;; Tracked objects:
   885 ;;		On entry : 0/0
   886 ;;		On exit  : 0/0
   887 ;;		Unchanged: 0/0
   888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   889 ;;      Params:         0       0       0       0       0       0       0
   890 ;;      Locals:         1       0       0       0       0       0       0
   891 ;;      Temps:          2       0       0       0       0       0       0
   892 ;;      Totals:         3       0       0       0       0       0       0
   893 ;;Total ram usage:        3 bytes
   894 ;; Hardware stack levels used:    1
   895 ;; This function calls:
   896 ;;		Nothing
   897 ;; This function is called by:
   898 ;;		_aveSensor
   899 ;; This function uses a non-reentrant model
   900 ;;
   901                           
   902                           	psect	text8
   903  007F7C                     __ptext8:
   904                           	opt callstack 0
   905  007F7C                     _setADCChannel:
   906                           	opt callstack 29
   907                           
   908                           ;incstack = 0
   909                           ;setADCChannel@channel stored from wreg
   910  007F7C  6E2C               	movwf	setADCChannel@channel,c
   911                           
   912                           ;./functions.c: 62:     ADCON0bits.CHS = channel;
   913  007F7E  C02C  F02A         	movff	setADCChannel@channel,??_setADCChannel
   914  007F82  462A               	rlncf	??_setADCChannel,f,c
   915  007F84  462A               	rlncf	??_setADCChannel,f,c
   916  007F86  50C2               	movf	4034,w,c	;volatile
   917  007F88  182A               	xorwf	??_setADCChannel,w,c
   918  007F8A  0B83               	andlw	-125
   919  007F8C  182A               	xorwf	??_setADCChannel,w,c
   920  007F8E  6EC2               	movwf	4034,c	;volatile
   921                           
   922                           ;./functions.c: 64:     switch (channel){
   923  007F90  D01C               	goto	l856
   924  007F92                     l112:
   925                           
   926                           ;./functions.c: 66:         TRISBbits.TRISB2 = 1;
   927  007F92  8493               	bsf	3987,2,c	;volatile
   928                           
   929                           ;./functions.c: 67:         ANSELBbits.ANSB2 = 1;
   930  007F94  010F               	movlb	15	; () banked
   931  007F96  8539               	bsf	57,2,b	;volatile
   932                           
   933                           ;./functions.c: 68:         break;
   934  007F98  0012               	return	
   935  007F9A                     l114:
   936                           
   937                           ;./functions.c: 70:         TRISBbits.TRISB3 = 1;
   938  007F9A  8693               	bsf	3987,3,c	;volatile
   939                           
   940                           ;./functions.c: 71:         ANSELBbits.ANSB3 = 1;
   941  007F9C  010F               	movlb	15	; () banked
   942  007F9E  8739               	bsf	57,3,b	;volatile
   943                           
   944                           ;./functions.c: 72:         break;
   945  007FA0  0012               	return	
   946  007FA2                     l115:
   947                           
   948                           ;./functions.c: 74:         TRISBbits.TRISB1 = 1;
   949  007FA2  8293               	bsf	3987,1,c	;volatile
   950                           
   951                           ;./functions.c: 75:         ANSELBbits.ANSB1 = 1;
   952  007FA4  010F               	movlb	15	; () banked
   953  007FA6  8339               	bsf	57,1,b	;volatile
   954                           
   955                           ;./functions.c: 76:         break;
   956  007FA8  0012               	return	
   957  007FAA                     l116:
   958                           
   959                           ;./functions.c: 78:         TRISBbits.TRISB0 = 1;
   960  007FAA  8093               	bsf	3987,0,c	;volatile
   961                           
   962                           ;./functions.c: 79:         ANSELBbits.ANSB0 = 1;
   963  007FAC  010F               	movlb	15	; () banked
   964  007FAE  8139               	bsf	57,0,b	;volatile
   965                           
   966                           ;./functions.c: 80:         break;
   967  007FB0  0012               	return	
   968  007FB2                     l117:
   969                           
   970                           ;./functions.c: 82:         TRISBbits.TRISB5 = 1;
   971  007FB2  8A93               	bsf	3987,5,c	;volatile
   972                           
   973                           ;./functions.c: 83:         ANSELBbits.ANSB5 = 1;
   974  007FB4  010F               	movlb	15	; () banked
   975  007FB6  8B39               	bsf	57,5,b	;volatile
   976                           
   977                           ;./functions.c: 84:         break;
   978  007FB8  0012               	return	
   979  007FBA                     l118:
   980                           
   981                           ;./functions.c: 86:         TRISCbits.TRISC3 = 1;
   982  007FBA  8694               	bsf	3988,3,c	;volatile
   983                           
   984                           ;./functions.c: 87:         ANSELCbits.ANSC3 = 1;
   985  007FBC  010F               	movlb	15	; () banked
   986  007FBE  873A               	bsf	58,3,b	;volatile
   987                           
   988                           ;./functions.c: 88:         break;
   989  007FC0  0012               	return	
   990  007FC2                     l119:
   991                           
   992                           ;./functions.c: 91:         TRISBbits.TRISB0 = 1;
   993  007FC2  8093               	bsf	3987,0,c	;volatile
   994                           
   995                           ;./functions.c: 92:         ANSELBbits.ANSB0 = 1;
   996  007FC4  010F               	movlb	15	; () banked
   997  007FC6  8139               	bsf	57,0,b	;volatile
   998                           
   999                           ;./functions.c: 93:         break;
  1000  007FC8  0012               	return	
  1001  007FCA                     l856:
  1002  007FCA  502C               	movf	setADCChannel@channel,w,c
  1003  007FCC  6E2A               	movwf	??_setADCChannel& (0+255),c
  1004  007FCE  6A2B               	clrf	(??_setADCChannel+1)& (0+255),c
  1005                           
  1006                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1007                           ; Switch size 1, requested type "simple"
  1008                           ; Number of cases is 1, Range of values is 0 to 0
  1009                           ; switch strategies available:
  1010                           ; Name         Instructions Cycles
  1011                           ; simple_byte            4     3 (average)
  1012                           ;	Chosen strategy is simple_byte
  1013  007FD0  502B               	movf	??_setADCChannel+1,w,c
  1014  007FD2  0A00               	xorlw	0	; case 0
  1015  007FD4  A4D8               	btfss	status,2,c
  1016  007FD6  D7F5               	goto	l119
  1017                           
  1018                           ; Switch size 1, requested type "simple"
  1019                           ; Number of cases is 6, Range of values is 8 to 15
  1020                           ; switch strategies available:
  1021                           ; Name         Instructions Cycles
  1022                           ; simple_byte           19    10 (average)
  1023                           ;	Chosen strategy is simple_byte
  1024  007FD8  502A               	movf	??_setADCChannel,w,c
  1025  007FDA  0A08               	xorlw	8	; case 8
  1026  007FDC  B4D8               	btfsc	status,2,c
  1027  007FDE  D7D9               	goto	l112
  1028  007FE0  0A01               	xorlw	1	; case 9
  1029  007FE2  B4D8               	btfsc	status,2,c
  1030  007FE4  D7DA               	goto	l114
  1031  007FE6  0A03               	xorlw	3	; case 10
  1032  007FE8  B4D8               	btfsc	status,2,c
  1033  007FEA  D7DB               	goto	l115
  1034  007FEC  0A06               	xorlw	6	; case 12
  1035  007FEE  B4D8               	btfsc	status,2,c
  1036  007FF0  D7DC               	goto	l116
  1037  007FF2  0A01               	xorlw	1	; case 13
  1038  007FF4  B4D8               	btfsc	status,2,c
  1039  007FF6  D7DD               	goto	l117
  1040  007FF8  0A02               	xorlw	2	; case 15
  1041  007FFA  B4D8               	btfsc	status,2,c
  1042  007FFC  D7DE               	goto	l118
  1043  007FFE  D7E1               	goto	l119
  1044  008000                     __end_of_setADCChannel:
  1045                           	opt callstack 0
  1046                           
  1047 ;; *************** function _readADC *****************
  1048 ;; Defined at:
  1049 ;;		line 99 in file "./functions.c"
  1050 ;; Parameters:    Size  Location     Type
  1051 ;;		None
  1052 ;; Auto vars:     Size  Location     Type
  1053 ;;		None
  1054 ;; Return value:  Size  Location     Type
  1055 ;;                  1    wreg      unsigned char 
  1056 ;; Registers used:
  1057 ;;		wreg, status,2
  1058 ;; Tracked objects:
  1059 ;;		On entry : 0/0
  1060 ;;		On exit  : 0/0
  1061 ;;		Unchanged: 0/0
  1062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1063 ;;      Params:         0       0       0       0       0       0       0
  1064 ;;      Locals:         0       0       0       0       0       0       0
  1065 ;;      Temps:          0       0       0       0       0       0       0
  1066 ;;      Totals:         0       0       0       0       0       0       0
  1067 ;;Total ram usage:        0 bytes
  1068 ;; Hardware stack levels used:    1
  1069 ;; This function calls:
  1070 ;;		Nothing
  1071 ;; This function is called by:
  1072 ;;		_aveSensor
  1073 ;; This function uses a non-reentrant model
  1074 ;;
  1075                           
  1076                           	psect	text9
  1077  007D9A                     __ptext9:
  1078                           	opt callstack 0
  1079  007D9A                     _readADC:
  1080                           	opt callstack 29
  1081                           
  1082                           ;./functions.c: 100:     ADCON0bits.GO = 1;
  1083                           
  1084                           ; BSR set to: 15
  1085                           ;incstack = 0
  1086  007D9A  82C2               	bsf	4034,1,c	;volatile
  1087  007D9C                     l123:
  1088  007D9C  B2C2               	btfsc	4034,1,c	;volatile
  1089  007D9E  D7FE               	goto	l123
  1090                           
  1091                           ;./functions.c: 103:     return ADRESH;
  1092  007DA0  50C4               	movf	4036,w,c	;volatile
  1093  007DA2  0012               	return		;funcret
  1094  007DA4                     __end_of_readADC:
  1095                           	opt callstack 0
  1096                           
  1097 ;; *************** function ___lwdiv *****************
  1098 ;; Defined at:
  1099 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\lwdiv.c"
  1100 ;; Parameters:    Size  Location     Type
  1101 ;;  dividend        2    0[COMRAM] unsigned int 
  1102 ;;  divisor         2    2[COMRAM] unsigned int 
  1103 ;; Auto vars:     Size  Location     Type
  1104 ;;  quotient        2    4[COMRAM] unsigned int 
  1105 ;;  counter         1    6[COMRAM] unsigned char 
  1106 ;; Return value:  Size  Location     Type
  1107 ;;                  2    0[COMRAM] unsigned int 
  1108 ;; Registers used:
  1109 ;;		wreg, status,2, status,0
  1110 ;; Tracked objects:
  1111 ;;		On entry : 0/0
  1112 ;;		On exit  : 0/0
  1113 ;;		Unchanged: 0/0
  1114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1115 ;;      Params:         4       0       0       0       0       0       0
  1116 ;;      Locals:         3       0       0       0       0       0       0
  1117 ;;      Temps:          0       0       0       0       0       0       0
  1118 ;;      Totals:         7       0       0       0       0       0       0
  1119 ;;Total ram usage:        7 bytes
  1120 ;; Hardware stack levels used:    1
  1121 ;; This function calls:
  1122 ;;		Nothing
  1123 ;; This function is called by:
  1124 ;;		_aveSensor
  1125 ;; This function uses a non-reentrant model
  1126 ;;
  1127                           
  1128                           	psect	text10
  1129  007ED2                     __ptext10:
  1130                           	opt callstack 0
  1131  007ED2                     ___lwdiv:
  1132                           	opt callstack 29
  1133                           
  1134                           ;incstack = 0
  1135  007ED2  0E00               	movlw	0
  1136  007ED4  6E2F               	movwf	___lwdiv@quotient+1,c
  1137  007ED6  0E00               	movlw	0
  1138  007ED8  6E2E               	movwf	___lwdiv@quotient,c
  1139  007EDA  502C               	movf	___lwdiv@divisor,w,c
  1140  007EDC  102D               	iorwf	___lwdiv@divisor+1,w,c
  1141  007EDE  B4D8               	btfsc	status,2,c
  1142  007EE0  D01C               	goto	l658
  1143  007EE2  0E01               	movlw	1
  1144  007EE4  6E30               	movwf	___lwdiv@counter,c
  1145  007EE6  D004               	goto	l998
  1146  007EE8                     l996:
  1147  007EE8  90D8               	bcf	status,0,c
  1148  007EEA  362C               	rlcf	___lwdiv@divisor,f,c
  1149  007EEC  362D               	rlcf	___lwdiv@divisor+1,f,c
  1150  007EEE  2A30               	incf	___lwdiv@counter,f,c
  1151  007EF0                     l998:
  1152  007EF0  AE2D               	btfss	___lwdiv@divisor+1,7,c
  1153  007EF2  D7FA               	goto	l996
  1154  007EF4                     u100:
  1155  007EF4  90D8               	bcf	status,0,c
  1156  007EF6  362E               	rlcf	___lwdiv@quotient,f,c
  1157  007EF8  362F               	rlcf	___lwdiv@quotient+1,f,c
  1158  007EFA  502C               	movf	___lwdiv@divisor,w,c
  1159  007EFC  5C2A               	subwf	___lwdiv@dividend,w,c
  1160  007EFE  502D               	movf	___lwdiv@divisor+1,w,c
  1161  007F00  582B               	subwfb	___lwdiv@dividend+1,w,c
  1162  007F02  A0D8               	btfss	status,0,c
  1163  007F04  D005               	goto	l1008
  1164  007F06  502C               	movf	___lwdiv@divisor,w,c
  1165  007F08  5E2A               	subwf	___lwdiv@dividend,f,c
  1166  007F0A  502D               	movf	___lwdiv@divisor+1,w,c
  1167  007F0C  5A2B               	subwfb	___lwdiv@dividend+1,f,c
  1168  007F0E  802E               	bsf	___lwdiv@quotient,0,c
  1169  007F10                     l1008:
  1170  007F10  90D8               	bcf	status,0,c
  1171  007F12  322D               	rrcf	___lwdiv@divisor+1,f,c
  1172  007F14  322C               	rrcf	___lwdiv@divisor,f,c
  1173  007F16  2E30               	decfsz	___lwdiv@counter,f,c
  1174  007F18  D7ED               	goto	u100
  1175  007F1A                     l658:
  1176  007F1A  C02E  F02A         	movff	___lwdiv@quotient,?___lwdiv
  1177  007F1E  C02F  F02B         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1178  007F22  0012               	return		;funcret
  1179  007F24                     __end_of___lwdiv:
  1180                           	opt callstack 0
  1181  0000                     
  1182                           	psect	rparam
  1183  0000                     tosu	equ	0xFFF
  1184                           tosh	equ	0xFFE
  1185                           tosl	equ	0xFFD
  1186                           stkptr	equ	0xFFC
  1187                           pclatu	equ	0xFFB
  1188                           pclath	equ	0xFFA
  1189                           pcl	equ	0xFF9
  1190                           tblptru	equ	0xFF8
  1191                           tblptrh	equ	0xFF7
  1192                           tblptrl	equ	0xFF6
  1193                           tablat	equ	0xFF5
  1194                           prodh	equ	0xFF4
  1195                           prodl	equ	0xFF3
  1196                           indf0	equ	0xFEF
  1197                           postinc0	equ	0xFEE
  1198                           postdec0	equ	0xFED
  1199                           preinc0	equ	0xFEC
  1200                           plusw0	equ	0xFEB
  1201                           fsr0h	equ	0xFEA
  1202                           fsr0l	equ	0xFE9
  1203                           wreg	equ	0xFE8
  1204                           indf1	equ	0xFE7
  1205                           postinc1	equ	0xFE6
  1206                           postdec1	equ	0xFE5
  1207                           preinc1	equ	0xFE4
  1208                           plusw1	equ	0xFE3
  1209                           fsr1h	equ	0xFE2
  1210                           fsr1l	equ	0xFE1
  1211                           bsr	equ	0xFE0
  1212                           indf2	equ	0xFDF
  1213                           postinc2	equ	0xFDE
  1214                           postdec2	equ	0xFDD
  1215                           preinc2	equ	0xFDC
  1216                           plusw2	equ	0xFDB
  1217                           fsr2h	equ	0xFDA
  1218                           fsr2l	equ	0xFD9
  1219                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        41
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     13      54
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_aveSensor
    _aveSensor->___lwdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     474
                          _aveSensor
                               _init
                           _setupADC
                              _trans
 ---------------------------------------------------------------------------------
 (1) _trans                                                1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setupADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0       0
                         _clearPorts
                           _setupOSC
                        _setupSerial
 ---------------------------------------------------------------------------------
 (2) _setupSerial                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setupOSC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clearPorts                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _aveSensor                                            6     6      0     459
                                              7 COMRAM     6     6      0
                            ___lwdiv
                            _readADC
                      _setADCChannel
 ---------------------------------------------------------------------------------
 (2) _setADCChannel                                        3     3      0      30
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _readADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _aveSensor
     ___lwdiv
     _readADC
     _setADCChannel
   _init
     _clearPorts
     _setupOSC
     _setupSerial
   _setupADC
   _trans

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      D      36       1       56.8%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      36       9        0.0%
DATA                 0      0      36      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed May 22 14:00:59 2019

           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000              __CFG_LVP$ON 000000                      l112 7F92  
                    l114 7F9A                      l123 7D9C                      l115 7FA2  
                    l116 7FAA                      l117 7FB2                      l118 7FBA  
                    l119 7FC2                      l658 7F1A                      l856 7FCA  
                    l898 7DB0                      l996 7EE8                      l998 7EF0  
           __CFG_CPB$OFF 000000                      u100 7EF4             __CFG_CPD$OFF 000000  
                    _col 0028                     l1022 7EA0                     l1008 7F10  
                   l1036 7DD0                     _LATA 000F89                     _LATB 000F8A  
                   _LATC 000F8B                     _LATD 000F8C                     _FSR0 000FE9  
                   _LATE 000F8D                     _main 7DC8                     _init 7DBA  
                   _size 0029                     fsr1l 000FE1            __CFG_BORV$190 000000  
                   start 0000            __CFG_IESO$OFF 000000             ___param_bank 000000  
           _BAUDCON1bits 000FB8                    ?_main 002A                    ?_init 002A  
        __end_of___lwdiv 7F24                    _PORTA 000F80                    _PORTB 000F81  
                  _PORTC 000F82                    _PORTD 000F83                    _PORTE 000F84  
                  _TRISA 000F92                    _TRISB 000F93                    _TRISC 000F94  
                  _TRISD 000F95                    _TRISE 000F96                    _TXREG 000FAD  
 __size_of_setADCChannel 0084            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000          __end_of_readADC 7DA4           __CFG_EBTRB$OFF 000000  
     __CFG_MCLRE$EXTMCLR 000000                    _trans 7DAE                    tablat 000FF5  
                  status 000FD8           __CFG_HFOFST$ON 000000           __CFG_PBADEN$ON 000000  
        __initialization 7E32             __end_of_main 7DE6             __end_of_init 7DC8  
                 ??_main 0037                   ??_init 002A            __activetblptr 000002  
                 _ADCON1 000FC1                   _ADRESH 000FC4                   ?_trans 002A  
                 _ANSELA 000F38                   _ANSELB 000F39                   _ANSELC 000F3A  
                 _ANSELD 000F3B                   _ANSELE 000F3C           __CFG_WDTEN$OFF 000000  
                 _RCSTA1 000FAB                   _SPBRG1 000FAF                   _TXSTA1 000FAC  
          _setADCChannel 7F7C           __CFG_XINST$OFF 000000           __CFG_STVREN$ON 000000  
              ??___lwdiv 002E                ??_readADC 002A             __pdataCOMRAM 0001  
       __end_of_setupADC 7E08         __end_of_setupOSC 7DAE                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                   trans@s 002A  
           ?_setupSerial 002A               __accesstop 0060  __end_of__initialization 7E52  
         ?_setADCChannel 002A            ___rparam_used 000001           __pcstackCOMRAM 002A  
   setADCChannel@channel 002C            __end_of_trans 7DBA       __size_of_aveSensor 0046  
                ??_trans 002A          __CFG_PLLCFG$OFF 000000               _clearPorts 7F24  
     __CFG_CCP2MX$PORTC1 000000       __CFG_CCP3MX$PORTB5 000000                  _SPBRGH1 000FB0  
        ??_setADCChannel 002A        __end_of_aveSensor 7ED2          __CFG_PWRTEN$OFF 000000  
                _Lranges 001E                  __Hparam 0000                  _Mranges 0019  
                __Lparam 0000                ?_setupADC 002A                  _Rranges 0014  
              ?_setupOSC 002A                  ___lwdiv 7ED2                  __pcinit 7E32  
                __ramtop 0600                  __ptext0 7DC8                  __ptext1 7DAE  
                __ptext2 7DE6                  __ptext3 7DBA                  __ptext4 7E5C  
                __ptext5 7DA4                  __ptext6 7F24                  __ptext7 7E8C  
                __ptext8 7F7C                  __ptext9 7D9A                  _readADC 7D9A  
   end_of_initialization 7E52     __size_of_setupSerial 0030            __Lmediumconst 0000  
            ?_clearPorts 002A               aveSensor@a 0036               aveSensor@s 0032  
             ??_setupADC 002A               ??_setupOSC 002A                  postdec1 000FE5  
                postinc0 000FEE               _sensorVals 000A                _TRISBbits 000F93  
              _TRISCbits 000F94    aveSensor@measurements 0033            __pidataCOMRAM 7E09  
    start_initialization 7E32      __size_of_clearPorts 0058         ___lwdiv@dividend 002A  
              _aveSensor 7E8C                 ?___lwdiv 002A        __size_of_setupADC 0022  
      __size_of_setupOSC 000A         __CFG_PRICLKEN$ON 000000                 ?_readADC 002A  
              _raceColor 0001         ___lwdiv@quotient 002E           __size_of_trans 000C  
  __end_of_setADCChannel 8000                 _PIE1bits 000F9D             ??_clearPorts 002A  
               _PIR1bits 000F9E         __CFG_WDTPS$32768 000000               ?_aveSensor 002A  
             _ADCON0bits 000FC2               _ADCON2bits 000FC0                 _LLranges 0023  
          ??_setupSerial 002A       __end_of_clearPorts 7F7C                copy_data0 7E46  
               _RRranges 000F                 __Hrparam 0000                 __Lrparam 0000  
     __CFG_BOREN$SBORDIS 000000        __CFG_P2BMX$PORTD2 000000         __size_of___lwdiv 0052  
             _ANSELBbits 000F39               _ANSELCbits 000F3A         __size_of_readADC 000A  
        ___lwdiv@divisor 002C          ___lwdiv@counter 0030                 __ptext10 7ED2  
          __size_of_main 001E            __size_of_init 000E      __end_of_setupSerial 7E8C  
               _setupADC 7DE6                 _setupOSC 7DA4              ??_aveSensor 0031  
             _OSCCONbits 000FD3          aveSensor@result 0035        __CFG_T3CMX$PORTC0 000000  
            _setupSerial 7E5C        __CFG_FOSC$INTIO67 000000  
