

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon May 27 02:24:19 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    58                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    59  0000                     
    60                           ; Version 2.05
    61                           ; Generated 20/12/2018 GMT
    62                           ; 
    63                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F45K22 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     
    95                           	psect	idataCOMRAM
    96  006F8A                     __pidataCOMRAM:
    97                           	opt callstack 0
    98                           
    99                           ;initializer for _sensorVals
   100  006F8A  78                 	db	120
   101  006F8B  AA                 	db	170
   102  006F8C  AA                 	db	170
   103  006F8D  BE                 	db	190
   104  006F8E  FA                 	db	250
   105                           
   106                           ;initializer for _col
   107  006F8F  42                 	db	66
   108                           
   109                           ;initializer for _size
   110  006F90  05                 	db	5
   111                           
   112                           ;initializer for _LLranges
   113  006F91  8C                 	db	140
   114  006F92  A8                 	db	168
   115  006F93  B9                 	db	185
   116  006F94  B9                 	db	185
   117  006F95  FF                 	db	255
   118                           
   119                           	psect	idataBANK0
   120  00777B                     __pidataBANK0:
   121                           	opt callstack 0
   122                           
   123                           ;initializer for capTouch@F6045
   124  00777B  0A                 	db	10
   125  00777C  53                 	db	83
   126  00777D  61                 	db	97
   127  00777E  6E                 	db	110
   128  00777F  69                 	db	105
   129  007780  63                 	db	99
   130  007781  20                 	db	32
   131  007782  77                 	db	119
   132  007783  61                 	db	97
   133  007784  69                 	db	105
   134  007785  74                 	db	116
   135  007786  73                 	db	115
   136  007787  20                 	db	32
   137  007788  66                 	db	102
   138  007789  6F                 	db	111
   139  00778A  72                 	db	114
   140  00778B  20                 	db	32
   141  00778C  61                 	db	97
   142  00778D  20                 	db	32
   143  00778E  74                 	db	116
   144  00778F  6F                 	db	111
   145  007790  75                 	db	117
   146  007791  63                 	db	99
   147  007792  68                 	db	104
   148  007793  0A                 	db	10
   149  007794  00                 	db	0
   150                           
   151                           ;initializer for RCE@F6117
   152  007795  0A                 	db	10
   153  007796  53                 	db	83
   154  007797  61                 	db	97
   155  007798  6E                 	db	110
   156  007799  69                 	db	105
   157  00779A  63                 	db	99
   158  00779B  20                 	db	32
   159  00779C  72                 	db	114
   160  00779D  61                 	db	97
   161  00779E  63                 	db	99
   162  00779F  65                 	db	101
   163  0077A0  73                 	db	115
   164  0077A1  20                 	db	32
   165  0077A2  00                 	db	0
   166                           
   167                           ;initializer for readFromEEP@F6098
   168  0077A3  57                 	db	low _LLranges
   169  0077A4  00                 	db	high _LLranges
   170  0077A5  E4                 	db	low _Lranges
   171  0077A6  00                 	db	high _Lranges
   172  0077A7  DF                 	db	low _Mranges
   173  0077A8  00                 	db	high _Mranges
   174  0077A9  DA                 	db	low _Rranges
   175  0077AA  00                 	db	high _Rranges
   176  0077AB  D5                 	db	low _RRranges
   177  0077AC  00                 	db	high _RRranges
   178                           
   179                           ;initializer for writeToEEP@F6091
   180  0077AD  57                 	db	low _LLranges
   181  0077AE  00                 	db	high _LLranges
   182  0077AF  E4                 	db	low _Lranges
   183  0077B0  00                 	db	high _Lranges
   184  0077B1  DF                 	db	low _Mranges
   185  0077B2  00                 	db	high _Mranges
   186  0077B3  DA                 	db	low _Rranges
   187  0077B4  00                 	db	high _Rranges
   188  0077B5  D5                 	db	low _RRranges
   189  0077B6  00                 	db	high _RRranges
   190                           
   191                           ;initializer for ranges@F6082
   192  0077B7  57                 	db	low _LLranges
   193  0077B8  00                 	db	high _LLranges
   194  0077B9  E4                 	db	low _Lranges
   195  0077BA  00                 	db	high _Lranges
   196  0077BB  DF                 	db	low _Mranges
   197  0077BC  00                 	db	high _Mranges
   198  0077BD  DA                 	db	low _Rranges
   199  0077BE  00                 	db	high _Rranges
   200  0077BF  D5                 	db	low _RRranges
   201  0077C0  00                 	db	high _RRranges
   202                           
   203                           ;initializer for classifyColors@F6061
   204  0077C1  57                 	db	low _LLranges
   205  0077C2  00                 	db	high _LLranges
   206  0077C3  E4                 	db	low _Lranges
   207  0077C4  00                 	db	high _Lranges
   208  0077C5  DF                 	db	low _Mranges
   209  0077C6  00                 	db	high _Mranges
   210  0077C7  DA                 	db	low _Rranges
   211  0077C8  00                 	db	high _Rranges
   212  0077C9  D5                 	db	low _RRranges
   213  0077CA  00                 	db	high _RRranges
   214                           
   215                           ;initializer for calibrate@F6016
   216  0077CB  57                 	db	low _LLranges
   217  0077CC  00                 	db	high _LLranges
   218  0077CD  E4                 	db	low _Lranges
   219  0077CE  00                 	db	high _Lranges
   220  0077CF  DF                 	db	low _Mranges
   221  0077D0  00                 	db	high _Mranges
   222  0077D1  DA                 	db	low _Rranges
   223  0077D2  00                 	db	high _Rranges
   224  0077D3  D5                 	db	low _RRranges
   225  0077D4  00                 	db	high _RRranges
   226                           
   227                           ;initializer for _raceColor
   228  0077D5  30                 	db	48
   229  0077D6  30                 	db	48
   230  0077D7  30                 	db	48
   231  0077D8  30                 	db	48
   232  0077D9  31                 	db	49
   233  0077DA  30                 	db	48
   234  0077DB  30                 	db	48
   235  0077DC  30                 	db	48
   236  0077DD  00                 	db	0
   237                           
   238                           ;initializer for error@F6087
   239  0077DE  45                 	db	69
   240  0077DF  52                 	db	82
   241  0077E0  52                 	db	82
   242  0077E1  4F                 	db	79
   243  0077E2  52                 	db	82
   244  0077E3  0A                 	db	10
   245  0077E4  00                 	db	0
   246                           
   247                           ;initializer for _sensorChannels
   248  0077E5  0C                 	db	12
   249  0077E6  0A                 	db	10
   250  0077E7  08                 	db	8
   251  0077E8  09                 	db	9
   252  0077E9  0D                 	db	13
   253  0077EA  0F                 	db	15
   254                           
   255                           ;initializer for PRC@F6029
   256  0077EB  0A                 	db	10
   257  0077EC  53                 	db	83
   258  0077ED  65                 	db	101
   259  0077EE  74                 	db	116
   260  0077EF  00                 	db	0
   261                           
   262                           ;initializer for _RRranges
   263  0077F0  8C                 	db	140
   264  0077F1  B9                 	db	185
   265  0077F2  C3                 	db	195
   266  0077F3  C3                 	db	195
   267  0077F4  FF                 	db	255
   268                           
   269                           ;initializer for _Rranges
   270  0077F5  8C                 	db	140
   271  0077F6  AA                 	db	170
   272  0077F7  AF                 	db	175
   273  0077F8  D2                 	db	210
   274  0077F9  FF                 	db	255
   275                           
   276                           ;initializer for _Mranges
   277  0077FA  82                 	db	130
   278  0077FB  A5                 	db	165
   279  0077FC  AF                 	db	175
   280  0077FD  BC                 	db	188
   281  0077FE  FF                 	db	255
   282                           
   283                           ;initializer for _Lranges
   284  0077FF  82                 	db	130
   285  007800  B2                 	db	178
   286  007801  B4                 	db	180
   287  007802  BC                 	db	188
   288  007803  FF                 	db	255
   289                           
   290                           	psect	idataBANK1
   291  0070C2                     __pidataBANK1:
   292                           	opt callstack 0
   293                           
   294                           ;initializer for PRC@F6027
   295  0070C2  0A                 	db	10
   296  0070C3  57                 	db	87
   297  0070C4  68                 	db	104
   298  0070C5  61                 	db	97
   299  0070C6  74                 	db	116
   300  0070C7  20                 	db	32
   301  0070C8  63                 	db	99
   302  0070C9  6F                 	db	111
   303  0070CA  6C                 	db	108
   304  0070CB  6F                 	db	111
   305  0070CC  72                 	db	114
   306  0070CD  20                 	db	32
   307  0070CE  73                 	db	115
   308  0070CF  68                 	db	104
   309  0070D0  6F                 	db	111
   310  0070D1  75                 	db	117
   311  0070D2  6C                 	db	108
   312  0070D3  64                 	db	100
   313  0070D4  20                 	db	32
   314  0070D5  73                 	db	115
   315  0070D6  61                 	db	97
   316  0070D7  6E                 	db	110
   317  0070D8  69                 	db	105
   318  0070D9  63                 	db	99
   319  0070DA  20                 	db	32
   320  0070DB  72                 	db	114
   321  0070DC  61                 	db	97
   322  0070DD  63                 	db	99
   323  0070DE  65                 	db	101
   324  0070DF  3F                 	db	63
   325  0070E0  0A                 	db	10
   326  0070E1  00                 	db	0
   327  0000                     _T6CON	set	3914
   328  0000                     _PR6	set	3915
   329  0000                     _TMR6	set	3916
   330  0000                     _ANSELCbits	set	3898
   331  0000                     _ANSELBbits	set	3897
   332  0000                     _ANSELE	set	3900
   333  0000                     _ANSELD	set	3899
   334  0000                     _ANSELC	set	3898
   335  0000                     _ANSELB	set	3897
   336  0000                     _ANSELA	set	3896
   337  0000                     _T4CONbits	set	3921
   338  0000                     _TMR4	set	3923
   339  0000                     _T4CON	set	3921
   340  0000                     _CCPTMRS1	set	3912
   341  0000                     _CCPR5L	set	3925
   342  0000                     _PR4	set	3922
   343  0000                     _CCP5CON	set	3924
   344  0000                     _CCPTMRS0	set	3913
   345  0000                     _FSR0	set	4073
   346  0000                     _TMR1	set	4046
   347  0000                     _T1CONbits	set	4045
   348  0000                     _T1CON	set	4045
   349  0000                     _PIR5bits	set	3966
   350  0000                     _PIR2bits	set	4001
   351  0000                     _EECON2	set	4007
   352  0000                     _INTCONbits	set	4082
   353  0000                     _EECON1bits	set	4006
   354  0000                     _EEDATA	set	4008
   355  0000                     _EEADR	set	4009
   356  0000                     _ADRESH	set	4036
   357  0000                     _TRISBbits	set	3987
   358  0000                     _TXREG	set	4013
   359  0000                     _PORTEbits	set	3972
   360  0000                     _PORTCbits	set	3970
   361  0000                     _RCREG	set	4014
   362  0000                     _ADCON0bits	set	4034
   363  0000                     _ADCON1	set	4033
   364  0000                     _ADCON2bits	set	4032
   365  0000                     _BAUDCON1bits	set	4024
   366  0000                     _SPBRGH1	set	4016
   367  0000                     _SPBRG1	set	4015
   368  0000                     _RCSTA1	set	4011
   369  0000                     _TXSTA1	set	4012
   370  0000                     _OSCCONbits	set	4051
   371  0000                     _TRISE	set	3990
   372  0000                     _LATE	set	3981
   373  0000                     _PORTE	set	3972
   374  0000                     _TRISD	set	3989
   375  0000                     _LATD	set	3980
   376  0000                     _PORTD	set	3971
   377  0000                     _TRISC	set	3988
   378  0000                     _LATC	set	3979
   379  0000                     _PORTC	set	3970
   380  0000                     _TRISB	set	3987
   381  0000                     _LATB	set	3978
   382  0000                     _PORTB	set	3969
   383  0000                     _TRISA	set	3986
   384  0000                     _LATA	set	3977
   385  0000                     _PORTA	set	3968
   386  0000                     _PIE5bits	set	3965
   387  0000                     _TRISEbits	set	3990
   388  0000                     _T2CONbits	set	4026
   389  0000                     _PIE1bits	set	3997
   390  0000                     _TMR2	set	4028
   391  0000                     _T2CON	set	4026
   392  0000                     _TRISCbits	set	3988
   393  0000                     _CCPR1L	set	4030
   394  0000                     _PR2	set	4027
   395  0000                     _CCP1CON	set	4029
   396  0000                     _PORTAbits	set	3968
   397  0000                     _PIR1bits	set	3998
   398                           
   399                           ; #config settings
   400  0000                     
   401                           	psect	cinit
   402  0074EE                     __pcinit:
   403                           	opt callstack 0
   404  0074EE                     start_initialization:
   405                           	opt callstack 0
   406  0074EE                     __initialization:
   407                           	opt callstack 0
   408                           
   409                           ; Initialize objects allocated to BANK1 (32 bytes)
   410                           ; load TBLPTR registers with __pidataBANK1
   411  0074EE  0EC2               	movlw	low __pidataBANK1
   412  0074F0  6EF6               	movwf	tblptrl,c
   413  0074F2  0E70               	movlw	high __pidataBANK1
   414  0074F4  6EF7               	movwf	tblptrh,c
   415  0074F6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   416  0074F8  6EF8               	movwf	tblptru,c
   417  0074FA  EE01  F000         	lfsr	0,__pdataBANK1
   418  0074FE  EE10 F020          	lfsr	1,32
   419  007502                     copy_data0:
   420  007502  0009               	tblrd		*+
   421  007504  CFF5 FFEE          	movff	tablat,postinc0
   422  007508  50E5               	movf	postdec1,w,c
   423  00750A  50E1               	movf	fsr1l,w,c
   424  00750C  E1FA               	bnz	copy_data0
   425                           
   426                           ; Initialize objects allocated to BANK0 (137 bytes)
   427                           ; load TBLPTR registers with __pidataBANK0
   428  00750E  0E7B               	movlw	low __pidataBANK0
   429  007510  6EF6               	movwf	tblptrl,c
   430  007512  0E77               	movlw	high __pidataBANK0
   431  007514  6EF7               	movwf	tblptrh,c
   432  007516  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   433  007518  6EF8               	movwf	tblptru,c
   434  00751A  EE00  F060         	lfsr	0,__pdataBANK0
   435  00751E  EE10 F089          	lfsr	1,137
   436  007522                     copy_data1:
   437  007522  0009               	tblrd		*+
   438  007524  CFF5 FFEE          	movff	tablat,postinc0
   439  007528  50E5               	movf	postdec1,w,c
   440  00752A  50E1               	movf	fsr1l,w,c
   441  00752C  E1FA               	bnz	copy_data1
   442                           
   443                           ; Initialize objects allocated to COMRAM (12 bytes)
   444                           ; load TBLPTR registers with __pidataCOMRAM
   445  00752E  0E8A               	movlw	low __pidataCOMRAM
   446  007530  6EF6               	movwf	tblptrl,c
   447  007532  0E6F               	movlw	high __pidataCOMRAM
   448  007534  6EF7               	movwf	tblptrh,c
   449  007536  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   450  007538  6EF8               	movwf	tblptru,c
   451  00753A  EE00  F050         	lfsr	0,__pdataCOMRAM
   452  00753E  EE10 F00C          	lfsr	1,12
   453  007542                     copy_data2:
   454  007542  0009               	tblrd		*+
   455  007544  CFF5 FFEE          	movff	tablat,postinc0
   456  007548  50E5               	movf	postdec1,w,c
   457  00754A  50E1               	movf	fsr1l,w,c
   458  00754C  E1FA               	bnz	copy_data2
   459                           
   460                           ; Clear objects allocated to BANK0 (5 bytes)
   461  00754E  0100               	movlb	0
   462  007550  6BED               	clrf	(__pbssBANK0+4)& (0+255),b
   463  007552  6BEC               	clrf	(__pbssBANK0+3)& (0+255),b
   464  007554  6BEB               	clrf	(__pbssBANK0+2)& (0+255),b
   465  007556  6BEA               	clrf	(__pbssBANK0+1)& (0+255),b
   466  007558  6BE9               	clrf	__pbssBANK0& (0+255),b
   467                           
   468                           ; Clear objects allocated to COMRAM (1 bytes)
   469  00755A  6A5C               	clrf	__pbssCOMRAM& (0+255),c
   470  00755C                     end_of_initialization:
   471                           	opt callstack 0
   472  00755C                     __end_of__initialization:
   473                           	opt callstack 0
   474  00755C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   475  00755E  6EF8               	movwf	tblptru,c
   476  007560  0100               	movlb	0
   477  007562  EFBA  F037         	goto	_main	;jump to C main() function
   478                           
   479                           	psect	bssCOMRAM
   480  00005C                     __pbssCOMRAM:
   481                           	opt callstack 0
   482  00005C                     determineDirection@rc:
   483                           	opt callstack 0
   484  00005C                     	ds	1
   485                           
   486                           	psect	dataCOMRAM
   487  000050                     __pdataCOMRAM:
   488                           	opt callstack 0
   489  000050                     _sensorVals:
   490                           	opt callstack 0
   491  000050                     	ds	5
   492  000055                     _col:
   493                           	opt callstack 0
   494  000055                     	ds	1
   495  000056                     _size:
   496                           	opt callstack 0
   497  000056                     	ds	1
   498  000057                     _LLranges:
   499                           	opt callstack 0
   500  000057                     	ds	5
   501                           
   502                           	psect	bssBANK0
   503  0000E9                     __pbssBANK0:
   504                           	opt callstack 0
   505  0000E9                     _colorsDetected:
   506                           	opt callstack 0
   507  0000E9                     	ds	5
   508                           
   509                           	psect	dataBANK0
   510  000060                     __pdataBANK0:
   511                           	opt callstack 0
   512  000060                     capTouch@F6045:
   513                           	opt callstack 0
   514  000060                     	ds	26
   515  00007A                     RCE@F6117:
   516                           	opt callstack 0
   517  00007A                     	ds	14
   518  000088                     readFromEEP@F6098:
   519                           	opt callstack 0
   520  000088                     	ds	10
   521  000092                     writeToEEP@F6091:
   522                           	opt callstack 0
   523  000092                     	ds	10
   524  00009C                     ranges@F6082:
   525                           	opt callstack 0
   526  00009C                     	ds	10
   527  0000A6                     classifyColors@F6061:
   528                           	opt callstack 0
   529  0000A6                     	ds	10
   530  0000B0                     calibrate@F6016:
   531                           	opt callstack 0
   532  0000B0                     	ds	10
   533  0000BA                     _raceColor:
   534                           	opt callstack 0
   535  0000BA                     	ds	9
   536  0000C3                     error@F6087:
   537                           	opt callstack 0
   538  0000C3                     	ds	7
   539  0000CA                     _sensorChannels:
   540                           	opt callstack 0
   541  0000CA                     	ds	6
   542  0000D0                     PRC@F6029:
   543                           	opt callstack 0
   544  0000D0                     	ds	5
   545  0000D5                     _RRranges:
   546                           	opt callstack 0
   547  0000D5                     	ds	5
   548  0000DA                     _Rranges:
   549                           	opt callstack 0
   550  0000DA                     	ds	5
   551  0000DF                     _Mranges:
   552                           	opt callstack 0
   553  0000DF                     	ds	5
   554  0000E4                     _Lranges:
   555                           	opt callstack 0
   556  0000E4                     	ds	5
   557                           
   558                           	psect	dataBANK1
   559  000100                     __pdataBANK1:
   560                           	opt callstack 0
   561  000100                     PRC@F6027:
   562                           	opt callstack 0
   563  000100                     	ds	32
   564                           
   565                           	psect	cstackCOMRAM
   566  000001                     __pcstackCOMRAM:
   567                           	opt callstack 0
   568  000001                     ??_classifyColors:
   569  000001                     ??_displayColorDetected:
   570  000001                     ??_writeToEEP:
   571  000001                     ??_setADCChannel:
   572  000001                     ??_readFromEEP:
   573  000001                     ?_abs:
   574                           	opt callstack 0
   575  000001                     ?___awdiv:
   576                           	opt callstack 0
   577  000001                     trans@s:
   578                           	opt callstack 0
   579  000001                     msDelay@delayInMs:
   580                           	opt callstack 0
   581  000001                     ___awdiv@dividend:
   582                           	opt callstack 0
   583  000001                     abs@a:
   584                           	opt callstack 0
   585                           
   586                           ; 2 bytes @ 0x0
   587  000001                     	ds	1
   588  000002                     sixSecDelay@a:
   589                           	opt callstack 0
   590  000002                     error@message:
   591                           	opt callstack 0
   592                           
   593                           ; 7 bytes @ 0x1
   594  000002                     	ds	1
   595  000003                     ??_abs:
   596  000003                     displayColorDetected@sensor:
   597                           	opt callstack 0
   598  000003                     setADCChannel@channel:
   599                           	opt callstack 0
   600  000003                     ___awdiv@divisor:
   601                           	opt callstack 0
   602  000003                     writeToEEP@rs:
   603                           	opt callstack 0
   604  000003                     readFromEEP@rs:
   605                           	opt callstack 0
   606                           
   607                           ; 10 bytes @ 0x2
   608  000003                     	ds	1
   609  000004                     ??_aveSensor:
   610                           
   611                           ; 1 bytes @ 0x3
   612  000004                     	ds	1
   613  000005                     ___awdiv@counter:
   614                           	opt callstack 0
   615  000005                     classifyColors@sensorRanges:
   616                           	opt callstack 0
   617                           
   618                           ; 10 bytes @ 0x4
   619  000005                     	ds	1
   620  000006                     aveSensor@s:
   621                           	opt callstack 0
   622  000006                     ___awdiv@sign:
   623                           	opt callstack 0
   624                           
   625                           ; 1 bytes @ 0x5
   626  000006                     	ds	1
   627  000007                     aveSensor@measurements:
   628                           	opt callstack 0
   629  000007                     ___awdiv@quotient:
   630                           	opt callstack 0
   631                           
   632                           ; 2 bytes @ 0x6
   633  000007                     	ds	2
   634  000009                     aveSensor@result:
   635                           	opt callstack 0
   636  000009                     error@a:
   637                           	opt callstack 0
   638                           
   639                           ; 1 bytes @ 0x8
   640  000009                     	ds	1
   641  00000A                     ??_PRC:
   642  00000A                     aveSensor@a:
   643                           	opt callstack 0
   644                           
   645                           ; 1 bytes @ 0x9
   646  00000A                     	ds	1
   647  00000B                     ??_readAllSensors:
   648  00000B                     capTouch@message:
   649                           	opt callstack 0
   650                           
   651                           ; 26 bytes @ 0xA
   652  00000B                     	ds	1
   653  00000C                     PRC@message:
   654                           	opt callstack 0
   655                           
   656                           ; 32 bytes @ 0xB
   657  00000C                     	ds	1
   658  00000D                     writeToEEP@address:
   659                           	opt callstack 0
   660  00000D                     readFromEEP@address:
   661                           	opt callstack 0
   662  00000D                     readAllSensors@tempSensorVals:
   663                           	opt callstack 0
   664                           
   665                           ; 5 bytes @ 0xC
   666  00000D                     	ds	1
   667  00000E                     writeToEEP@a:
   668                           	opt callstack 0
   669  00000E                     readFromEEP@a:
   670                           	opt callstack 0
   671                           
   672                           ; 1 bytes @ 0xD
   673  00000E                     	ds	1
   674  00000F                     classifyColors@a:
   675                           	opt callstack 0
   676  00000F                     writeToEEP@b:
   677                           	opt callstack 0
   678  00000F                     readFromEEP@b:
   679                           	opt callstack 0
   680                           
   681                           ; 1 bytes @ 0xE
   682  00000F                     	ds	1
   683  000010                     ??_ranges:
   684  000010                     
   685                           ; 1 bytes @ 0xF
   686  000010                     	ds	2
   687  000012                     readAllSensors@a:
   688                           	opt callstack 0
   689  000012                     ranges@rangeArray:
   690                           	opt callstack 0
   691                           
   692                           ; 10 bytes @ 0x11
   693  000012                     	ds	1
   694  000013                     
   695                           ; 1 bytes @ 0x12
   696  000013                     	ds	1
   697  000014                     pyCal@a:
   698                           	opt callstack 0
   699                           
   700                           ; 1 bytes @ 0x13
   701  000014                     	ds	8
   702  00001C                     ranges@b:
   703                           	opt callstack 0
   704                           
   705                           ; 1 bytes @ 0x1B
   706  00001C                     	ds	1
   707  00001D                     ranges@a:
   708                           	opt callstack 0
   709                           
   710                           ; 1 bytes @ 0x1C
   711  00001D                     	ds	1
   712  00001E                     ??_calibrate:
   713                           
   714                           ; 1 bytes @ 0x1D
   715  00001E                     	ds	2
   716  000020                     calibrate@rangeArray:
   717                           	opt callstack 0
   718                           
   719                           ; 10 bytes @ 0x1F
   720  000020                     	ds	7
   721  000027                     capTouch@touch1:
   722                           	opt callstack 0
   723                           
   724                           ; 1 bytes @ 0x26
   725  000027                     	ds	1
   726  000028                     capTouch@touch2:
   727                           	opt callstack 0
   728                           
   729                           ; 1 bytes @ 0x27
   730  000028                     	ds	1
   731  000029                     capTouch@a:
   732                           	opt callstack 0
   733                           
   734                           ; 1 bytes @ 0x28
   735  000029                     	ds	1
   736  00002A                     calibrate@samples:
   737                           	opt callstack 0
   738                           
   739                           ; 1 bytes @ 0x29
   740  00002A                     	ds	1
   741  00002B                     calibrate@samples_1255:
   742                           	opt callstack 0
   743                           
   744                           ; 1 bytes @ 0x2A
   745  00002B                     	ds	1
   746  00002C                     calibrate@samples_1256:
   747                           	opt callstack 0
   748  00002C                     PRC@message2:
   749                           	opt callstack 0
   750                           
   751                           ; 5 bytes @ 0x2B
   752  00002C                     	ds	1
   753  00002D                     calibrate@samples_1257:
   754                           	opt callstack 0
   755                           
   756                           ; 1 bytes @ 0x2C
   757  00002D                     	ds	1
   758  00002E                     calibrate@samples_1258:
   759                           	opt callstack 0
   760                           
   761                           ; 1 bytes @ 0x2D
   762  00002E                     	ds	1
   763  00002F                     calibrate@a:
   764                           	opt callstack 0
   765                           
   766                           ; 1 bytes @ 0x2E
   767  00002F                     	ds	1
   768  000030                     calibrate@b:
   769                           	opt callstack 0
   770                           
   771                           ; 1 bytes @ 0x2F
   772  000030                     	ds	1
   773  000031                     calibrate@temp:
   774                           	opt callstack 0
   775  000031                     PRC@a:
   776                           	opt callstack 0
   777                           
   778                           ; 1 bytes @ 0x30
   779  000031                     	ds	1
   780  000032                     PRC@a_1265:
   781                           	opt callstack 0
   782                           
   783                           ; 1 bytes @ 0x31
   784  000032                     	ds	1
   785  000033                     PRC@a_1266:
   786                           	opt callstack 0
   787                           
   788                           ; 1 bytes @ 0x32
   789  000033                     	ds	1
   790  000034                     PRC@a_1267:
   791                           	opt callstack 0
   792                           
   793                           ; 1 bytes @ 0x33
   794  000034                     	ds	1
   795  000035                     PRC@a_1268:
   796                           	opt callstack 0
   797                           
   798                           ; 1 bytes @ 0x34
   799  000035                     	ds	1
   800  000036                     PRC@a_1269:
   801                           	opt callstack 0
   802                           
   803                           ; 1 bytes @ 0x35
   804  000036                     	ds	1
   805  000037                     PRC@a_1270:
   806                           	opt callstack 0
   807                           
   808                           ; 1 bytes @ 0x36
   809  000037                     	ds	1
   810  000038                     PRC@a_1271:
   811                           	opt callstack 0
   812                           
   813                           ; 1 bytes @ 0x37
   814  000038                     	ds	1
   815  000039                     PRC@a_1272:
   816                           	opt callstack 0
   817                           
   818                           ; 1 bytes @ 0x38
   819  000039                     	ds	1
   820  00003A                     ??_RCE:
   821                           
   822                           ; 1 bytes @ 0x39
   823  00003A                     	ds	2
   824  00003C                     RCE@message:
   825                           	opt callstack 0
   826                           
   827                           ; 14 bytes @ 0x3B
   828  00003C                     	ds	14
   829  00004A                     RCE@commandReceived:
   830                           	opt callstack 0
   831                           
   832                           ; 3 bytes @ 0x49
   833  00004A                     	ds	3
   834  00004D                     RCE@nCharsReceived:
   835                           	opt callstack 0
   836                           
   837                           ; 1 bytes @ 0x4C
   838  00004D                     	ds	1
   839  00004E                     RCE@a:
   840                           	opt callstack 0
   841                           
   842                           ; 1 bytes @ 0x4D
   843  00004E                     	ds	1
   844  00004F                     RCE@a_1463:
   845                           	opt callstack 0
   846                           
   847                           ; 1 bytes @ 0x4E
   848  00004F                     	ds	1
   849  000050                     
   850                           ; 1 bytes @ 0x4F
   851 ;;
   852 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   853 ;;
   854 ;; *************** function _main *****************
   855 ;; Defined at:
   856 ;;		line 96 in file "sanic.c"
   857 ;; Parameters:    Size  Location     Type
   858 ;;		None
   859 ;; Auto vars:     Size  Location     Type
   860 ;;		None
   861 ;; Return value:  Size  Location     Type
   862 ;;                  1    wreg      void 
   863 ;; Registers used:
   864 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   865 ;; Tracked objects:
   866 ;;		On entry : 0/0
   867 ;;		On exit  : 0/0
   868 ;;		Unchanged: 0/0
   869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   870 ;;      Params:         0       0       0       0       0       0       0
   871 ;;      Locals:         0       0       0       0       0       0       0
   872 ;;      Temps:          0       0       0       0       0       0       0
   873 ;;      Totals:         0       0       0       0       0       0       0
   874 ;;Total ram usage:        0 bytes
   875 ;; Hardware stack levels required when called:    5
   876 ;; This function calls:
   877 ;;		_RCE
   878 ;;		_init
   879 ;; This function is called by:
   880 ;;		Startup code after reset
   881 ;; This function uses a non-reentrant model
   882 ;;
   883                           
   884                           	psect	text0
   885  006F74                     __ptext0:
   886                           	opt callstack 0
   887  006F74                     _main:
   888                           	opt callstack 26
   889                           
   890                           ;sanic.c: 113:     init();
   891                           
   892                           ;incstack = 0
   893  006F74  EC43  F038         	call	_init	;wreg free
   894                           
   895                           ;sanic.c: 114:     RCE();
   896  006F78  EC5D  F03D         	call	_RCE	;wreg free
   897  006F7C                     l556:
   898  006F7C  D7FF               	goto	l556
   899  006F7E                     __end_of_main:
   900                           	opt callstack 0
   901                           
   902 ;; *************** function _init *****************
   903 ;; Defined at:
   904 ;;		line 125 in file "sanic.c"
   905 ;; Parameters:    Size  Location     Type
   906 ;;		None
   907 ;; Auto vars:     Size  Location     Type
   908 ;;		None
   909 ;; Return value:  Size  Location     Type
   910 ;;                  1    wreg      void 
   911 ;; Registers used:
   912 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   913 ;; Tracked objects:
   914 ;;		On entry : 0/0
   915 ;;		On exit  : 0/0
   916 ;;		Unchanged: 0/0
   917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   918 ;;      Params:         0       0       0       0       0       0       0
   919 ;;      Locals:         0       0       0       0       0       0       0
   920 ;;      Temps:          0       0       0       0       0       0       0
   921 ;;      Totals:         0       0       0       0       0       0       0
   922 ;;Total ram usage:        0 bytes
   923 ;; Hardware stack levels used:    1
   924 ;; Hardware stack levels required when called:    2
   925 ;; This function calls:
   926 ;;		_clearPorts
   927 ;;		_readFromEEP
   928 ;;		_setupADC
   929 ;;		_setupOSC
   930 ;;		_setupSerial
   931 ;; This function is called by:
   932 ;;		_main
   933 ;; This function uses a non-reentrant model
   934 ;;
   935                           
   936                           	psect	text1
   937  007086                     __ptext1:
   938                           	opt callstack 0
   939  007086                     _init:
   940                           	opt callstack 28
   941                           
   942                           ;sanic.c: 126:     raceColor[3] = 1;
   943                           
   944                           ;incstack = 0
   945  007086  0E01               	movlw	1
   946  007088  0100               	movlb	0	; () banked
   947  00708A  6FBD               	movwf	(_raceColor+3)& (0+255),b
   948                           
   949                           ; BSR set to: 0
   950                           ;sanic.c: 127:     setupOSC();
   951  00708C  ECB5  F037         	call	_setupOSC	;wreg free
   952                           
   953                           ;sanic.c: 128:     clearPorts();
   954  007090  ECAE  F039         	call	_clearPorts	;wreg free
   955                           
   956                           ;sanic.c: 129:     setupSerial();
   957  007094  ECA4  F038         	call	_setupSerial	;wreg free
   958                           
   959                           ;sanic.c: 130:     setupADC();
   960  007098  EC71  F038         	call	_setupADC	;wreg free
   961                           
   962                           ;sanic.c: 131:     readFromEEP();
   963  00709C  ECDB  F039         	call	_readFromEEP	;wreg free
   964  0070A0  0012               	return		;funcret
   965  0070A2                     __end_of_init:
   966                           	opt callstack 0
   967                           
   968 ;; *************** function _setupSerial *****************
   969 ;; Defined at:
   970 ;;		line 96 in file "./functions.c"
   971 ;; Parameters:    Size  Location     Type
   972 ;;		None
   973 ;; Auto vars:     Size  Location     Type
   974 ;;		None
   975 ;; Return value:  Size  Location     Type
   976 ;;                  1    wreg      void 
   977 ;; Registers used:
   978 ;;		wreg, status,2
   979 ;; Tracked objects:
   980 ;;		On entry : 0/0
   981 ;;		On exit  : 0/0
   982 ;;		Unchanged: 0/0
   983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   984 ;;      Params:         0       0       0       0       0       0       0
   985 ;;      Locals:         0       0       0       0       0       0       0
   986 ;;      Temps:          0       0       0       0       0       0       0
   987 ;;      Totals:         0       0       0       0       0       0       0
   988 ;;Total ram usage:        0 bytes
   989 ;; Hardware stack levels used:    1
   990 ;; This function calls:
   991 ;;		Nothing
   992 ;; This function is called by:
   993 ;;		_init
   994 ;; This function uses a non-reentrant model
   995 ;;
   996                           
   997                           	psect	text2
   998  007148                     __ptext2:
   999                           	opt callstack 0
  1000  007148                     _setupSerial:
  1001                           	opt callstack 29
  1002                           
  1003                           ;./functions.c: 98:     PIE1bits.RC1IE = 0;
  1004                           
  1005                           ;incstack = 0
  1006  007148  9A9D               	bcf	3997,5,c	;volatile
  1007                           
  1008                           ;./functions.c: 99:     PIE1bits.TX1IE = 0;
  1009  00714A  989D               	bcf	3997,4,c	;volatile
  1010                           
  1011                           ;./functions.c: 100:     PIR1bits.RCIF = 0;
  1012  00714C  9A9E               	bcf	3998,5,c	;volatile
  1013                           
  1014                           ;./functions.c: 102:     FSR0 = 0;
  1015  00714E  0E00               	movlw	0
  1016  007150  6EEA               	movwf	fsr0h,c	;volatile
  1017  007152  0E00               	movlw	0
  1018  007154  6EE9               	movwf	fsr0l,c	;volatile
  1019                           
  1020                           ;./functions.c: 103:     TXSTA1 = 0b00100100;
  1021  007156  0E24               	movlw	36
  1022  007158  6EAC               	movwf	4012,c	;volatile
  1023                           
  1024                           ;./functions.c: 104:     RCSTA1 = 0b10010000;
  1025  00715A  0E90               	movlw	144
  1026  00715C  6EAB               	movwf	4011,c	;volatile
  1027                           
  1028                           ;./functions.c: 106:     SPBRG1 = 25;
  1029  00715E  0E19               	movlw	25
  1030  007160  6EAF               	movwf	4015,c	;volatile
  1031                           
  1032                           ;./functions.c: 107:     SPBRGH1 = 0;
  1033  007162  0E00               	movlw	0
  1034  007164  6EB0               	movwf	4016,c	;volatile
  1035                           
  1036                           ;./functions.c: 108:     BAUDCON1bits.BRG16 = 0;
  1037  007166  96B8               	bcf	4024,3,c	;volatile
  1038                           
  1039                           ;./functions.c: 109:     TRISCbits.RC6 = 1;
  1040  007168  8C94               	bsf	3988,6,c	;volatile
  1041                           
  1042                           ;./functions.c: 110:     TRISCbits.RC7 = 1;
  1043  00716A  8E94               	bsf	3988,7,c	;volatile
  1044                           
  1045                           ;./functions.c: 112:     PORTC = 0;
  1046  00716C  0E00               	movlw	0
  1047  00716E  6E82               	movwf	3970,c	;volatile
  1048                           
  1049                           ;./functions.c: 113:     ANSELC = 0;
  1050  007170  0E00               	movlw	0
  1051  007172  010F               	movlb	15	; () banked
  1052  007174  6F3A               	movwf	58,b	;volatile
  1053                           
  1054                           ; BSR set to: 15
  1055  007176  0012               	return		;funcret
  1056  007178                     __end_of_setupSerial:
  1057                           	opt callstack 0
  1058                           
  1059 ;; *************** function _setupOSC *****************
  1060 ;; Defined at:
  1061 ;;		line 90 in file "./functions.c"
  1062 ;; Parameters:    Size  Location     Type
  1063 ;;		None
  1064 ;; Auto vars:     Size  Location     Type
  1065 ;;		None
  1066 ;; Return value:  Size  Location     Type
  1067 ;;                  1    wreg      void 
  1068 ;; Registers used:
  1069 ;;		wreg, status,2
  1070 ;; Tracked objects:
  1071 ;;		On entry : 0/0
  1072 ;;		On exit  : 0/0
  1073 ;;		Unchanged: 0/0
  1074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1075 ;;      Params:         0       0       0       0       0       0       0
  1076 ;;      Locals:         0       0       0       0       0       0       0
  1077 ;;      Temps:          0       0       0       0       0       0       0
  1078 ;;      Totals:         0       0       0       0       0       0       0
  1079 ;;Total ram usage:        0 bytes
  1080 ;; Hardware stack levels used:    1
  1081 ;; This function calls:
  1082 ;;		Nothing
  1083 ;; This function is called by:
  1084 ;;		_init
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088                           	psect	text3
  1089  006F6A                     __ptext3:
  1090                           	opt callstack 0
  1091  006F6A                     _setupOSC:
  1092                           	opt callstack 29
  1093                           
  1094                           ;./functions.c: 92:     OSCCONbits.IRCF = 0b101;
  1095                           
  1096                           ; BSR set to: 15
  1097                           ;incstack = 0
  1098  006F6A  50D3               	movf	4051,w,c	;volatile
  1099  006F6C  0B8F               	andlw	-113
  1100  006F6E  0950               	iorlw	80
  1101  006F70  6ED3               	movwf	4051,c	;volatile
  1102  006F72  0012               	return		;funcret
  1103  006F74                     __end_of_setupOSC:
  1104                           	opt callstack 0
  1105                           
  1106 ;; *************** function _readFromEEP *****************
  1107 ;; Defined at:
  1108 ;;		line 909 in file "./functions.c"
  1109 ;; Parameters:    Size  Location     Type
  1110 ;;		None
  1111 ;; Auto vars:     Size  Location     Type
  1112 ;;  b               1   14[COMRAM] unsigned char 
  1113 ;;  a               1   13[COMRAM] unsigned char 
  1114 ;;  rs             10    2[COMRAM] PTR unsigned char [5]
  1115 ;;		 -> RRranges(5), Rranges(5), Mranges(5), Lranges(5), 
  1116 ;;		 -> LLranges(5), 
  1117 ;;  address         1   12[COMRAM] unsigned char 
  1118 ;; Return value:  Size  Location     Type
  1119 ;;                  1    wreg      void 
  1120 ;; Registers used:
  1121 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1122 ;; Tracked objects:
  1123 ;;		On entry : 0/0
  1124 ;;		On exit  : 0/0
  1125 ;;		Unchanged: 0/0
  1126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1127 ;;      Params:         0       0       0       0       0       0       0
  1128 ;;      Locals:        13       0       0       0       0       0       0
  1129 ;;      Temps:          2       0       0       0       0       0       0
  1130 ;;      Totals:        15       0       0       0       0       0       0
  1131 ;;Total ram usage:       15 bytes
  1132 ;; Hardware stack levels used:    1
  1133 ;; Hardware stack levels required when called:    1
  1134 ;; This function calls:
  1135 ;;		_EE_READ
  1136 ;; This function is called by:
  1137 ;;		_init
  1138 ;; This function uses a non-reentrant model
  1139 ;;
  1140                           
  1141                           	psect	text4
  1142  0073B6                     __ptext4:
  1143                           	opt callstack 0
  1144  0073B6                     _readFromEEP:
  1145                           	opt callstack 28
  1146                           
  1147                           ;./functions.c: 910:     unsigned char* rs[] = {LLranges, Lranges, Mranges, Rranges, RRr
      +                          anges};
  1148                           
  1149                           ;incstack = 0
  1150  0073B6  EE20  F088         	lfsr	2,readFromEEP@F6098
  1151  0073BA  EE10  F003         	lfsr	1,readFromEEP@rs
  1152  0073BE  0E09               	movlw	9
  1153  0073C0                     u2381:
  1154  0073C0  CFDB FFE3          	movff	plusw2,plusw1
  1155  0073C4  06E8               	decf	wreg,f,c
  1156  0073C6  E2FC               	bc	u2381
  1157                           
  1158                           ;./functions.c: 911:     unsigned char address = 0;
  1159  0073C8  0E00               	movlw	0
  1160  0073CA  6E0D               	movwf	readFromEEP@address,c
  1161                           
  1162                           ;./functions.c: 912:     EECON1bits.RD = 1;
  1163  0073CC  80A6               	bsf	4006,0,c	;volsfr
  1164                           
  1165                           ;./functions.c: 914:     for (unsigned char a = 0; a < 5; a++){
  1166  0073CE  0E00               	movlw	0
  1167  0073D0  6E0E               	movwf	readFromEEP@a,c
  1168  0073D2                     l3463:
  1169                           
  1170                           ;./functions.c: 915:         for (unsigned char b = 0; b< 5; b++){
  1171  0073D2  0E00               	movlw	0
  1172  0073D4  6E0F               	movwf	readFromEEP@b,c
  1173  0073D6                     l526:
  1174                           
  1175                           ;./functions.c: 916:             EEADR = address++;
  1176  0073D6  C00D  FFA9         	movff	readFromEEP@address,4009	;volatile
  1177  0073DA  2A0D               	incf	readFromEEP@address,f,c
  1178                           
  1179                           ;./functions.c: 917:             rs[a][b] = EE_READ();
  1180  0073DC  500E               	movf	readFromEEP@a,w,c
  1181  0073DE  0D02               	mullw	2
  1182  0073E0  0E03               	movlw	low readFromEEP@rs
  1183  0073E2  24F3               	addwf	prodl,w,c
  1184  0073E4  6ED9               	movwf	fsr2l,c
  1185  0073E6  0E00               	movlw	high readFromEEP@rs
  1186  0073E8  20F4               	addwfc	prodh,w,c
  1187  0073EA  6EDA               	movwf	fsr2h,c
  1188  0073EC  CFDE F001          	movff	postinc2,??_readFromEEP
  1189  0073F0  CFDD F002          	movff	postdec2,??_readFromEEP+1
  1190  0073F4  500F               	movf	readFromEEP@b,w,c
  1191  0073F6  2401               	addwf	??_readFromEEP,w,c
  1192  0073F8  6ED9               	movwf	fsr2l,c
  1193  0073FA  0E00               	movlw	0
  1194  0073FC  2002               	addwfc	??_readFromEEP+1,w,c
  1195  0073FE  6EDA               	movwf	fsr2h,c
  1196  007400  ECB0  F037         	call	_EE_READ	;wreg free
  1197  007404  6EDF               	movwf	indf2,c
  1198                           
  1199                           ;./functions.c: 918:         }
  1200  007406  2A0F               	incf	readFromEEP@b,f,c
  1201  007408  0E04               	movlw	4
  1202  00740A  640F               	cpfsgt	readFromEEP@b,c
  1203  00740C  D7E4               	goto	l526
  1204                           
  1205                           ;./functions.c: 919:     }
  1206  00740E  2A0E               	incf	readFromEEP@a,f,c
  1207  007410  0E04               	movlw	4
  1208  007412  640E               	cpfsgt	readFromEEP@a,c
  1209  007414  D7DE               	goto	l3463
  1210  007416  0012               	return	
  1211  007418                     __end_of_readFromEEP:
  1212                           	opt callstack 0
  1213                           
  1214 ;; *************** function _EE_READ *****************
  1215 ;; Defined at:
  1216 ;;		line 923 in file "./functions.c"
  1217 ;; Parameters:    Size  Location     Type
  1218 ;;		None
  1219 ;; Auto vars:     Size  Location     Type
  1220 ;;		None
  1221 ;; Return value:  Size  Location     Type
  1222 ;;                  1    wreg      unsigned char 
  1223 ;; Registers used:
  1224 ;;		wreg, status,2
  1225 ;; Tracked objects:
  1226 ;;		On entry : 0/0
  1227 ;;		On exit  : 0/0
  1228 ;;		Unchanged: 0/0
  1229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1230 ;;      Params:         0       0       0       0       0       0       0
  1231 ;;      Locals:         0       0       0       0       0       0       0
  1232 ;;      Temps:          0       0       0       0       0       0       0
  1233 ;;      Totals:         0       0       0       0       0       0       0
  1234 ;;Total ram usage:        0 bytes
  1235 ;; Hardware stack levels used:    1
  1236 ;; This function calls:
  1237 ;;		Nothing
  1238 ;; This function is called by:
  1239 ;;		_readFromEEP
  1240 ;; This function uses a non-reentrant model
  1241 ;;
  1242                           
  1243                           	psect	text5
  1244  006F60                     __ptext5:
  1245                           	opt callstack 0
  1246  006F60                     _EE_READ:
  1247                           	opt callstack 28
  1248                           
  1249                           ;./functions.c: 924:     EECON1bits.EEPGD = 0;
  1250                           
  1251                           ;incstack = 0
  1252  006F60  9EA6               	bcf	4006,7,c	;volsfr
  1253                           
  1254                           ;./functions.c: 925:     EECON1bits.CFGS = 0;
  1255  006F62  9CA6               	bcf	4006,6,c	;volsfr
  1256                           
  1257                           ;./functions.c: 926:     EECON1bits.RD = 1;
  1258  006F64  80A6               	bsf	4006,0,c	;volsfr
  1259                           
  1260                           ;./functions.c: 927:     return(EEDATA);
  1261  006F66  50A8               	movf	4008,w,c	;volatile
  1262  006F68  0012               	return		;funcret
  1263  006F6A                     __end_of_EE_READ:
  1264                           	opt callstack 0
  1265                           
  1266 ;; *************** function _clearPorts *****************
  1267 ;; Defined at:
  1268 ;;		line 59 in file "./functions.c"
  1269 ;; Parameters:    Size  Location     Type
  1270 ;;		None
  1271 ;; Auto vars:     Size  Location     Type
  1272 ;;		None
  1273 ;; Return value:  Size  Location     Type
  1274 ;;                  1    wreg      void 
  1275 ;; Registers used:
  1276 ;;		wreg, status,2
  1277 ;; Tracked objects:
  1278 ;;		On entry : 0/0
  1279 ;;		On exit  : 0/0
  1280 ;;		Unchanged: 0/0
  1281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1282 ;;      Params:         0       0       0       0       0       0       0
  1283 ;;      Locals:         0       0       0       0       0       0       0
  1284 ;;      Temps:          0       0       0       0       0       0       0
  1285 ;;      Totals:         0       0       0       0       0       0       0
  1286 ;;Total ram usage:        0 bytes
  1287 ;; Hardware stack levels used:    1
  1288 ;; This function calls:
  1289 ;;		Nothing
  1290 ;; This function is called by:
  1291 ;;		_init
  1292 ;; This function uses a non-reentrant model
  1293 ;;
  1294                           
  1295                           	psect	text6
  1296  00735C                     __ptext6:
  1297                           	opt callstack 0
  1298  00735C                     _clearPorts:
  1299                           	opt callstack 29
  1300                           
  1301                           ;./functions.c: 61:     PORTA = 0;
  1302                           
  1303                           ;incstack = 0
  1304  00735C  0E00               	movlw	0
  1305  00735E  6E80               	movwf	3968,c	;volatile
  1306                           
  1307                           ;./functions.c: 62:     LATA = 0;
  1308  007360  0E00               	movlw	0
  1309  007362  6E89               	movwf	3977,c	;volatile
  1310                           
  1311                           ;./functions.c: 63:     TRISA = 0;
  1312  007364  0E00               	movlw	0
  1313  007366  6E92               	movwf	3986,c	;volatile
  1314                           
  1315                           ;./functions.c: 64:     ANSELA = 0;
  1316  007368  0E00               	movlw	0
  1317  00736A  010F               	movlb	15	; () banked
  1318  00736C  6F38               	movwf	56,b	;volatile
  1319                           
  1320                           ;./functions.c: 66:     PORTB = 0;
  1321  00736E  0E00               	movlw	0
  1322  007370  6E81               	movwf	3969,c	;volatile
  1323                           
  1324                           ;./functions.c: 67:     LATB = 0;
  1325  007372  0E00               	movlw	0
  1326  007374  6E8A               	movwf	3978,c	;volatile
  1327                           
  1328                           ;./functions.c: 68:     TRISB = 0;
  1329  007376  0E00               	movlw	0
  1330  007378  6E93               	movwf	3987,c	;volatile
  1331                           
  1332                           ;./functions.c: 69:     ANSELB = 0;
  1333  00737A  0E00               	movlw	0
  1334  00737C  6F39               	movwf	57,b	;volatile
  1335                           
  1336                           ;./functions.c: 71:     PORTC = 0;
  1337  00737E  0E00               	movlw	0
  1338  007380  6E82               	movwf	3970,c	;volatile
  1339                           
  1340                           ;./functions.c: 72:     LATC = 0;
  1341  007382  0E00               	movlw	0
  1342  007384  6E8B               	movwf	3979,c	;volatile
  1343                           
  1344                           ;./functions.c: 73:     TRISC = 0;
  1345  007386  0E00               	movlw	0
  1346  007388  6E94               	movwf	3988,c	;volatile
  1347                           
  1348                           ;./functions.c: 74:     ANSELC = 0;
  1349  00738A  0E00               	movlw	0
  1350  00738C  6F3A               	movwf	58,b	;volatile
  1351                           
  1352                           ;./functions.c: 76:     PORTD = 0;
  1353  00738E  0E00               	movlw	0
  1354  007390  6E83               	movwf	3971,c	;volatile
  1355                           
  1356                           ;./functions.c: 77:     LATD = 0;
  1357  007392  0E00               	movlw	0
  1358  007394  6E8C               	movwf	3980,c	;volatile
  1359                           
  1360                           ;./functions.c: 78:     TRISD = 0;
  1361  007396  0E00               	movlw	0
  1362  007398  6E95               	movwf	3989,c	;volatile
  1363                           
  1364                           ;./functions.c: 79:     ANSELD = 0;
  1365  00739A  0E00               	movlw	0
  1366  00739C  6F3B               	movwf	59,b	;volatile
  1367                           
  1368                           ;./functions.c: 81:     PORTE = 0;
  1369  00739E  0E00               	movlw	0
  1370  0073A0  6E84               	movwf	3972,c	;volatile
  1371                           
  1372                           ;./functions.c: 82:     LATE = 0;
  1373  0073A2  0E00               	movlw	0
  1374  0073A4  6E8D               	movwf	3981,c	;volatile
  1375                           
  1376                           ;./functions.c: 83:     TRISE = 0;
  1377  0073A6  0E00               	movlw	0
  1378  0073A8  6E96               	movwf	3990,c	;volatile
  1379                           
  1380                           ;./functions.c: 84:     ANSELE = 0;
  1381  0073AA  0E00               	movlw	0
  1382  0073AC  6F3C               	movwf	60,b	;volatile
  1383                           
  1384                           ;./functions.c: 85:     raceColor[3] = 1;
  1385  0073AE  0E01               	movlw	1
  1386  0073B0  0100               	movlb	0	; () banked
  1387  0073B2  6FBD               	movwf	(_raceColor+3)& (0+255),b
  1388                           
  1389                           ; BSR set to: 0
  1390  0073B4  0012               	return		;funcret
  1391  0073B6                     __end_of_clearPorts:
  1392                           	opt callstack 0
  1393                           
  1394 ;; *************** function _RCE *****************
  1395 ;; Defined at:
  1396 ;;		line 134 in file "sanic.c"
  1397 ;; Parameters:    Size  Location     Type
  1398 ;;		None
  1399 ;; Auto vars:     Size  Location     Type
  1400 ;;  a               1   78[COMRAM] unsigned char 
  1401 ;;  a               1   77[COMRAM] unsigned char 
  1402 ;;  message        14   59[COMRAM] unsigned char [14]
  1403 ;;  commandRecei    3   73[COMRAM] unsigned char [3]
  1404 ;;  nCharsReceiv    1   76[COMRAM] unsigned char 
  1405 ;; Return value:  Size  Location     Type
  1406 ;;                  1    wreg      void 
  1407 ;; Registers used:
  1408 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1409 ;; Tracked objects:
  1410 ;;		On entry : 0/0
  1411 ;;		On exit  : 0/0
  1412 ;;		Unchanged: 0/0
  1413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1414 ;;      Params:         0       0       0       0       0       0       0
  1415 ;;      Locals:        20       0       0       0       0       0       0
  1416 ;;      Temps:          2       0       0       0       0       0       0
  1417 ;;      Totals:        22       0       0       0       0       0       0
  1418 ;;Total ram usage:       22 bytes
  1419 ;; Hardware stack levels used:    1
  1420 ;; Hardware stack levels required when called:    4
  1421 ;; This function calls:
  1422 ;;		_PRC
  1423 ;;		_calibrate
  1424 ;;		_capTouch
  1425 ;;		_error
  1426 ;;		_navigate
  1427 ;;		_pyCal
  1428 ;;		_trans
  1429 ;; This function is called by:
  1430 ;;		_main
  1431 ;; This function uses a non-reentrant model
  1432 ;;
  1433                           
  1434                           	psect	text7
  1435  007ABA                     __ptext7:
  1436                           	opt callstack 0
  1437  007ABA                     _RCE:
  1438                           	opt callstack 26
  1439                           
  1440                           ;sanic.c: 136:         PORTD = 0b10100100;
  1441                           
  1442                           ; BSR set to: 0
  1443                           ;incstack = 0
  1444                           ;sanic.c: 135:     while(1){
  1445  007ABA  0EA4               	movlw	164
  1446  007ABC  6E83               	movwf	3971,c	;volatile
  1447                           
  1448                           ;sanic.c: 138:         unsigned char message[] = "\nSanic races ";
  1449  007ABE  EE20  F07A         	lfsr	2,RCE@F6117
  1450  007AC2  EE10  F03C         	lfsr	1,RCE@message
  1451  007AC6  0E0D               	movlw	13
  1452  007AC8                     u2411:
  1453  007AC8  CFDB FFE3          	movff	plusw2,plusw1
  1454  007ACC  06E8               	decf	wreg,f,c
  1455  007ACE  E2FC               	bc	u2411
  1456                           
  1457                           ;sanic.c: 140:         for (unsigned char a = 0; a < 13; a++)
  1458  007AD0  0E00               	movlw	0
  1459  007AD2  6E4E               	movwf	RCE@a,c
  1460  007AD4                     l3503:
  1461                           
  1462                           ;sanic.c: 141:         {;sanic.c: 142:             trans(message[a]);
  1463  007AD4  0E3C               	movlw	low RCE@message
  1464  007AD6  244E               	addwf	RCE@a,w,c
  1465  007AD8  6ED9               	movwf	fsr2l,c
  1466  007ADA  6ADA               	clrf	fsr2h,c
  1467  007ADC  0E00               	movlw	high RCE@message
  1468  007ADE  22DA               	addwfc	fsr2h,f,c
  1469  007AE0  50DF               	movf	indf2,w,c
  1470  007AE2  ECBF  F037         	call	_trans
  1471                           
  1472                           ;sanic.c: 143:         }
  1473  007AE6  2A4E               	incf	RCE@a,f,c
  1474  007AE8  0E0C               	movlw	12
  1475  007AEA  644E               	cpfsgt	RCE@a,c
  1476  007AEC  D7F3               	goto	l3503
  1477                           
  1478                           ;sanic.c: 145:         if (raceColor[3] == 1){
  1479  007AEE  0100               	movlb	0	; () banked
  1480  007AF0  05BD               	decf	(_raceColor+3)& (0+255),w,b
  1481  007AF2  A4D8               	btfss	status,2,c
  1482  007AF4  D004               	goto	l3513
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;sanic.c: 146:             trans('B');
  1486  007AF6  0E42               	movlw	66
  1487  007AF8  ECBF  F037         	call	_trans
  1488                           
  1489                           ;sanic.c: 147:         }
  1490  007AFC  D011               	goto	l571
  1491  007AFE                     l3513:
  1492                           
  1493                           ; BSR set to: 0
  1494  007AFE  05BC               	decf	(_raceColor+2)& (0+255),w,b
  1495  007B00  A4D8               	btfss	status,2,c
  1496  007B02  D004               	goto	l3517
  1497                           
  1498                           ; BSR set to: 0
  1499                           ;sanic.c: 149:             trans('R');
  1500  007B04  0E52               	movlw	82
  1501  007B06  ECBF  F037         	call	_trans
  1502                           
  1503                           ;sanic.c: 150:         }
  1504  007B0A  D00A               	goto	l571
  1505  007B0C                     l3517:
  1506                           
  1507                           ; BSR set to: 0
  1508  007B0C  05BB               	decf	(_raceColor+1)& (0+255),w,b
  1509  007B0E  A4D8               	btfss	status,2,c
  1510  007B10  D004               	goto	l3521
  1511                           
  1512                           ; BSR set to: 0
  1513                           ;sanic.c: 152:             trans('G');
  1514  007B12  0E47               	movlw	71
  1515  007B14  ECBF  F037         	call	_trans
  1516                           
  1517                           ;sanic.c: 153:         }
  1518  007B18  D003               	goto	l571
  1519  007B1A                     l3521:
  1520                           
  1521                           ; BSR set to: 0
  1522                           ;sanic.c: 155:             trans('n');
  1523  007B1A  0E6E               	movlw	110
  1524  007B1C  ECBF  F037         	call	_trans
  1525  007B20                     l571:
  1526                           
  1527                           ;sanic.c: 157:         trans('\n');
  1528  007B20  0E0A               	movlw	10
  1529  007B22  ECBF  F037         	call	_trans
  1530                           
  1531                           ;sanic.c: 160:         INTCONbits.GIE = 0;
  1532  007B26  9EF2               	bcf	4082,7,c	;volatile
  1533                           
  1534                           ;sanic.c: 161:         INTCONbits.PEIE = 0;
  1535  007B28  9CF2               	bcf	4082,6,c	;volatile
  1536                           
  1537                           ;sanic.c: 162:         unsigned char nCharsReceived = 0;
  1538  007B2A  0E00               	movlw	0
  1539  007B2C  6E4D               	movwf	RCE@nCharsReceived,c
  1540                           
  1541                           ;sanic.c: 163:         unsigned char commandReceived[3];;sanic.c: 165:         while(nCh
      +                          arsReceived < 3){
  1542  007B2E  D00B               	goto	l3533
  1543  007B30                     l577:
  1544                           
  1545                           ;sanic.c: 166:             if (PIR1bits.RC1IF){
  1546  007B30  AA9E               	btfss	3998,5,c	;volatile
  1547  007B32  D009               	goto	l3533
  1548                           
  1549                           ;sanic.c: 167:                 commandReceived[nCharsReceived] = RCREG;
  1550  007B34  0E4A               	movlw	low RCE@commandReceived
  1551  007B36  244D               	addwf	RCE@nCharsReceived,w,c
  1552  007B38  6ED9               	movwf	fsr2l,c
  1553  007B3A  6ADA               	clrf	fsr2h,c
  1554  007B3C  0E00               	movlw	high RCE@commandReceived
  1555  007B3E  22DA               	addwfc	fsr2h,f,c
  1556  007B40  CFAE FFDF          	movff	4014,indf2	;volatile
  1557                           
  1558                           ;sanic.c: 168:                 nCharsReceived++;
  1559  007B44  2A4D               	incf	RCE@nCharsReceived,f,c
  1560  007B46                     l3533:
  1561                           
  1562                           ;sanic.c: 165:         while(nCharsReceived < 3){
  1563  007B46  0E02               	movlw	2
  1564  007B48  644D               	cpfsgt	RCE@nCharsReceived,c
  1565  007B4A  D7F2               	goto	l577
  1566  007B4C  D012               	goto	l3549
  1567  007B4E                     l3535:
  1568                           
  1569                           ;sanic.c: 176:             capTouch();
  1570  007B4E  EC3E  F03A         	call	_capTouch	;wreg free
  1571                           
  1572                           ;sanic.c: 177:             break;
  1573  007B52  D027               	goto	l3551
  1574  007B54                     l3537:
  1575                           
  1576                           ;sanic.c: 179:             PRC();
  1577  007B54  ECE0  F03D         	call	_PRC	;wreg free
  1578                           
  1579                           ;sanic.c: 180:             break;
  1580  007B58  D024               	goto	l3551
  1581  007B5A                     l3539:
  1582                           
  1583                           ;sanic.c: 182:             navigate();
  1584  007B5A  EC0F  F039         	call	_navigate	;wreg free
  1585                           
  1586                           ;sanic.c: 183:             break;
  1587  007B5E  D021               	goto	l3551
  1588  007B60                     l3541:
  1589                           
  1590                           ;sanic.c: 185:             pyCal();
  1591  007B60  EC5A  F039         	call	_pyCal	;wreg free
  1592                           
  1593                           ;sanic.c: 186:             break;
  1594  007B64  D01E               	goto	l3551
  1595  007B66                     l3543:
  1596                           
  1597                           ;sanic.c: 188:             calibrate();
  1598  007B66  ECA2  F03E         	call	_calibrate	;wreg free
  1599                           
  1600                           ;sanic.c: 189:             break;
  1601  007B6A  D01B               	goto	l3551
  1602  007B6C                     l3545:
  1603                           
  1604                           ;sanic.c: 192:             error();
  1605  007B6C  ECD5  F038         	call	_error	;wreg free
  1606                           
  1607                           ;sanic.c: 193:             break;
  1608  007B70  D018               	goto	l3551
  1609  007B72                     l3549:
  1610  007B72  504A               	movf	RCE@commandReceived,w,c
  1611  007B74  6E3A               	movwf	??_RCE& (0+255),c
  1612  007B76  6A3B               	clrf	(??_RCE+1)& (0+255),c
  1613                           
  1614                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1615                           ; Switch size 1, requested type "simple"
  1616                           ; Number of cases is 1, Range of values is 0 to 0
  1617                           ; switch strategies available:
  1618                           ; Name         Instructions Cycles
  1619                           ; simple_byte            4     3 (average)
  1620                           ;	Chosen strategy is simple_byte
  1621  007B78  503B               	movf	??_RCE+1,w,c
  1622  007B7A  0A00               	xorlw	0	; case 0
  1623  007B7C  A4D8               	btfss	status,2,c
  1624  007B7E  D7F6               	goto	l3545
  1625                           
  1626                           ; Switch size 1, requested type "simple"
  1627                           ; Number of cases is 5, Range of values is 67 to 82
  1628                           ; switch strategies available:
  1629                           ; Name         Instructions Cycles
  1630                           ; simple_byte           16     9 (average)
  1631                           ;	Chosen strategy is simple_byte
  1632  007B80  503A               	movf	??_RCE,w,c
  1633  007B82  0A43               	xorlw	67	; case 67
  1634  007B84  B4D8               	btfsc	status,2,c
  1635  007B86  D7EF               	goto	l3543
  1636  007B88  0A0D               	xorlw	13	; case 78
  1637  007B8A  B4D8               	btfsc	status,2,c
  1638  007B8C  D7E6               	goto	l3539
  1639  007B8E  0A1E               	xorlw	30	; case 80
  1640  007B90  B4D8               	btfsc	status,2,c
  1641  007B92  D7E0               	goto	l3537
  1642  007B94  0A01               	xorlw	1	; case 81
  1643  007B96  B4D8               	btfsc	status,2,c
  1644  007B98  D7E3               	goto	l3541
  1645  007B9A  0A03               	xorlw	3	; case 82
  1646  007B9C  B4D8               	btfsc	status,2,c
  1647  007B9E  D7D7               	goto	l3535
  1648  007BA0  D7E5               	goto	l3545
  1649  007BA2                     l3551:
  1650                           
  1651                           ;sanic.c: 196:         for (unsigned char a = 0; a < 3; a++){
  1652  007BA2  0E00               	movlw	0
  1653  007BA4  6E4F               	movwf	RCE@a_1463,c
  1654  007BA6                     l3557:
  1655                           
  1656                           ;sanic.c: 197:             commandReceived[a] = 0;
  1657  007BA6  0E4A               	movlw	low RCE@commandReceived
  1658  007BA8  244F               	addwf	RCE@a_1463,w,c
  1659  007BAA  6ED9               	movwf	fsr2l,c
  1660  007BAC  6ADA               	clrf	fsr2h,c
  1661  007BAE  0E00               	movlw	high RCE@commandReceived
  1662  007BB0  22DA               	addwfc	fsr2h,f,c
  1663  007BB2  0E00               	movlw	0
  1664  007BB4  6EDF               	movwf	indf2,c
  1665                           
  1666                           ;sanic.c: 198:         }
  1667  007BB6  2A4F               	incf	RCE@a_1463,f,c
  1668  007BB8  0E02               	movlw	2
  1669  007BBA  644F               	cpfsgt	RCE@a_1463,c
  1670  007BBC  D7F4               	goto	l3557
  1671  007BBE  D77D               	goto	_RCE
  1672  007BC0                     __end_of_RCE:
  1673                           	opt callstack 0
  1674                           
  1675 ;; *************** function _pyCal *****************
  1676 ;; Defined at:
  1677 ;;		line 393 in file "./functions.c"
  1678 ;; Parameters:    Size  Location     Type
  1679 ;;		None
  1680 ;; Auto vars:     Size  Location     Type
  1681 ;;  a               1   19[COMRAM] unsigned char 
  1682 ;;  done            1    0        unsigned char 
  1683 ;; Return value:  Size  Location     Type
  1684 ;;                  1    wreg      void 
  1685 ;; Registers used:
  1686 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1687 ;; Tracked objects:
  1688 ;;		On entry : 0/0
  1689 ;;		On exit  : 0/0
  1690 ;;		Unchanged: 0/0
  1691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1692 ;;      Params:         0       0       0       0       0       0       0
  1693 ;;      Locals:         2       0       0       0       0       0       0
  1694 ;;      Temps:          0       0       0       0       0       0       0
  1695 ;;      Totals:         2       0       0       0       0       0       0
  1696 ;;Total ram usage:        2 bytes
  1697 ;; Hardware stack levels used:    1
  1698 ;; Hardware stack levels required when called:    3
  1699 ;; This function calls:
  1700 ;;		_msDelay
  1701 ;;		_readAllSensors
  1702 ;;		_setupADC
  1703 ;;		_trans
  1704 ;; This function is called by:
  1705 ;;		_RCE
  1706 ;; This function uses a non-reentrant model
  1707 ;;
  1708                           
  1709                           	psect	text8
  1710  0072B4                     __ptext8:
  1711                           	opt callstack 0
  1712  0072B4                     _pyCal:
  1713                           	opt callstack 26
  1714                           
  1715                           ;./functions.c: 395:     setupADC();
  1716                           
  1717                           ;incstack = 0
  1718  0072B4  EC71  F038         	call	_setupADC	;wreg free
  1719                           
  1720                           ;./functions.c: 396:     PORTD = 0b00001100;
  1721  0072B8  0E0C               	movlw	12
  1722  0072BA  6E83               	movwf	3971,c	;volatile
  1723  0072BC                     
  1724                           ;./functions.c: 400:     {;./functions.c: 401:         msDelay(10);
  1725  0072BC  0E0A               	movlw	10
  1726  0072BE  EC51  F038         	call	_msDelay
  1727                           
  1728                           ;./functions.c: 402:         readAllSensors();
  1729  0072C2  EC02  F03C         	call	_readAllSensors	;wreg free
  1730                           
  1731                           ;./functions.c: 403:         for (a = 0; a < 5; a++){
  1732  0072C6  0E00               	movlw	0
  1733  0072C8  6E14               	movwf	pyCal@a,c
  1734  0072CA                     l3377:
  1735                           
  1736                           ;./functions.c: 404:             trans(sensorVals[a]);
  1737  0072CA  0E50               	movlw	low _sensorVals
  1738  0072CC  2414               	addwf	pyCal@a,w,c
  1739  0072CE  6ED9               	movwf	fsr2l,c
  1740  0072D0  6ADA               	clrf	fsr2h,c
  1741  0072D2  0E00               	movlw	high _sensorVals
  1742  0072D4  22DA               	addwfc	fsr2h,f,c
  1743  0072D6  50DF               	movf	indf2,w,c
  1744  0072D8  ECBF  F037         	call	_trans
  1745                           
  1746                           ;./functions.c: 405:         }
  1747  0072DC  2A14               	incf	pyCal@a,f,c
  1748  0072DE  0E04               	movlw	4
  1749  0072E0  6414               	cpfsgt	pyCal@a,c
  1750  0072E2  D7F3               	goto	l3377
  1751                           
  1752                           ;./functions.c: 406:         trans('\n');
  1753  0072E4  0E0A               	movlw	10
  1754  0072E6  ECBF  F037         	call	_trans
  1755                           
  1756                           ;./functions.c: 408:         if (PIR1bits.RC1IF)
  1757  0072EA  AA9E               	btfss	3998,5,c	;volatile
  1758  0072EC  D7E7               	goto	l3363
  1759                           
  1760                           ;./functions.c: 409:         {;./functions.c: 410:             PIR1bits.RC1IF = 0;
  1761  0072EE  9A9E               	bcf	3998,5,c	;volatile
  1762                           
  1763                           ;./functions.c: 411:             if (RCREG == 'S' || RCREG == 's')
  1764  0072F0  0E53               	movlw	83
  1765  0072F2  18AE               	xorwf	4014,w,c	;volatile
  1766  0072F4  B4D8               	btfsc	status,2,c
  1767  0072F6  0012               	return	
  1768  0072F8  0E73               	movlw	115
  1769  0072FA  18AE               	xorwf	4014,w,c	;volatile
  1770  0072FC  B4D8               	btfsc	status,2,c
  1771  0072FE  0012               	return	
  1772  007300  D7DD               	goto	l3363
  1773  007302                     __end_of_pyCal:
  1774                           	opt callstack 0
  1775                           
  1776 ;; *************** function _navigate *****************
  1777 ;; Defined at:
  1778 ;;		line 419 in file "./functions.c"
  1779 ;; Parameters:    Size  Location     Type
  1780 ;;		None
  1781 ;; Auto vars:     Size  Location     Type
  1782 ;;		None
  1783 ;; Return value:  Size  Location     Type
  1784 ;;                  1    wreg      void 
  1785 ;; Registers used:
  1786 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1792 ;;      Params:         0       0       0       0       0       0       0
  1793 ;;      Locals:         0       0       0       0       0       0       0
  1794 ;;      Temps:          0       0       0       0       0       0       0
  1795 ;;      Totals:         0       0       0       0       0       0       0
  1796 ;;Total ram usage:        0 bytes
  1797 ;; Hardware stack levels used:    1
  1798 ;; Hardware stack levels required when called:    3
  1799 ;; This function calls:
  1800 ;;		_classifyColors
  1801 ;;		_determineDirection
  1802 ;;		_displayColorDetected
  1803 ;;		_displayRaceColor
  1804 ;;		_readAllSensors
  1805 ;;		_setupADC
  1806 ;;		_setupPWMLeft
  1807 ;;		_setupPWMRight
  1808 ;;		_stopMotors
  1809 ;;		_testBlack
  1810 ;; This function is called by:
  1811 ;;		_RCE
  1812 ;; This function uses a non-reentrant model
  1813 ;;
  1814                           
  1815                           	psect	text9
  1816  00721E                     __ptext9:
  1817                           	opt callstack 0
  1818  00721E                     _navigate:
  1819                           	opt callstack 26
  1820                           
  1821                           ;./functions.c: 420:     displayRaceColor();
  1822                           
  1823                           ;incstack = 0
  1824  00721E  ECF0  F038         	call	_displayRaceColor	;wreg free
  1825                           
  1826                           ;./functions.c: 421:     setupPWMLeft();
  1827  007222  EC82  F038         	call	_setupPWMLeft	;wreg free
  1828                           
  1829                           ;./functions.c: 422:     setupPWMRight();
  1830  007226  EC93  F038         	call	_setupPWMRight	;wreg free
  1831                           
  1832                           ;./functions.c: 423:     setupADC();
  1833  00722A  EC71  F038         	call	_setupADC	;wreg free
  1834  00722E                     l3395:
  1835                           
  1836                           ;./functions.c: 425:         readAllSensors();
  1837  00722E  EC02  F03C         	call	_readAllSensors	;wreg free
  1838                           
  1839                           ;./functions.c: 426:         classifyColors();
  1840  007232  ECE3  F03C         	call	_classifyColors	;wreg free
  1841                           
  1842                           ;./functions.c: 427:         displayColorDetected(2);
  1843  007236  0E02               	movlw	2
  1844  007238  EC79  F03B         	call	_displayColorDetected
  1845                           
  1846                           ;./functions.c: 428:         determineDirection();
  1847  00723C  EC37  F03B         	call	_determineDirection	;wreg free
  1848                           
  1849                           ;./functions.c: 432:         if (PIR1bits.RC1IF)
  1850  007240  AA9E               	btfss	3998,5,c	;volatile
  1851  007242  D00C               	goto	l3415
  1852                           
  1853                           ;./functions.c: 433:         {;./functions.c: 434:             PIR1bits.RC1IF = 0;
  1854  007244  9A9E               	bcf	3998,5,c	;volatile
  1855                           
  1856                           ;./functions.c: 435:             if (RCREG == 'S' || RCREG == 's')
  1857  007246  0E53               	movlw	83
  1858  007248  18AE               	xorwf	4014,w,c	;volatile
  1859  00724A  B4D8               	btfsc	status,2,c
  1860  00724C  D004               	goto	u2330
  1861  00724E  0E73               	movlw	115
  1862  007250  18AE               	xorwf	4014,w,c	;volatile
  1863  007252  A4D8               	btfss	status,2,c
  1864  007254  D7EC               	goto	l3395
  1865  007256                     u2330:
  1866                           
  1867                           ;./functions.c: 436:             {;./functions.c: 437:                 stopMotors();
  1868  007256  ECCB  F037         	call	_stopMotors	;wreg free
  1869  00725A  0012               	return	
  1870  00725C                     l3415:
  1871  00725C  EC81  F039         	call	_testBlack	;wreg free
  1872  007260  0AAA               	xorlw	170
  1873  007262  B4D8               	btfsc	status,2,c
  1874  007264  D7F8               	goto	u2330
  1875  007266  D7E3               	goto	l3395
  1876  007268                     __end_of_navigate:
  1877                           	opt callstack 0
  1878                           
  1879 ;; *************** function _testBlack *****************
  1880 ;; Defined at:
  1881 ;;		line 620 in file "./functions.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;		None
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;		None
  1886 ;; Return value:  Size  Location     Type
  1887 ;;                  1    wreg      unsigned char 
  1888 ;; Registers used:
  1889 ;;		wreg, status,2, status,0
  1890 ;; Tracked objects:
  1891 ;;		On entry : 0/0
  1892 ;;		On exit  : 0/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1895 ;;      Params:         0       0       0       0       0       0       0
  1896 ;;      Locals:         0       0       0       0       0       0       0
  1897 ;;      Temps:          0       0       0       0       0       0       0
  1898 ;;      Totals:         0       0       0       0       0       0       0
  1899 ;;Total ram usage:        0 bytes
  1900 ;; Hardware stack levels used:    1
  1901 ;; This function calls:
  1902 ;;		Nothing
  1903 ;; This function is called by:
  1904 ;;		_navigate
  1905 ;; This function uses a non-reentrant model
  1906 ;;
  1907                           
  1908                           	psect	text10
  1909  007302                     __ptext10:
  1910                           	opt callstack 0
  1911  007302                     _testBlack:
  1912                           	opt callstack 28
  1913                           
  1914                           ;./functions.c: 621:     if ((sensorVals[0] < LLranges[3]) || (sensorVals[0] < LLranges[
      +                          2])){
  1915                           
  1916                           ;incstack = 0
  1917  007302  505A               	movf	_LLranges+3,w,c
  1918  007304  5C50               	subwf	_sensorVals,w,c
  1919  007306  A0D8               	btfss	status,0,c
  1920  007308  D004               	goto	u1730
  1921  00730A  5059               	movf	_LLranges+2,w,c
  1922  00730C  5C50               	subwf	_sensorVals,w,c
  1923  00730E  B0D8               	btfsc	status,0,c
  1924  007310  D002               	goto	l2913
  1925  007312                     u1730:
  1926                           
  1927                           ;./functions.c: 622:         return 0x0;
  1928  007312  0E00               	movlw	0
  1929  007314  0012               	return	
  1930  007316                     l2913:
  1931                           
  1932                           ;./functions.c: 624:     if ((sensorVals[1] < Lranges[3]) || (sensorVals[1] < Lranges[2]
      +                          )){
  1933  007316  0100               	movlb	0	; () banked
  1934  007318  51E7               	movf	(_Lranges+3)& (0+255),w,b
  1935  00731A  5C51               	subwf	_sensorVals+1,w,c
  1936  00731C  A0D8               	btfss	status,0,c
  1937  00731E  D7F9               	goto	u1730
  1938                           
  1939                           ; BSR set to: 0
  1940  007320  51E6               	movf	(_Lranges+2)& (0+255),w,b
  1941  007322  5C51               	subwf	_sensorVals+1,w,c
  1942  007324  A0D8               	btfss	status,0,c
  1943  007326  D7F5               	goto	u1730
  1944                           
  1945                           ; BSR set to: 0
  1946                           ;./functions.c: 627:     if ((sensorVals[2] < Mranges[3]) || (sensorVals[2] < Mranges[2]
      +                          )){
  1947  007328  51E2               	movf	(_Mranges+3)& (0+255),w,b
  1948  00732A  5C52               	subwf	_sensorVals+2,w,c
  1949  00732C  A0D8               	btfss	status,0,c
  1950  00732E  D7F1               	goto	u1730
  1951                           
  1952                           ; BSR set to: 0
  1953  007330  51E1               	movf	(_Mranges+2)& (0+255),w,b
  1954  007332  5C52               	subwf	_sensorVals+2,w,c
  1955  007334  A0D8               	btfss	status,0,c
  1956  007336  D7ED               	goto	u1730
  1957                           
  1958                           ; BSR set to: 0
  1959                           ;./functions.c: 630:     if ((sensorVals[3] < Rranges[3]) || (sensorVals[3] < Rranges[2]
      +                          )){
  1960  007338  51DD               	movf	(_Rranges+3)& (0+255),w,b
  1961  00733A  5C53               	subwf	_sensorVals+3,w,c
  1962  00733C  A0D8               	btfss	status,0,c
  1963  00733E  D7E9               	goto	u1730
  1964                           
  1965                           ; BSR set to: 0
  1966  007340  51DC               	movf	(_Rranges+2)& (0+255),w,b
  1967  007342  5C53               	subwf	_sensorVals+3,w,c
  1968  007344  A0D8               	btfss	status,0,c
  1969  007346  D7E5               	goto	u1730
  1970                           
  1971                           ; BSR set to: 0
  1972                           ;./functions.c: 633:     if ((sensorVals[4] < RRranges[3]) || (sensorVals[4] < RRranges[
      +                          2])){
  1973  007348  51D8               	movf	(_RRranges+3)& (0+255),w,b
  1974  00734A  5C54               	subwf	_sensorVals+4,w,c
  1975  00734C  A0D8               	btfss	status,0,c
  1976  00734E  D7E1               	goto	u1730
  1977                           
  1978                           ; BSR set to: 0
  1979  007350  51D7               	movf	(_RRranges+2)& (0+255),w,b
  1980  007352  5C54               	subwf	_sensorVals+4,w,c
  1981  007354  A0D8               	btfss	status,0,c
  1982  007356  D7DD               	goto	u1730
  1983                           
  1984                           ; BSR set to: 0
  1985                           ;./functions.c: 636:     return 0xAA;
  1986  007358  0EAA               	movlw	170
  1987  00735A  0012               	return		;funcret
  1988  00735C                     __end_of_testBlack:
  1989                           	opt callstack 0
  1990                           
  1991 ;; *************** function _stopMotors *****************
  1992 ;; Defined at:
  1993 ;;		line 716 in file "./functions.c"
  1994 ;; Parameters:    Size  Location     Type
  1995 ;;		None
  1996 ;; Auto vars:     Size  Location     Type
  1997 ;;		None
  1998 ;; Return value:  Size  Location     Type
  1999 ;;                  1    wreg      void 
  2000 ;; Registers used:
  2001 ;;		wreg, status,2
  2002 ;; Tracked objects:
  2003 ;;		On entry : 0/0
  2004 ;;		On exit  : 0/0
  2005 ;;		Unchanged: 0/0
  2006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2007 ;;      Params:         0       0       0       0       0       0       0
  2008 ;;      Locals:         0       0       0       0       0       0       0
  2009 ;;      Temps:          0       0       0       0       0       0       0
  2010 ;;      Totals:         0       0       0       0       0       0       0
  2011 ;;Total ram usage:        0 bytes
  2012 ;; Hardware stack levels used:    1
  2013 ;; This function calls:
  2014 ;;		Nothing
  2015 ;; This function is called by:
  2016 ;;		_navigate
  2017 ;; This function uses a non-reentrant model
  2018 ;;
  2019                           
  2020                           	psect	text11
  2021  006F96                     __ptext11:
  2022                           	opt callstack 0
  2023  006F96                     _stopMotors:
  2024                           	opt callstack 28
  2025                           
  2026                           ;./functions.c: 717:     PORTCbits.RC0 = 0;
  2027                           
  2028                           ;incstack = 0
  2029  006F96  9082               	bcf	3970,0,c	;volatile
  2030                           
  2031                           ;./functions.c: 718:     PORTCbits.RC1 = 0;
  2032  006F98  9282               	bcf	3970,1,c	;volatile
  2033                           
  2034                           ;./functions.c: 719:     TRISCbits.TRISC2 = 1;
  2035  006F9A  8494               	bsf	3988,2,c	;volatile
  2036                           
  2037                           ;./functions.c: 720:     PORTEbits.RE0 = 0;
  2038  006F9C  9084               	bcf	3972,0,c	;volatile
  2039                           
  2040                           ;./functions.c: 721:     PORTEbits.RE1 = 0;
  2041  006F9E  9284               	bcf	3972,1,c	;volatile
  2042                           
  2043                           ;./functions.c: 722:     TRISEbits.TRISE2 = 1;
  2044  006FA0  8496               	bsf	3990,2,c	;volatile
  2045                           
  2046                           ;./functions.c: 723:     PORTA = 0;
  2047  006FA2  0E00               	movlw	0
  2048  006FA4  6E80               	movwf	3968,c	;volatile
  2049  006FA6  0012               	return		;funcret
  2050  006FA8                     __end_of_stopMotors:
  2051                           	opt callstack 0
  2052                           
  2053 ;; *************** function _setupPWMRight *****************
  2054 ;; Defined at:
  2055 ;;		line 40 in file "./functions.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;		None
  2058 ;; Auto vars:     Size  Location     Type
  2059 ;;		None
  2060 ;; Return value:  Size  Location     Type
  2061 ;;                  1    wreg      void 
  2062 ;; Registers used:
  2063 ;;		wreg, status,2
  2064 ;; Tracked objects:
  2065 ;;		On entry : 0/0
  2066 ;;		On exit  : 0/0
  2067 ;;		Unchanged: 0/0
  2068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2069 ;;      Params:         0       0       0       0       0       0       0
  2070 ;;      Locals:         0       0       0       0       0       0       0
  2071 ;;      Temps:          0       0       0       0       0       0       0
  2072 ;;      Totals:         0       0       0       0       0       0       0
  2073 ;;Total ram usage:        0 bytes
  2074 ;; Hardware stack levels used:    1
  2075 ;; This function calls:
  2076 ;;		Nothing
  2077 ;; This function is called by:
  2078 ;;		_navigate
  2079 ;; This function uses a non-reentrant model
  2080 ;;
  2081                           
  2082                           	psect	text12
  2083  007126                     __ptext12:
  2084                           	opt callstack 0
  2085  007126                     _setupPWMRight:
  2086                           	opt callstack 28
  2087                           
  2088                           ;./functions.c: 42:     CCP5CON = 0;
  2089                           
  2090                           ;incstack = 0
  2091  007126  0E00               	movlw	0
  2092  007128  010F               	movlb	15	; () banked
  2093  00712A  6F54               	movwf	84,b	;volatile
  2094                           
  2095                           ; BSR set to: 15
  2096                           ;./functions.c: 43:     PR4 = 255;
  2097  00712C  6952               	setf	82,b	;volatile
  2098                           
  2099                           ; BSR set to: 15
  2100                           ;./functions.c: 44:     CCPR5L = 255;
  2101  00712E  6955               	setf	85,b	;volatile
  2102                           
  2103                           ; BSR set to: 15
  2104                           ;./functions.c: 46:     TRISEbits.RE2 = 0;
  2105  007130  9496               	bcf	3990,2,c	;volatile
  2106                           
  2107                           ;./functions.c: 48:     CCPTMRS1 = 0b00000100;
  2108  007132  0E04               	movlw	4
  2109  007134  6F48               	movwf	72,b	;volatile
  2110                           
  2111                           ;./functions.c: 49:     CCP5CON = 0b00001100;
  2112  007136  0E0C               	movlw	12
  2113  007138  6F54               	movwf	84,b	;volatile
  2114                           
  2115                           ;./functions.c: 50:     T4CON = 0b00000000;
  2116  00713A  0E00               	movlw	0
  2117  00713C  6F51               	movwf	81,b	;volatile
  2118                           
  2119                           ;./functions.c: 51:     TMR4 = 0;
  2120  00713E  0E00               	movlw	0
  2121  007140  6F53               	movwf	83,b	;volatile
  2122                           
  2123                           ; BSR set to: 15
  2124                           ;./functions.c: 52:     PIE5bits.TMR4IE = 0;
  2125  007142  907D               	bcf	3965,0,c	;volatile
  2126                           
  2127                           ; BSR set to: 15
  2128                           ;./functions.c: 53:     T4CONbits.TMR4ON = 1;
  2129  007144  8551               	bsf	81,2,b	;volatile
  2130                           
  2131                           ; BSR set to: 15
  2132  007146  0012               	return		;funcret
  2133  007148                     __end_of_setupPWMRight:
  2134                           	opt callstack 0
  2135                           
  2136 ;; *************** function _setupPWMLeft *****************
  2137 ;; Defined at:
  2138 ;;		line 23 in file "./functions.c"
  2139 ;; Parameters:    Size  Location     Type
  2140 ;;		None
  2141 ;; Auto vars:     Size  Location     Type
  2142 ;;		None
  2143 ;; Return value:  Size  Location     Type
  2144 ;;                  1    wreg      void 
  2145 ;; Registers used:
  2146 ;;		wreg, status,2
  2147 ;; Tracked objects:
  2148 ;;		On entry : 0/0
  2149 ;;		On exit  : 0/0
  2150 ;;		Unchanged: 0/0
  2151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2152 ;;      Params:         0       0       0       0       0       0       0
  2153 ;;      Locals:         0       0       0       0       0       0       0
  2154 ;;      Temps:          0       0       0       0       0       0       0
  2155 ;;      Totals:         0       0       0       0       0       0       0
  2156 ;;Total ram usage:        0 bytes
  2157 ;; Hardware stack levels used:    1
  2158 ;; This function calls:
  2159 ;;		Nothing
  2160 ;; This function is called by:
  2161 ;;		_navigate
  2162 ;; This function uses a non-reentrant model
  2163 ;;
  2164                           
  2165                           	psect	text13
  2166  007104                     __ptext13:
  2167                           	opt callstack 0
  2168  007104                     _setupPWMLeft:
  2169                           	opt callstack 28
  2170                           
  2171                           ;./functions.c: 25:     CCP1CON = 0;
  2172                           
  2173                           ; BSR set to: 15
  2174                           ;incstack = 0
  2175  007104  0E00               	movlw	0
  2176  007106  6EBD               	movwf	4029,c	;volatile
  2177                           
  2178                           ;./functions.c: 26:     PR2 = 255;
  2179  007108  68BB               	setf	4027,c	;volatile
  2180                           
  2181                           ;./functions.c: 27:     CCPR1L = 255;
  2182  00710A  68BE               	setf	4030,c	;volatile
  2183                           
  2184                           ;./functions.c: 29:     TRISCbits.RC2 = 0;
  2185  00710C  9494               	bcf	3988,2,c	;volatile
  2186                           
  2187                           ;./functions.c: 31:     CCPTMRS0 = 0;
  2188  00710E  0E00               	movlw	0
  2189  007110  010F               	movlb	15	; () banked
  2190  007112  6F49               	movwf	73,b	;volatile
  2191                           
  2192                           ;./functions.c: 32:     CCP1CON = 0b00001100;
  2193  007114  0E0C               	movlw	12
  2194  007116  6EBD               	movwf	4029,c	;volatile
  2195                           
  2196                           ;./functions.c: 33:     T2CON = 0b00000000;
  2197  007118  0E00               	movlw	0
  2198  00711A  6EBA               	movwf	4026,c	;volatile
  2199                           
  2200                           ;./functions.c: 34:     TMR2 = 0;
  2201  00711C  0E00               	movlw	0
  2202  00711E  6EBC               	movwf	4028,c	;volatile
  2203                           
  2204                           ; BSR set to: 15
  2205                           ;./functions.c: 35:     PIE1bits.TMR1IE = 0;
  2206  007120  909D               	bcf	3997,0,c	;volatile
  2207                           
  2208                           ; BSR set to: 15
  2209                           ;./functions.c: 36:     T2CONbits.TMR2ON = 1;
  2210  007122  84BA               	bsf	4026,2,c	;volatile
  2211                           
  2212                           ; BSR set to: 15
  2213  007124  0012               	return		;funcret
  2214  007126                     __end_of_setupPWMLeft:
  2215                           	opt callstack 0
  2216                           
  2217 ;; *************** function _setupADC *****************
  2218 ;; Defined at:
  2219 ;;		line 119 in file "./functions.c"
  2220 ;; Parameters:    Size  Location     Type
  2221 ;;		None
  2222 ;; Auto vars:     Size  Location     Type
  2223 ;;		None
  2224 ;; Return value:  Size  Location     Type
  2225 ;;                  1    wreg      void 
  2226 ;; Registers used:
  2227 ;;		wreg, status,2
  2228 ;; Tracked objects:
  2229 ;;		On entry : 0/0
  2230 ;;		On exit  : 0/0
  2231 ;;		Unchanged: 0/0
  2232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2233 ;;      Params:         0       0       0       0       0       0       0
  2234 ;;      Locals:         0       0       0       0       0       0       0
  2235 ;;      Temps:          0       0       0       0       0       0       0
  2236 ;;      Totals:         0       0       0       0       0       0       0
  2237 ;;Total ram usage:        0 bytes
  2238 ;; Hardware stack levels used:    1
  2239 ;; This function calls:
  2240 ;;		Nothing
  2241 ;; This function is called by:
  2242 ;;		_pyCal
  2243 ;;		_navigate
  2244 ;;		_init
  2245 ;; This function uses a non-reentrant model
  2246 ;;
  2247                           
  2248                           	psect	text14
  2249  0070E2                     __ptext14:
  2250                           	opt callstack 0
  2251  0070E2                     _setupADC:
  2252                           	opt callstack 29
  2253                           
  2254                           ;./functions.c: 121:     ADCON2bits.ADCS = 0b100;
  2255                           
  2256                           ; BSR set to: 15
  2257                           ;incstack = 0
  2258  0070E2  50C0               	movf	4032,w,c	;volatile
  2259  0070E4  0BF8               	andlw	-8
  2260  0070E6  0904               	iorlw	4
  2261  0070E8  6EC0               	movwf	4032,c	;volatile
  2262                           
  2263                           ;./functions.c: 122:     ADCON1 = 0;
  2264  0070EA  0E00               	movlw	0
  2265  0070EC  6EC1               	movwf	4033,c	;volatile
  2266                           
  2267                           ;./functions.c: 123:     ADCON0bits.CHS = 0b01100;
  2268  0070EE  50C2               	movf	4034,w,c	;volatile
  2269  0070F0  0B83               	andlw	-125
  2270  0070F2  0930               	iorlw	48
  2271  0070F4  6EC2               	movwf	4034,c	;volatile
  2272                           
  2273                           ;./functions.c: 124:     ADCON2bits.ADFM = 0;
  2274  0070F6  9EC0               	bcf	4032,7,c	;volatile
  2275                           
  2276                           ;./functions.c: 125:     ADCON2bits.ACQT = 0b101;
  2277  0070F8  50C0               	movf	4032,w,c	;volatile
  2278  0070FA  0BC7               	andlw	-57
  2279  0070FC  0928               	iorlw	40
  2280  0070FE  6EC0               	movwf	4032,c	;volatile
  2281                           
  2282                           ;./functions.c: 126:     ADCON0bits.ADON = 1;
  2283  007100  80C2               	bsf	4034,0,c	;volatile
  2284  007102  0012               	return		;funcret
  2285  007104                     __end_of_setupADC:
  2286                           	opt callstack 0
  2287                           
  2288 ;; *************** function _readAllSensors *****************
  2289 ;; Defined at:
  2290 ;;		line 748 in file "./functions.c"
  2291 ;; Parameters:    Size  Location     Type
  2292 ;;		None
  2293 ;; Auto vars:     Size  Location     Type
  2294 ;;  tempSensorVa    5   12[COMRAM] unsigned char [5]
  2295 ;;  a               1   17[COMRAM] unsigned char 
  2296 ;; Return value:  Size  Location     Type
  2297 ;;                  1    wreg      void 
  2298 ;; Registers used:
  2299 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2300 ;; Tracked objects:
  2301 ;;		On entry : 0/0
  2302 ;;		On exit  : 0/0
  2303 ;;		Unchanged: 0/0
  2304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2305 ;;      Params:         0       0       0       0       0       0       0
  2306 ;;      Locals:         6       0       0       0       0       0       0
  2307 ;;      Temps:          2       0       0       0       0       0       0
  2308 ;;      Totals:         8       0       0       0       0       0       0
  2309 ;;Total ram usage:        8 bytes
  2310 ;; Hardware stack levels used:    1
  2311 ;; Hardware stack levels required when called:    2
  2312 ;; This function calls:
  2313 ;;		_abs
  2314 ;;		_aveSensor
  2315 ;; This function is called by:
  2316 ;;		_pyCal
  2317 ;;		_navigate
  2318 ;; This function uses a non-reentrant model
  2319 ;;
  2320                           
  2321                           	psect	text15
  2322  007804                     __ptext15:
  2323                           	opt callstack 0
  2324  007804                     _readAllSensors:
  2325                           	opt callstack 26
  2326                           
  2327                           ;./functions.c: 749:     unsigned char tempSensorVals[5];;./functions.c: 750:     unsign
      +                          ed char a;;./functions.c: 751:     for (a = 0; a < 5; a++){
  2328                           
  2329                           ;incstack = 0
  2330  007804  0E00               	movlw	0
  2331  007806  6E12               	movwf	readAllSensors@a,c
  2332  007808                     l2771:
  2333                           
  2334                           ;./functions.c: 752:         tempSensorVals[a] = aveSensor(sensorChannels[a]);
  2335  007808  0E0D               	movlw	low readAllSensors@tempSensorVals
  2336  00780A  2412               	addwf	readAllSensors@a,w,c
  2337  00780C  6ED9               	movwf	fsr2l,c
  2338  00780E  6ADA               	clrf	fsr2h,c
  2339  007810  0E00               	movlw	high readAllSensors@tempSensorVals
  2340  007812  22DA               	addwfc	fsr2h,f,c
  2341  007814  0ECA               	movlw	low _sensorChannels
  2342  007816  2412               	addwf	readAllSensors@a,w,c
  2343  007818  6EE1               	movwf	fsr1l,c
  2344  00781A  6AE2               	clrf	fsr1h,c
  2345  00781C  0E00               	movlw	high _sensorChannels
  2346  00781E  22E2               	addwfc	fsr1h,f,c
  2347  007820  50E7               	movf	indf1,w,c
  2348  007822  EC34  F039         	call	_aveSensor
  2349  007826  6EDF               	movwf	indf2,c
  2350                           
  2351                           ;./functions.c: 753:     }
  2352  007828  2A12               	incf	readAllSensors@a,f,c
  2353  00782A  0E04               	movlw	4
  2354  00782C  6412               	cpfsgt	readAllSensors@a,c
  2355  00782E  D7EC               	goto	l2771
  2356                           
  2357                           ;./functions.c: 754:     for (a = 0; a < 5; a++){
  2358  007830  0E00               	movlw	0
  2359  007832  6E12               	movwf	readAllSensors@a,c
  2360  007834                     l2783:
  2361                           
  2362                           ;./functions.c: 755:         sensorVals[a] = aveSensor(sensorChannels[a]);
  2363  007834  0E50               	movlw	low _sensorVals
  2364  007836  2412               	addwf	readAllSensors@a,w,c
  2365  007838  6ED9               	movwf	fsr2l,c
  2366  00783A  6ADA               	clrf	fsr2h,c
  2367  00783C  0E00               	movlw	high _sensorVals
  2368  00783E  22DA               	addwfc	fsr2h,f,c
  2369  007840  0ECA               	movlw	low _sensorChannels
  2370  007842  2412               	addwf	readAllSensors@a,w,c
  2371  007844  6EE1               	movwf	fsr1l,c
  2372  007846  6AE2               	clrf	fsr1h,c
  2373  007848  0E00               	movlw	high _sensorChannels
  2374  00784A  22E2               	addwfc	fsr1h,f,c
  2375  00784C  50E7               	movf	indf1,w,c
  2376  00784E  EC34  F039         	call	_aveSensor
  2377  007852  6EDF               	movwf	indf2,c
  2378                           
  2379                           ;./functions.c: 757:         if (abs(tempSensorVals[a] - sensorVals[a]) > 30){
  2380  007854  0E0D               	movlw	low readAllSensors@tempSensorVals
  2381  007856  2412               	addwf	readAllSensors@a,w,c
  2382  007858  6ED9               	movwf	fsr2l,c
  2383  00785A  6ADA               	clrf	fsr2h,c
  2384  00785C  0E00               	movlw	high readAllSensors@tempSensorVals
  2385  00785E  22DA               	addwfc	fsr2h,f,c
  2386  007860  50DF               	movf	indf2,w,c
  2387  007862  6E0B               	movwf	??_readAllSensors& (0+255),c
  2388  007864  0E50               	movlw	low _sensorVals
  2389  007866  2412               	addwf	readAllSensors@a,w,c
  2390  007868  6ED9               	movwf	fsr2l,c
  2391  00786A  6ADA               	clrf	fsr2h,c
  2392  00786C  0E00               	movlw	high _sensorVals
  2393  00786E  22DA               	addwfc	fsr2h,f,c
  2394  007870  50DF               	movf	indf2,w,c
  2395  007872  6E0C               	movwf	(??_readAllSensors+1)& (0+255),c
  2396  007874  500C               	movf	??_readAllSensors+1,w,c
  2397  007876  5C0B               	subwf	??_readAllSensors,w,c
  2398  007878  6E01               	movwf	abs@a,c
  2399  00787A  6A02               	clrf	abs@a+1,c
  2400  00787C  A0D8               	btfss	status,0,c
  2401  00787E  0602               	decf	abs@a+1,f,c
  2402  007880  ECBC  F038         	call	_abs	;wreg free
  2403  007884  BE02               	btfsc	?_abs+1,7,c
  2404  007886  D024               	goto	l2791
  2405  007888  5002               	movf	?_abs+1,w,c
  2406  00788A  E104               	bnz	u1480
  2407  00788C  0E1F               	movlw	31
  2408  00788E  5C01               	subwf	?_abs,w,c
  2409  007890  A0D8               	btfss	status,0,c
  2410  007892  D01E               	goto	l2791
  2411  007894                     u1480:
  2412                           
  2413                           ;./functions.c: 758:             if (sensorVals[a] > tempSensorVals[a]){
  2414  007894  0E50               	movlw	low _sensorVals
  2415  007896  2412               	addwf	readAllSensors@a,w,c
  2416  007898  6ED9               	movwf	fsr2l,c
  2417  00789A  6ADA               	clrf	fsr2h,c
  2418  00789C  0E00               	movlw	high _sensorVals
  2419  00789E  22DA               	addwfc	fsr2h,f,c
  2420  0078A0  0E0D               	movlw	low readAllSensors@tempSensorVals
  2421  0078A2  2412               	addwf	readAllSensors@a,w,c
  2422  0078A4  6EE1               	movwf	fsr1l,c
  2423  0078A6  6AE2               	clrf	fsr1h,c
  2424  0078A8  0E00               	movlw	high readAllSensors@tempSensorVals
  2425  0078AA  22E2               	addwfc	fsr1h,f,c
  2426  0078AC  50DE               	movf	postinc2,w,c
  2427  0078AE  5CE6               	subwf	postinc1,w,c
  2428  0078B0  B0D8               	btfsc	status,0,c
  2429  0078B2  D00E               	goto	l2791
  2430                           
  2431                           ;./functions.c: 759:                 sensorVals[a] = tempSensorVals[a];
  2432  0078B4  0E0D               	movlw	low readAllSensors@tempSensorVals
  2433  0078B6  2412               	addwf	readAllSensors@a,w,c
  2434  0078B8  6ED9               	movwf	fsr2l,c
  2435  0078BA  6ADA               	clrf	fsr2h,c
  2436  0078BC  0E00               	movlw	high readAllSensors@tempSensorVals
  2437  0078BE  22DA               	addwfc	fsr2h,f,c
  2438  0078C0  0E50               	movlw	low _sensorVals
  2439  0078C2  2412               	addwf	readAllSensors@a,w,c
  2440  0078C4  6EE1               	movwf	fsr1l,c
  2441  0078C6  6AE2               	clrf	fsr1h,c
  2442  0078C8  0E00               	movlw	high _sensorVals
  2443  0078CA  22E2               	addwfc	fsr1h,f,c
  2444  0078CC  CFDF FFE7          	movff	indf2,indf1
  2445  0078D0                     l2791:
  2446                           
  2447                           ;./functions.c: 762:     }
  2448  0078D0  2A12               	incf	readAllSensors@a,f,c
  2449  0078D2  0E04               	movlw	4
  2450  0078D4  6412               	cpfsgt	readAllSensors@a,c
  2451  0078D6  D7AE               	goto	l2783
  2452  0078D8  0012               	return	
  2453  0078DA                     __end_of_readAllSensors:
  2454                           	opt callstack 0
  2455                           
  2456 ;; *************** function _displayRaceColor *****************
  2457 ;; Defined at:
  2458 ;;		line 728 in file "./functions.c"
  2459 ;; Parameters:    Size  Location     Type
  2460 ;;		None
  2461 ;; Auto vars:     Size  Location     Type
  2462 ;;		None
  2463 ;; Return value:  Size  Location     Type
  2464 ;;                  1    wreg      void 
  2465 ;; Registers used:
  2466 ;;		wreg, status,2
  2467 ;; Tracked objects:
  2468 ;;		On entry : 0/0
  2469 ;;		On exit  : 0/0
  2470 ;;		Unchanged: 0/0
  2471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2472 ;;      Params:         0       0       0       0       0       0       0
  2473 ;;      Locals:         0       0       0       0       0       0       0
  2474 ;;      Temps:          0       0       0       0       0       0       0
  2475 ;;      Totals:         0       0       0       0       0       0       0
  2476 ;;Total ram usage:        0 bytes
  2477 ;; Hardware stack levels used:    1
  2478 ;; This function calls:
  2479 ;;		Nothing
  2480 ;; This function is called by:
  2481 ;;		_navigate
  2482 ;; This function uses a non-reentrant model
  2483 ;;
  2484                           
  2485                           	psect	text16
  2486  0071E0                     __ptext16:
  2487                           	opt callstack 0
  2488  0071E0                     _displayRaceColor:
  2489                           	opt callstack 28
  2490                           
  2491                           ;./functions.c: 729:     if (raceColor[0]){
  2492                           
  2493                           ;incstack = 0
  2494  0071E0  0100               	movlb	0	; () banked
  2495  0071E2  51BA               	movf	_raceColor& (0+255),w,b
  2496  0071E4  B4D8               	btfsc	status,2,c
  2497  0071E6  D003               	goto	l2799
  2498                           
  2499                           ; BSR set to: 0
  2500                           ;./functions.c: 730:         PORTD = 0b10111111;
  2501  0071E8  0EBF               	movlw	191
  2502  0071EA  6E83               	movwf	3971,c	;volatile
  2503                           
  2504                           ;./functions.c: 731:     }
  2505  0071EC  0012               	return	
  2506  0071EE                     l2799:
  2507                           
  2508                           ; BSR set to: 0
  2509  0071EE  51BB               	movf	(_raceColor+1)& (0+255),w,b
  2510  0071F0  B4D8               	btfsc	status,2,c
  2511  0071F2  D003               	goto	l2803
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;./functions.c: 733:         PORTD = 0b10000010;
  2515  0071F4  0E82               	movlw	130
  2516  0071F6  6E83               	movwf	3971,c	;volatile
  2517                           
  2518                           ;./functions.c: 734:     }
  2519  0071F8  0012               	return	
  2520  0071FA                     l2803:
  2521                           
  2522                           ; BSR set to: 0
  2523  0071FA  51BC               	movf	(_raceColor+2)& (0+255),w,b
  2524  0071FC  B4D8               	btfsc	status,2,c
  2525  0071FE  D003               	goto	l2807
  2526                           
  2527                           ; BSR set to: 0
  2528                           ;./functions.c: 736:         PORTD = 0b10001000;
  2529  007200  0E88               	movlw	136
  2530  007202  6E83               	movwf	3971,c	;volatile
  2531                           
  2532                           ;./functions.c: 737:     }
  2533  007204  0012               	return	
  2534  007206                     l2807:
  2535                           
  2536                           ; BSR set to: 0
  2537  007206  51BD               	movf	(_raceColor+3)& (0+255),w,b
  2538  007208  B4D8               	btfsc	status,2,c
  2539  00720A  D003               	goto	l2811
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;./functions.c: 739:         PORTD = 0b10000000;
  2543  00720C  0E80               	movlw	128
  2544  00720E  6E83               	movwf	3971,c	;volatile
  2545                           
  2546                           ;./functions.c: 740:     }
  2547  007210  0012               	return	
  2548  007212                     l2811:
  2549                           
  2550                           ; BSR set to: 0
  2551  007212  51BE               	movf	(_raceColor+4)& (0+255),w,b
  2552  007214  B4D8               	btfsc	status,2,c
  2553  007216  0012               	return	
  2554                           
  2555                           ; BSR set to: 0
  2556                           ;./functions.c: 742:         PORTD = 0b11001000;
  2557  007218  0EC8               	movlw	200
  2558  00721A  6E83               	movwf	3971,c	;volatile
  2559  00721C  0012               	return	
  2560  00721E                     __end_of_displayRaceColor:
  2561                           	opt callstack 0
  2562                           
  2563 ;; *************** function _displayColorDetected *****************
  2564 ;; Defined at:
  2565 ;;		line 663 in file "./functions.c"
  2566 ;; Parameters:    Size  Location     Type
  2567 ;;  sensor          1    wreg     unsigned char 
  2568 ;; Auto vars:     Size  Location     Type
  2569 ;;  sensor          1    2[COMRAM] unsigned char 
  2570 ;; Return value:  Size  Location     Type
  2571 ;;                  1    wreg      void 
  2572 ;; Registers used:
  2573 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2574 ;; Tracked objects:
  2575 ;;		On entry : 0/0
  2576 ;;		On exit  : 0/0
  2577 ;;		Unchanged: 0/0
  2578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2579 ;;      Params:         0       0       0       0       0       0       0
  2580 ;;      Locals:         1       0       0       0       0       0       0
  2581 ;;      Temps:          2       0       0       0       0       0       0
  2582 ;;      Totals:         3       0       0       0       0       0       0
  2583 ;;Total ram usage:        3 bytes
  2584 ;; Hardware stack levels used:    1
  2585 ;; This function calls:
  2586 ;;		Nothing
  2587 ;; This function is called by:
  2588 ;;		_navigate
  2589 ;; This function uses a non-reentrant model
  2590 ;;
  2591                           
  2592                           	psect	text17
  2593  0076F2                     __ptext17:
  2594                           	opt callstack 0
  2595  0076F2                     _displayColorDetected:
  2596                           	opt callstack 28
  2597                           
  2598                           ; BSR set to: 0
  2599                           ;incstack = 0
  2600                           ;displayColorDetected@sensor stored from wreg
  2601  0076F2  6E03               	movwf	displayColorDetected@sensor,c
  2602                           
  2603                           ;./functions.c: 664:     switch (colorsDetected[sensor])
  2604  0076F4  D024               	goto	l2847
  2605  0076F6                     l428:
  2606                           
  2607                           ;./functions.c: 667:         PORTAbits.RA0 = 1;
  2608  0076F6  8080               	bsf	3968,0,c	;volatile
  2609                           
  2610                           ;./functions.c: 668:         PORTAbits.RA1 = 0;
  2611  0076F8  9280               	bcf	3968,1,c	;volatile
  2612                           
  2613                           ;./functions.c: 669:         PORTAbits.RA2 = 0;
  2614  0076FA  9480               	bcf	3968,2,c	;volatile
  2615                           
  2616                           ;./functions.c: 670:         PORTAbits.RA3 = 0;
  2617  0076FC  9680               	bcf	3968,3,c	;volatile
  2618                           
  2619                           ;./functions.c: 671:         PORTAbits.RA4 = 0;
  2620  0076FE  9880               	bcf	3968,4,c	;volatile
  2621                           
  2622                           ;./functions.c: 672:         break;
  2623  007700  0012               	return	
  2624  007702                     l430:
  2625                           
  2626                           ;./functions.c: 674:         PORTAbits.RA0 = 0;
  2627  007702  9080               	bcf	3968,0,c	;volatile
  2628                           
  2629                           ;./functions.c: 675:         PORTAbits.RA1 = 1;
  2630  007704  8280               	bsf	3968,1,c	;volatile
  2631                           
  2632                           ;./functions.c: 676:         PORTAbits.RA2 = 0;
  2633  007706  9480               	bcf	3968,2,c	;volatile
  2634                           
  2635                           ;./functions.c: 677:         PORTAbits.RA3 = 0;
  2636  007708  9680               	bcf	3968,3,c	;volatile
  2637                           
  2638                           ;./functions.c: 678:         PORTAbits.RA4 = 0;
  2639  00770A  9880               	bcf	3968,4,c	;volatile
  2640                           
  2641                           ;./functions.c: 679:         break;
  2642  00770C  0012               	return	
  2643  00770E                     l431:
  2644                           
  2645                           ;./functions.c: 681:         PORTAbits.RA0 = 0;
  2646  00770E  9080               	bcf	3968,0,c	;volatile
  2647                           
  2648                           ;./functions.c: 682:         PORTAbits.RA1 = 0;
  2649  007710  9280               	bcf	3968,1,c	;volatile
  2650                           
  2651                           ;./functions.c: 683:         PORTAbits.RA2 = 1;
  2652  007712  8480               	bsf	3968,2,c	;volatile
  2653                           
  2654                           ;./functions.c: 684:         PORTAbits.RA3 = 0;
  2655  007714  9680               	bcf	3968,3,c	;volatile
  2656                           
  2657                           ;./functions.c: 685:         PORTAbits.RA4 = 0;
  2658  007716  9880               	bcf	3968,4,c	;volatile
  2659                           
  2660                           ;./functions.c: 686:         break;
  2661  007718  0012               	return	
  2662  00771A                     l432:
  2663                           
  2664                           ;./functions.c: 688:         PORTAbits.RA0 = 0;
  2665  00771A  9080               	bcf	3968,0,c	;volatile
  2666                           
  2667                           ;./functions.c: 689:         PORTAbits.RA1 = 0;
  2668  00771C  9280               	bcf	3968,1,c	;volatile
  2669                           
  2670                           ;./functions.c: 690:         PORTAbits.RA2 = 0;
  2671  00771E  9480               	bcf	3968,2,c	;volatile
  2672                           
  2673                           ;./functions.c: 691:         PORTAbits.RA3 = 1;
  2674  007720  8680               	bsf	3968,3,c	;volatile
  2675                           
  2676                           ;./functions.c: 692:         PORTAbits.RA4 = 0;
  2677  007722  9880               	bcf	3968,4,c	;volatile
  2678                           
  2679                           ;./functions.c: 693:         break;
  2680  007724  0012               	return	
  2681  007726                     l433:
  2682                           
  2683                           ;./functions.c: 695:         PORTAbits.RA0 = 0;
  2684  007726  9080               	bcf	3968,0,c	;volatile
  2685                           
  2686                           ;./functions.c: 696:         PORTAbits.RA1 = 0;
  2687  007728  9280               	bcf	3968,1,c	;volatile
  2688                           
  2689                           ;./functions.c: 697:         PORTAbits.RA2 = 0;
  2690  00772A  9480               	bcf	3968,2,c	;volatile
  2691                           
  2692                           ;./functions.c: 698:         PORTAbits.RA3 = 0;
  2693  00772C  9680               	bcf	3968,3,c	;volatile
  2694                           
  2695                           ;./functions.c: 699:         PORTAbits.RA4 = 1;
  2696  00772E  8880               	bsf	3968,4,c	;volatile
  2697                           
  2698                           ;./functions.c: 700:         break;
  2699  007730  0012               	return	
  2700  007732                     l434:
  2701                           
  2702                           ;./functions.c: 703:         PORTAbits.RA0 = 1;
  2703  007732  8080               	bsf	3968,0,c	;volatile
  2704                           
  2705                           ;./functions.c: 704:         PORTAbits.RA1 = 1;
  2706  007734  8280               	bsf	3968,1,c	;volatile
  2707                           
  2708                           ;./functions.c: 705:         PORTAbits.RA2 = 1;
  2709  007736  8480               	bsf	3968,2,c	;volatile
  2710                           
  2711                           ;./functions.c: 706:         PORTAbits.RA3 = 1;
  2712  007738  8680               	bsf	3968,3,c	;volatile
  2713                           
  2714                           ;./functions.c: 707:         PORTAbits.RA4 = 1;
  2715  00773A  8880               	bsf	3968,4,c	;volatile
  2716                           
  2717                           ;./functions.c: 708:         break;
  2718  00773C  0012               	return	
  2719  00773E                     l2847:
  2720  00773E  0EE9               	movlw	low _colorsDetected
  2721  007740  2403               	addwf	displayColorDetected@sensor,w,c
  2722  007742  6ED9               	movwf	fsr2l,c
  2723  007744  6ADA               	clrf	fsr2h,c
  2724  007746  0E00               	movlw	high _colorsDetected
  2725  007748  22DA               	addwfc	fsr2h,f,c
  2726  00774A  50DF               	movf	indf2,w,c
  2727  00774C  6E01               	movwf	??_displayColorDetected& (0+255),c
  2728  00774E  6A02               	clrf	(??_displayColorDetected+1)& (0+255),c
  2729                           
  2730                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2731                           ; Switch size 1, requested type "simple"
  2732                           ; Number of cases is 1, Range of values is 0 to 0
  2733                           ; switch strategies available:
  2734                           ; Name         Instructions Cycles
  2735                           ; simple_byte            4     3 (average)
  2736                           ;	Chosen strategy is simple_byte
  2737  007750  5002               	movf	??_displayColorDetected+1,w,c
  2738  007752  0A00               	xorlw	0	; case 0
  2739  007754  A4D8               	btfss	status,2,c
  2740  007756  D7ED               	goto	l434
  2741                           
  2742                           ; Switch size 1, requested type "simple"
  2743                           ; Number of cases is 5, Range of values is 66 to 110
  2744                           ; switch strategies available:
  2745                           ; Name         Instructions Cycles
  2746                           ; simple_byte           16     9 (average)
  2747                           ;	Chosen strategy is simple_byte
  2748  007758  5001               	movf	??_displayColorDetected,w,c
  2749  00775A  0A42               	xorlw	66	; case 66
  2750  00775C  B4D8               	btfsc	status,2,c
  2751  00775E  D7DD               	goto	l432
  2752  007760  0A05               	xorlw	5	; case 71
  2753  007762  B4D8               	btfsc	status,2,c
  2754  007764  D7CE               	goto	l430
  2755  007766  0A15               	xorlw	21	; case 82
  2756  007768  B4D8               	btfsc	status,2,c
  2757  00776A  D7D1               	goto	l431
  2758  00776C  0A05               	xorlw	5	; case 87
  2759  00776E  B4D8               	btfsc	status,2,c
  2760  007770  D7C2               	goto	l428
  2761  007772  0A39               	xorlw	57	; case 110
  2762  007774  B4D8               	btfsc	status,2,c
  2763  007776  D7D7               	goto	l433
  2764  007778  D7DC               	goto	l434
  2765  00777A                     __end_of_displayColorDetected:
  2766                           	opt callstack 0
  2767                           
  2768 ;; *************** function _determineDirection *****************
  2769 ;; Defined at:
  2770 ;;		line 571 in file "./functions.c"
  2771 ;; Parameters:    Size  Location     Type
  2772 ;;		None
  2773 ;; Auto vars:     Size  Location     Type
  2774 ;;		None
  2775 ;; Return value:  Size  Location     Type
  2776 ;;                  1    wreg      void 
  2777 ;; Registers used:
  2778 ;;		wreg, status,2, status,0, cstack
  2779 ;; Tracked objects:
  2780 ;;		On entry : 0/0
  2781 ;;		On exit  : 0/0
  2782 ;;		Unchanged: 0/0
  2783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2784 ;;      Params:         0       0       0       0       0       0       0
  2785 ;;      Locals:         0       0       0       0       0       0       0
  2786 ;;      Temps:          0       0       0       0       0       0       0
  2787 ;;      Totals:         0       0       0       0       0       0       0
  2788 ;;Total ram usage:        0 bytes
  2789 ;; Hardware stack levels used:    1
  2790 ;; Hardware stack levels required when called:    2
  2791 ;; This function calls:
  2792 ;;		_hardLeft
  2793 ;;		_hardRight
  2794 ;;		_left
  2795 ;;		_right
  2796 ;;		_searchMode
  2797 ;;		_straight
  2798 ;; This function is called by:
  2799 ;;		_navigate
  2800 ;; This function uses a non-reentrant model
  2801 ;;
  2802                           
  2803                           	psect	text18
  2804  00766E                     __ptext18:
  2805                           	opt callstack 0
  2806  00766E                     _determineDirection:
  2807                           	opt callstack 26
  2808                           
  2809                           ;./functions.c: 574:     static unsigned char rc = 0;;./functions.c: 575:     if (rc == 
      +                          0){
  2810                           
  2811                           ;incstack = 0
  2812  00766E  505C               	movf	determineDirection@rc,w,c
  2813  007670  A4D8               	btfss	status,2,c
  2814  007672  D018               	goto	l377
  2815                           
  2816                           ;./functions.c: 576:         if (raceColor[0])
  2817  007674  0100               	movlb	0	; () banked
  2818  007676  51BA               	movf	_raceColor& (0+255),w,b
  2819  007678  B4D8               	btfsc	status,2,c
  2820  00767A  D002               	goto	l2859
  2821                           
  2822                           ; BSR set to: 0
  2823                           ;./functions.c: 577:         {;./functions.c: 578:             rc = 'W';
  2824  00767C  0E57               	movlw	87
  2825  00767E  D011               	goto	L3
  2826  007680                     l2859:
  2827                           
  2828                           ; BSR set to: 0
  2829  007680  51BB               	movf	(_raceColor+1)& (0+255),w,b
  2830  007682  B4D8               	btfsc	status,2,c
  2831  007684  D002               	goto	l2863
  2832                           
  2833                           ; BSR set to: 0
  2834                           ;./functions.c: 581:         {;./functions.c: 582:             rc = 'G';
  2835  007686  0E47               	movlw	71
  2836  007688  D00C               	goto	L3
  2837  00768A                     l2863:
  2838                           
  2839                           ; BSR set to: 0
  2840  00768A  51BC               	movf	(_raceColor+2)& (0+255),w,b
  2841  00768C  B4D8               	btfsc	status,2,c
  2842  00768E  D002               	goto	l2867
  2843  007690                     u1640:
  2844                           
  2845                           ; BSR set to: 0
  2846                           ;./functions.c: 585:         {;./functions.c: 586:             rc = 'B';
  2847  007690  0E42               	movlw	66
  2848  007692  D007               	goto	L3
  2849  007694                     l2867:
  2850                           
  2851                           ; BSR set to: 0
  2852  007694  51BD               	movf	(_raceColor+3)& (0+255),w,b
  2853  007696  A4D8               	btfss	status,2,c
  2854  007698  D7FB               	goto	u1640
  2855                           
  2856                           ; BSR set to: 0
  2857  00769A  51BE               	movf	(_raceColor+4)& (0+255),w,b
  2858  00769C  B4D8               	btfsc	status,2,c
  2859  00769E  D002               	goto	l377
  2860                           
  2861                           ; BSR set to: 0
  2862                           ;./functions.c: 593:         {;./functions.c: 594:             rc = 'n';
  2863  0076A0  0E6E               	movlw	110
  2864  0076A2                     L3:
  2865  0076A2  6E5C               	movwf	determineDirection@rc,c
  2866  0076A4                     l377:
  2867                           
  2868                           ;./functions.c: 598:     if (colorsDetected[2] == rc){
  2869                           
  2870                           ; BSR set to: 0
  2871  0076A4  505C               	movf	determineDirection@rc,w,c
  2872  0076A6  0100               	movlb	0	; () banked
  2873  0076A8  19EB               	xorwf	(_colorsDetected+2)& (0+255),w,b
  2874  0076AA  A4D8               	btfss	status,2,c
  2875  0076AC  D003               	goto	l2879
  2876                           
  2877                           ; BSR set to: 0
  2878                           ;./functions.c: 599:         straight();
  2879  0076AE  EC28  F038         	call	_straight	;wreg free
  2880                           
  2881                           ;./functions.c: 600:     }
  2882  0076B2  0012               	return	
  2883  0076B4                     l2879:
  2884                           
  2885                           ; BSR set to: 0
  2886  0076B4  505C               	movf	determineDirection@rc,w,c
  2887  0076B6  19EA               	xorwf	(_colorsDetected+1)& (0+255),w,b
  2888  0076B8  A4D8               	btfss	status,2,c
  2889  0076BA  D003               	goto	l2883
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;./functions.c: 602:         left();
  2893  0076BC  EC0E  F038         	call	_left	;wreg free
  2894                           
  2895                           ;./functions.c: 603:     }
  2896  0076C0  0012               	return	
  2897  0076C2                     l2883:
  2898                           
  2899                           ; BSR set to: 0
  2900  0076C2  505C               	movf	determineDirection@rc,w,c
  2901  0076C4  19EC               	xorwf	(_colorsDetected+3)& (0+255),w,b
  2902  0076C6  A4D8               	btfss	status,2,c
  2903  0076C8  D003               	goto	l2887
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;./functions.c: 605:         right();
  2907  0076CA  EC1B  F038         	call	_right	;wreg free
  2908                           
  2909                           ;./functions.c: 606:     }
  2910  0076CE  0012               	return	
  2911  0076D0                     l2887:
  2912                           
  2913                           ; BSR set to: 0
  2914  0076D0  505C               	movf	determineDirection@rc,w,c
  2915  0076D2  19E9               	xorwf	_colorsDetected& (0+255),w,b
  2916  0076D4  A4D8               	btfss	status,2,c
  2917  0076D6  D003               	goto	l2891
  2918                           
  2919                           ; BSR set to: 0
  2920                           ;./functions.c: 608:         hardLeft();
  2921  0076D8  ECF4  F037         	call	_hardLeft	;wreg free
  2922                           
  2923                           ;./functions.c: 609:     }
  2924  0076DC  0012               	return	
  2925  0076DE                     l2891:
  2926                           
  2927                           ; BSR set to: 0
  2928  0076DE  505C               	movf	determineDirection@rc,w,c
  2929  0076E0  19ED               	xorwf	(_colorsDetected+4)& (0+255),w,b
  2930  0076E2  A4D8               	btfss	status,2,c
  2931  0076E4  D003               	goto	l2895
  2932                           
  2933                           ; BSR set to: 0
  2934                           ;./functions.c: 611:         hardRight();
  2935  0076E6  EC01  F038         	call	_hardRight	;wreg free
  2936                           
  2937                           ;./functions.c: 612:     }
  2938  0076EA  0012               	return	
  2939  0076EC                     l2895:
  2940                           
  2941                           ; BSR set to: 0
  2942                           ;./functions.c: 614:         searchMode();
  2943  0076EC  ECDE  F037         	call	_searchMode	;wreg free
  2944  0076F0  0012               	return		;funcret
  2945  0076F2                     __end_of_determineDirection:
  2946                           	opt callstack 0
  2947                           
  2948 ;; *************** function _straight *****************
  2949 ;; Defined at:
  2950 ;;		line 492 in file "./functions.c"
  2951 ;; Parameters:    Size  Location     Type
  2952 ;;		None
  2953 ;; Auto vars:     Size  Location     Type
  2954 ;;		None
  2955 ;; Return value:  Size  Location     Type
  2956 ;;                  1    wreg      void 
  2957 ;; Registers used:
  2958 ;;		wreg, status,2
  2959 ;; Tracked objects:
  2960 ;;		On entry : 0/0
  2961 ;;		On exit  : 0/0
  2962 ;;		Unchanged: 0/0
  2963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2964 ;;      Params:         0       0       0       0       0       0       0
  2965 ;;      Locals:         0       0       0       0       0       0       0
  2966 ;;      Temps:          0       0       0       0       0       0       0
  2967 ;;      Totals:         0       0       0       0       0       0       0
  2968 ;;Total ram usage:        0 bytes
  2969 ;; Hardware stack levels used:    1
  2970 ;; This function calls:
  2971 ;;		Nothing
  2972 ;; This function is called by:
  2973 ;;		_determineDirection
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977                           	psect	text19
  2978  007050                     __ptext19:
  2979                           	opt callstack 0
  2980  007050                     _straight:
  2981                           	opt callstack 27
  2982                           
  2983                           ;./functions.c: 493:     PORTAbits.RA5 = 1;
  2984                           
  2985                           ;incstack = 0
  2986  007050  8A80               	bsf	3968,5,c	;volatile
  2987                           
  2988                           ;./functions.c: 494:     PORTAbits.RA6 = 0;
  2989  007052  9C80               	bcf	3968,6,c	;volatile
  2990                           
  2991                           ;./functions.c: 495:     PORTAbits.RA7 = 0;
  2992  007054  9E80               	bcf	3968,7,c	;volatile
  2993                           
  2994                           ;./functions.c: 497:     PORTCbits.RC0 = 0;
  2995  007056  9082               	bcf	3970,0,c	;volatile
  2996                           
  2997                           ;./functions.c: 498:     PORTCbits.RC1 = 1;
  2998  007058  8282               	bsf	3970,1,c	;volatile
  2999                           
  3000                           ;./functions.c: 500:     PORTEbits.RE0 = 0;
  3001  00705A  9084               	bcf	3972,0,c	;volatile
  3002                           
  3003                           ;./functions.c: 501:     PORTEbits.RE1 = 1;
  3004  00705C  8284               	bsf	3972,1,c	;volatile
  3005                           
  3006                           ;./functions.c: 503:     CCPR1L = 250;
  3007  00705E  0EFA               	movlw	250
  3008  007060  6EBE               	movwf	4030,c	;volatile
  3009                           
  3010                           ;./functions.c: 504:     CCPR5L = 250;
  3011  007062  0EFA               	movlw	250
  3012  007064  010F               	movlb	15	; () banked
  3013  007066  6F55               	movwf	85,b	;volatile
  3014                           
  3015                           ; BSR set to: 15
  3016  007068  0012               	return		;funcret
  3017  00706A                     __end_of_straight:
  3018                           	opt callstack 0
  3019                           
  3020 ;; *************** function _searchMode *****************
  3021 ;; Defined at:
  3022 ;;		line 476 in file "./functions.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;		None
  3025 ;; Auto vars:     Size  Location     Type
  3026 ;;		None
  3027 ;; Return value:  Size  Location     Type
  3028 ;;                  1    wreg      void 
  3029 ;; Registers used:
  3030 ;;		wreg, status,2, cstack
  3031 ;; Tracked objects:
  3032 ;;		On entry : 0/0
  3033 ;;		On exit  : 0/0
  3034 ;;		Unchanged: 0/0
  3035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3036 ;;      Params:         0       0       0       0       0       0       0
  3037 ;;      Locals:         0       0       0       0       0       0       0
  3038 ;;      Temps:          0       0       0       0       0       0       0
  3039 ;;      Totals:         0       0       0       0       0       0       0
  3040 ;;Total ram usage:        0 bytes
  3041 ;; Hardware stack levels used:    1
  3042 ;; Hardware stack levels required when called:    1
  3043 ;; This function calls:
  3044 ;;		_timer1setup
  3045 ;; This function is called by:
  3046 ;;		_determineDirection
  3047 ;; This function uses a non-reentrant model
  3048 ;;
  3049                           
  3050                           	psect	text20
  3051  006FBC                     __ptext20:
  3052                           	opt callstack 0
  3053  006FBC                     _searchMode:
  3054                           	opt callstack 26
  3055                           
  3056                           ;./functions.c: 477:     timer1setup();
  3057                           
  3058                           ; BSR set to: 15
  3059                           ;incstack = 0
  3060  006FBC  ECE8  F037         	call	_timer1setup	;wreg free
  3061                           
  3062                           ;./functions.c: 478:     while(!PIR1bits.TMR1IF){
  3063  006FC0  D003               	goto	l350
  3064  006FC2                     l351:
  3065                           
  3066                           ;./functions.c: 479:         PORTAbits.RA5 = 1;
  3067  006FC2  8A80               	bsf	3968,5,c	;volatile
  3068                           
  3069                           ;./functions.c: 480:         PORTAbits.RA6 = 1;
  3070  006FC4  8C80               	bsf	3968,6,c	;volatile
  3071                           
  3072                           ;./functions.c: 481:         PORTAbits.RA7 = 1;
  3073  006FC6  8E80               	bsf	3968,7,c	;volatile
  3074  006FC8                     l350:
  3075                           
  3076                           ;./functions.c: 478:     while(!PIR1bits.TMR1IF){
  3077  006FC8  A09E               	btfss	3998,0,c	;volatile
  3078  006FCA  D7FB               	goto	l351
  3079                           
  3080                           ;./functions.c: 483:     PORTD = 0xFF;
  3081  006FCC  6883               	setf	3971,c	;volatile
  3082                           
  3083                           ;./functions.c: 484:     return;
  3084  006FCE  0012               	return		;funcret
  3085  006FD0                     __end_of_searchMode:
  3086                           	opt callstack 0
  3087                           
  3088 ;; *************** function _timer1setup *****************
  3089 ;; Defined at:
  3090 ;;		line 966 in file "./functions.c"
  3091 ;; Parameters:    Size  Location     Type
  3092 ;;		None
  3093 ;; Auto vars:     Size  Location     Type
  3094 ;;		None
  3095 ;; Return value:  Size  Location     Type
  3096 ;;                  1    wreg      void 
  3097 ;; Registers used:
  3098 ;;		wreg, status,2
  3099 ;; Tracked objects:
  3100 ;;		On entry : 0/0
  3101 ;;		On exit  : 0/0
  3102 ;;		Unchanged: 0/0
  3103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3104 ;;      Params:         0       0       0       0       0       0       0
  3105 ;;      Locals:         0       0       0       0       0       0       0
  3106 ;;      Temps:          0       0       0       0       0       0       0
  3107 ;;      Totals:         0       0       0       0       0       0       0
  3108 ;;Total ram usage:        0 bytes
  3109 ;; Hardware stack levels used:    1
  3110 ;; This function calls:
  3111 ;;		Nothing
  3112 ;; This function is called by:
  3113 ;;		_searchMode
  3114 ;; This function uses a non-reentrant model
  3115 ;;
  3116                           
  3117                           	psect	text21
  3118  006FD0                     __ptext21:
  3119                           	opt callstack 0
  3120  006FD0                     _timer1setup:
  3121                           	opt callstack 26
  3122                           
  3123                           ;./functions.c: 967:     T1CON = 0b00110010;
  3124                           
  3125                           ;incstack = 0
  3126  006FD0  0E32               	movlw	50
  3127  006FD2  6ECD               	movwf	4045,c	;volatile
  3128                           
  3129                           ;./functions.c: 968:     INTCONbits.PEIE = 1;
  3130  006FD4  8CF2               	bsf	4082,6,c	;volatile
  3131                           
  3132                           ;./functions.c: 969:     INTCONbits.GIE = 1;
  3133  006FD6  8EF2               	bsf	4082,7,c	;volatile
  3134                           
  3135                           ;./functions.c: 970:     PIE1bits.TMR1IE = 1;
  3136  006FD8  809D               	bsf	3997,0,c	;volatile
  3137                           
  3138                           ;./functions.c: 971:     PIR1bits.TMR1IF = 0;
  3139  006FDA  909E               	bcf	3998,0,c	;volatile
  3140                           
  3141                           ;./functions.c: 972:     TMR1 = 0;
  3142  006FDC  0E00               	movlw	0
  3143  006FDE  6ECF               	movwf	4047,c	;volatile
  3144  006FE0  0E00               	movlw	0
  3145  006FE2  6ECE               	movwf	4046,c	;volatile
  3146                           
  3147                           ;./functions.c: 973:     T1CONbits.TMR1ON = 1;
  3148  006FE4  80CD               	bsf	4045,0,c	;volatile
  3149  006FE6  0012               	return		;funcret
  3150  006FE8                     __end_of_timer1setup:
  3151                           	opt callstack 0
  3152                           
  3153 ;; *************** function _right *****************
  3154 ;; Defined at:
  3155 ;;		line 539 in file "./functions.c"
  3156 ;; Parameters:    Size  Location     Type
  3157 ;;		None
  3158 ;; Auto vars:     Size  Location     Type
  3159 ;;		None
  3160 ;; Return value:  Size  Location     Type
  3161 ;;                  1    wreg      void 
  3162 ;; Registers used:
  3163 ;;		wreg, status,2
  3164 ;; Tracked objects:
  3165 ;;		On entry : 0/0
  3166 ;;		On exit  : 0/0
  3167 ;;		Unchanged: 0/0
  3168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3169 ;;      Params:         0       0       0       0       0       0       0
  3170 ;;      Locals:         0       0       0       0       0       0       0
  3171 ;;      Temps:          0       0       0       0       0       0       0
  3172 ;;      Totals:         0       0       0       0       0       0       0
  3173 ;;Total ram usage:        0 bytes
  3174 ;; Hardware stack levels used:    1
  3175 ;; This function calls:
  3176 ;;		Nothing
  3177 ;; This function is called by:
  3178 ;;		_determineDirection
  3179 ;; This function uses a non-reentrant model
  3180 ;;
  3181                           
  3182                           	psect	text22
  3183  007036                     __ptext22:
  3184                           	opt callstack 0
  3185  007036                     _right:
  3186                           	opt callstack 27
  3187                           
  3188                           ;./functions.c: 540:     PORTAbits.RA5 = 0;
  3189                           
  3190                           ;incstack = 0
  3191  007036  9A80               	bcf	3968,5,c	;volatile
  3192                           
  3193                           ;./functions.c: 541:     PORTAbits.RA6 = 1;
  3194  007038  8C80               	bsf	3968,6,c	;volatile
  3195                           
  3196                           ;./functions.c: 542:     PORTAbits.RA7 = 0;
  3197  00703A  9E80               	bcf	3968,7,c	;volatile
  3198                           
  3199                           ;./functions.c: 544:     PORTCbits.RC0 = 0;
  3200  00703C  9082               	bcf	3970,0,c	;volatile
  3201                           
  3202                           ;./functions.c: 545:     PORTCbits.RC1 = 1;
  3203  00703E  8282               	bsf	3970,1,c	;volatile
  3204                           
  3205                           ;./functions.c: 547:     PORTEbits.RE0 = 0;
  3206  007040  9084               	bcf	3972,0,c	;volatile
  3207                           
  3208                           ;./functions.c: 548:     PORTEbits.RE1 = 1;
  3209  007042  8284               	bsf	3972,1,c	;volatile
  3210                           
  3211                           ;./functions.c: 550:     CCPR1L = 250;
  3212  007044  0EFA               	movlw	250
  3213  007046  6EBE               	movwf	4030,c	;volatile
  3214                           
  3215                           ;./functions.c: 551:     CCPR5L = 150;
  3216  007048  0E96               	movlw	150
  3217  00704A  010F               	movlb	15	; () banked
  3218  00704C  6F55               	movwf	85,b	;volatile
  3219                           
  3220                           ; BSR set to: 15
  3221  00704E  0012               	return		;funcret
  3222  007050                     __end_of_right:
  3223                           	opt callstack 0
  3224                           
  3225 ;; *************** function _left *****************
  3226 ;; Defined at:
  3227 ;;		line 507 in file "./functions.c"
  3228 ;; Parameters:    Size  Location     Type
  3229 ;;		None
  3230 ;; Auto vars:     Size  Location     Type
  3231 ;;		None
  3232 ;; Return value:  Size  Location     Type
  3233 ;;                  1    wreg      void 
  3234 ;; Registers used:
  3235 ;;		wreg, status,2
  3236 ;; Tracked objects:
  3237 ;;		On entry : 0/0
  3238 ;;		On exit  : 0/0
  3239 ;;		Unchanged: 0/0
  3240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3241 ;;      Params:         0       0       0       0       0       0       0
  3242 ;;      Locals:         0       0       0       0       0       0       0
  3243 ;;      Temps:          0       0       0       0       0       0       0
  3244 ;;      Totals:         0       0       0       0       0       0       0
  3245 ;;Total ram usage:        0 bytes
  3246 ;; Hardware stack levels used:    1
  3247 ;; This function calls:
  3248 ;;		Nothing
  3249 ;; This function is called by:
  3250 ;;		_determineDirection
  3251 ;; This function uses a non-reentrant model
  3252 ;;
  3253                           
  3254                           	psect	text23
  3255  00701C                     __ptext23:
  3256                           	opt callstack 0
  3257  00701C                     _left:
  3258                           	opt callstack 27
  3259                           
  3260                           ;./functions.c: 508:     PORTAbits.RA5 = 0;
  3261                           
  3262                           ; BSR set to: 15
  3263                           ;incstack = 0
  3264  00701C  9A80               	bcf	3968,5,c	;volatile
  3265                           
  3266                           ;./functions.c: 509:     PORTAbits.RA6 = 0;
  3267  00701E  9C80               	bcf	3968,6,c	;volatile
  3268                           
  3269                           ;./functions.c: 510:     PORTAbits.RA7 = 1;
  3270  007020  8E80               	bsf	3968,7,c	;volatile
  3271                           
  3272                           ;./functions.c: 512:     PORTCbits.RC0 = 0;
  3273  007022  9082               	bcf	3970,0,c	;volatile
  3274                           
  3275                           ;./functions.c: 513:     PORTCbits.RC1 = 1;
  3276  007024  8282               	bsf	3970,1,c	;volatile
  3277                           
  3278                           ;./functions.c: 515:     PORTEbits.RE0 = 0;
  3279  007026  9084               	bcf	3972,0,c	;volatile
  3280                           
  3281                           ;./functions.c: 516:     PORTEbits.RE1 = 1;
  3282  007028  8284               	bsf	3972,1,c	;volatile
  3283                           
  3284                           ;./functions.c: 518:     CCPR1L = 150;
  3285  00702A  0E96               	movlw	150
  3286  00702C  6EBE               	movwf	4030,c	;volatile
  3287                           
  3288                           ;./functions.c: 519:     CCPR5L = 250;
  3289  00702E  0EFA               	movlw	250
  3290  007030  010F               	movlb	15	; () banked
  3291  007032  6F55               	movwf	85,b	;volatile
  3292                           
  3293                           ; BSR set to: 15
  3294  007034  0012               	return		;funcret
  3295  007036                     __end_of_left:
  3296                           	opt callstack 0
  3297                           
  3298 ;; *************** function _hardRight *****************
  3299 ;; Defined at:
  3300 ;;		line 555 in file "./functions.c"
  3301 ;; Parameters:    Size  Location     Type
  3302 ;;		None
  3303 ;; Auto vars:     Size  Location     Type
  3304 ;;		None
  3305 ;; Return value:  Size  Location     Type
  3306 ;;                  1    wreg      void 
  3307 ;; Registers used:
  3308 ;;		wreg, status,2
  3309 ;; Tracked objects:
  3310 ;;		On entry : 0/0
  3311 ;;		On exit  : 0/0
  3312 ;;		Unchanged: 0/0
  3313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3314 ;;      Params:         0       0       0       0       0       0       0
  3315 ;;      Locals:         0       0       0       0       0       0       0
  3316 ;;      Temps:          0       0       0       0       0       0       0
  3317 ;;      Totals:         0       0       0       0       0       0       0
  3318 ;;Total ram usage:        0 bytes
  3319 ;; Hardware stack levels used:    1
  3320 ;; This function calls:
  3321 ;;		Nothing
  3322 ;; This function is called by:
  3323 ;;		_determineDirection
  3324 ;; This function uses a non-reentrant model
  3325 ;;
  3326                           
  3327                           	psect	text24
  3328  007002                     __ptext24:
  3329                           	opt callstack 0
  3330  007002                     _hardRight:
  3331                           	opt callstack 27
  3332                           
  3333                           ;./functions.c: 556:     PORTAbits.RA5 = 0;
  3334                           
  3335                           ; BSR set to: 15
  3336                           ;incstack = 0
  3337  007002  9A80               	bcf	3968,5,c	;volatile
  3338                           
  3339                           ;./functions.c: 557:     PORTAbits.RA6 = 1;
  3340  007004  8C80               	bsf	3968,6,c	;volatile
  3341                           
  3342                           ;./functions.c: 558:     PORTAbits.RA7 = 0;
  3343  007006  9E80               	bcf	3968,7,c	;volatile
  3344                           
  3345                           ;./functions.c: 560:     PORTCbits.RC0 = 0;
  3346  007008  9082               	bcf	3970,0,c	;volatile
  3347                           
  3348                           ;./functions.c: 561:     PORTCbits.RC1 = 1;
  3349  00700A  8282               	bsf	3970,1,c	;volatile
  3350                           
  3351                           ;./functions.c: 563:     PORTEbits.RE0 = 0;
  3352  00700C  9084               	bcf	3972,0,c	;volatile
  3353                           
  3354                           ;./functions.c: 564:     PORTEbits.RE1 = 1;
  3355  00700E  8284               	bsf	3972,1,c	;volatile
  3356                           
  3357                           ;./functions.c: 566:     CCPR1L = 150;
  3358  007010  0E96               	movlw	150
  3359  007012  6EBE               	movwf	4030,c	;volatile
  3360                           
  3361                           ;./functions.c: 567:     CCPR5L = 50;
  3362  007014  0E32               	movlw	50
  3363  007016  010F               	movlb	15	; () banked
  3364  007018  6F55               	movwf	85,b	;volatile
  3365                           
  3366                           ; BSR set to: 15
  3367  00701A  0012               	return		;funcret
  3368  00701C                     __end_of_hardRight:
  3369                           	opt callstack 0
  3370                           
  3371 ;; *************** function _hardLeft *****************
  3372 ;; Defined at:
  3373 ;;		line 523 in file "./functions.c"
  3374 ;; Parameters:    Size  Location     Type
  3375 ;;		None
  3376 ;; Auto vars:     Size  Location     Type
  3377 ;;		None
  3378 ;; Return value:  Size  Location     Type
  3379 ;;                  1    wreg      void 
  3380 ;; Registers used:
  3381 ;;		wreg, status,2
  3382 ;; Tracked objects:
  3383 ;;		On entry : 0/0
  3384 ;;		On exit  : 0/0
  3385 ;;		Unchanged: 0/0
  3386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3387 ;;      Params:         0       0       0       0       0       0       0
  3388 ;;      Locals:         0       0       0       0       0       0       0
  3389 ;;      Temps:          0       0       0       0       0       0       0
  3390 ;;      Totals:         0       0       0       0       0       0       0
  3391 ;;Total ram usage:        0 bytes
  3392 ;; Hardware stack levels used:    1
  3393 ;; This function calls:
  3394 ;;		Nothing
  3395 ;; This function is called by:
  3396 ;;		_determineDirection
  3397 ;; This function uses a non-reentrant model
  3398 ;;
  3399                           
  3400                           	psect	text25
  3401  006FE8                     __ptext25:
  3402                           	opt callstack 0
  3403  006FE8                     _hardLeft:
  3404                           	opt callstack 27
  3405                           
  3406                           ;./functions.c: 524:     PORTAbits.RA5 = 0;
  3407                           
  3408                           ; BSR set to: 15
  3409                           ;incstack = 0
  3410  006FE8  9A80               	bcf	3968,5,c	;volatile
  3411                           
  3412                           ;./functions.c: 525:     PORTAbits.RA6 = 0;
  3413  006FEA  9C80               	bcf	3968,6,c	;volatile
  3414                           
  3415                           ;./functions.c: 526:     PORTAbits.RA7 = 1;
  3416  006FEC  8E80               	bsf	3968,7,c	;volatile
  3417                           
  3418                           ;./functions.c: 528:     PORTCbits.RC0 = 1;
  3419  006FEE  8082               	bsf	3970,0,c	;volatile
  3420                           
  3421                           ;./functions.c: 529:     PORTCbits.RC1 = 0;
  3422  006FF0  9282               	bcf	3970,1,c	;volatile
  3423                           
  3424                           ;./functions.c: 531:     PORTEbits.RE0 = 0;
  3425  006FF2  9084               	bcf	3972,0,c	;volatile
  3426                           
  3427                           ;./functions.c: 532:     PORTEbits.RE1 = 1;
  3428  006FF4  8284               	bsf	3972,1,c	;volatile
  3429                           
  3430                           ;./functions.c: 534:     CCPR1L = 50;
  3431  006FF6  0E32               	movlw	50
  3432  006FF8  6EBE               	movwf	4030,c	;volatile
  3433                           
  3434                           ;./functions.c: 535:     CCPR5L = 150;
  3435  006FFA  0E96               	movlw	150
  3436  006FFC  010F               	movlb	15	; () banked
  3437  006FFE  6F55               	movwf	85,b	;volatile
  3438                           
  3439                           ; BSR set to: 15
  3440  007000  0012               	return		;funcret
  3441  007002                     __end_of_hardLeft:
  3442                           	opt callstack 0
  3443                           
  3444 ;; *************** function _classifyColors *****************
  3445 ;; Defined at:
  3446 ;;		line 641 in file "./functions.c"
  3447 ;; Parameters:    Size  Location     Type
  3448 ;;		None
  3449 ;; Auto vars:     Size  Location     Type
  3450 ;;  a               1   14[COMRAM] unsigned char 
  3451 ;;  sensorRanges   10    4[COMRAM] PTR unsigned char [5]
  3452 ;;		 -> RRranges(5), Rranges(5), Mranges(5), Lranges(5), 
  3453 ;;		 -> LLranges(5), 
  3454 ;; Return value:  Size  Location     Type
  3455 ;;                  1    wreg      void 
  3456 ;; Registers used:
  3457 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3458 ;; Tracked objects:
  3459 ;;		On entry : 0/0
  3460 ;;		On exit  : 0/0
  3461 ;;		Unchanged: 0/0
  3462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3463 ;;      Params:         0       0       0       0       0       0       0
  3464 ;;      Locals:        11       0       0       0       0       0       0
  3465 ;;      Temps:          4       0       0       0       0       0       0
  3466 ;;      Totals:        15       0       0       0       0       0       0
  3467 ;;Total ram usage:       15 bytes
  3468 ;; Hardware stack levels used:    1
  3469 ;; This function calls:
  3470 ;;		Nothing
  3471 ;; This function is called by:
  3472 ;;		_navigate
  3473 ;; This function uses a non-reentrant model
  3474 ;;
  3475                           
  3476                           	psect	text26
  3477  0079C6                     __ptext26:
  3478                           	opt callstack 0
  3479  0079C6                     _classifyColors:
  3480                           	opt callstack 28
  3481                           
  3482                           ;./functions.c: 642:     unsigned char* sensorRanges[] = {LLranges, Lranges, Mranges, Rr
      +                          anges, RRranges};
  3483                           
  3484                           ; BSR set to: 15
  3485                           ;incstack = 0
  3486  0079C6  EE20  F0A6         	lfsr	2,classifyColors@F6061
  3487  0079CA  EE10  F005         	lfsr	1,classifyColors@sensorRanges
  3488  0079CE  0E09               	movlw	9
  3489  0079D0                     u1561:
  3490  0079D0  CFDB FFE3          	movff	plusw2,plusw1
  3491  0079D4  06E8               	decf	wreg,f,c
  3492  0079D6  E2FC               	bc	u1561
  3493                           
  3494                           ;./functions.c: 644:     for (unsigned char a = 0; a < 5; a++){
  3495  0079D8  0E00               	movlw	0
  3496  0079DA  6E0F               	movwf	classifyColors@a,c
  3497  0079DC                     l2825:
  3498                           
  3499                           ;./functions.c: 645:         if (sensorVals[a] < sensorRanges[a][0]){
  3500  0079DC  500F               	movf	classifyColors@a,w,c
  3501  0079DE  0D02               	mullw	2
  3502  0079E0  0E05               	movlw	low classifyColors@sensorRanges
  3503  0079E2  24F3               	addwf	prodl,w,c
  3504  0079E4  6ED9               	movwf	fsr2l,c
  3505  0079E6  0E00               	movlw	high classifyColors@sensorRanges
  3506  0079E8  20F4               	addwfc	prodh,w,c
  3507  0079EA  6EDA               	movwf	fsr2h,c
  3508  0079EC  CFDE F001          	movff	postinc2,??_classifyColors
  3509  0079F0  CFDD F002          	movff	postdec2,??_classifyColors+1
  3510  0079F4  C001  FFD9         	movff	??_classifyColors,fsr2l
  3511  0079F8  C002  FFDA         	movff	??_classifyColors+1,fsr2h
  3512  0079FC  0E50               	movlw	low _sensorVals
  3513  0079FE  240F               	addwf	classifyColors@a,w,c
  3514  007A00  6EE1               	movwf	fsr1l,c
  3515  007A02  6AE2               	clrf	fsr1h,c
  3516  007A04  0E00               	movlw	high _sensorVals
  3517  007A06  22E2               	addwfc	fsr1h,f,c
  3518  007A08  50DE               	movf	postinc2,w,c
  3519  007A0A  5CE6               	subwf	postinc1,w,c
  3520  007A0C  B0D8               	btfsc	status,0,c
  3521  007A0E  D008               	goto	l2829
  3522                           
  3523                           ;./functions.c: 646:             colorsDetected[a] = 'W';
  3524  007A10  0EE9               	movlw	low _colorsDetected
  3525  007A12  240F               	addwf	classifyColors@a,w,c
  3526  007A14  6ED9               	movwf	fsr2l,c
  3527  007A16  6ADA               	clrf	fsr2h,c
  3528  007A18  0E00               	movlw	high _colorsDetected
  3529  007A1A  22DA               	addwfc	fsr2h,f,c
  3530  007A1C  0E57               	movlw	87
  3531  007A1E  D047               	goto	L4
  3532  007A20                     l2829:
  3533  007A20  500F               	movf	classifyColors@a,w,c
  3534  007A22  0D02               	mullw	2
  3535  007A24  0E05               	movlw	low classifyColors@sensorRanges
  3536  007A26  24F3               	addwf	prodl,w,c
  3537  007A28  6ED9               	movwf	fsr2l,c
  3538  007A2A  0E00               	movlw	high classifyColors@sensorRanges
  3539  007A2C  20F4               	addwfc	prodh,w,c
  3540  007A2E  6EDA               	movwf	fsr2h,c
  3541  007A30  EE10 F001          	lfsr	1,1
  3542  007A34  50DE               	movf	postinc2,w,c
  3543  007A36  26E1               	addwf	fsr1l,f,c
  3544  007A38  50DD               	movf	postdec2,w,c
  3545  007A3A  22E2               	addwfc	fsr1h,f,c
  3546  007A3C  0E50               	movlw	low _sensorVals
  3547  007A3E  240F               	addwf	classifyColors@a,w,c
  3548  007A40  6ED9               	movwf	fsr2l,c
  3549  007A42  6ADA               	clrf	fsr2h,c
  3550  007A44  0E00               	movlw	high _sensorVals
  3551  007A46  22DA               	addwfc	fsr2h,f,c
  3552  007A48  50E6               	movf	postinc1,w,c
  3553  007A4A  5CDE               	subwf	postinc2,w,c
  3554  007A4C  B0D8               	btfsc	status,0,c
  3555  007A4E  D008               	goto	l2833
  3556                           
  3557                           ;./functions.c: 649:             colorsDetected[a] = 'G';
  3558  007A50  0EE9               	movlw	low _colorsDetected
  3559  007A52  240F               	addwf	classifyColors@a,w,c
  3560  007A54  6ED9               	movwf	fsr2l,c
  3561  007A56  6ADA               	clrf	fsr2h,c
  3562  007A58  0E00               	movlw	high _colorsDetected
  3563  007A5A  22DA               	addwfc	fsr2h,f,c
  3564  007A5C  0E47               	movlw	71
  3565  007A5E  D027               	goto	L4
  3566  007A60                     l2833:
  3567  007A60  500F               	movf	classifyColors@a,w,c
  3568  007A62  0D02               	mullw	2
  3569  007A64  0E05               	movlw	low classifyColors@sensorRanges
  3570  007A66  24F3               	addwf	prodl,w,c
  3571  007A68  6ED9               	movwf	fsr2l,c
  3572  007A6A  0E00               	movlw	high classifyColors@sensorRanges
  3573  007A6C  20F4               	addwfc	prodh,w,c
  3574  007A6E  6EDA               	movwf	fsr2h,c
  3575  007A70  EE10 F004          	lfsr	1,4
  3576  007A74  50DE               	movf	postinc2,w,c
  3577  007A76  26E1               	addwf	fsr1l,f,c
  3578  007A78  50DD               	movf	postdec2,w,c
  3579  007A7A  22E2               	addwfc	fsr1h,f,c
  3580  007A7C  0E50               	movlw	low _sensorVals
  3581  007A7E  240F               	addwf	classifyColors@a,w,c
  3582  007A80  6ED9               	movwf	fsr2l,c
  3583  007A82  6ADA               	clrf	fsr2h,c
  3584  007A84  0E00               	movlw	high _sensorVals
  3585  007A86  22DA               	addwfc	fsr2h,f,c
  3586  007A88  50E6               	movf	postinc1,w,c
  3587  007A8A  5CDE               	subwf	postinc2,w,c
  3588  007A8C  B0D8               	btfsc	status,0,c
  3589  007A8E  D008               	goto	l2837
  3590                           
  3591                           ;./functions.c: 652:             colorsDetected[a] = 'B';
  3592  007A90  0EE9               	movlw	low _colorsDetected
  3593  007A92  240F               	addwf	classifyColors@a,w,c
  3594  007A94  6ED9               	movwf	fsr2l,c
  3595  007A96  6ADA               	clrf	fsr2h,c
  3596  007A98  0E00               	movlw	high _colorsDetected
  3597  007A9A  22DA               	addwfc	fsr2h,f,c
  3598  007A9C  0E42               	movlw	66
  3599  007A9E  D007               	goto	L4
  3600  007AA0                     l2837:
  3601                           
  3602                           ;./functions.c: 655:             colorsDetected[a] = 'n';
  3603  007AA0  0EE9               	movlw	low _colorsDetected
  3604  007AA2  240F               	addwf	classifyColors@a,w,c
  3605  007AA4  6ED9               	movwf	fsr2l,c
  3606  007AA6  6ADA               	clrf	fsr2h,c
  3607  007AA8  0E00               	movlw	high _colorsDetected
  3608  007AAA  22DA               	addwfc	fsr2h,f,c
  3609  007AAC  0E6E               	movlw	110
  3610  007AAE                     L4:
  3611  007AAE  6EDF               	movwf	indf2,c
  3612                           
  3613                           ;./functions.c: 657:     }
  3614  007AB0  2A0F               	incf	classifyColors@a,f,c
  3615  007AB2  0E04               	movlw	4
  3616  007AB4  640F               	cpfsgt	classifyColors@a,c
  3617  007AB6  D792               	goto	l2825
  3618  007AB8  0012               	return	
  3619  007ABA                     __end_of_classifyColors:
  3620                           	opt callstack 0
  3621                           
  3622 ;; *************** function _capTouch *****************
  3623 ;; Defined at:
  3624 ;;		line 447 in file "./functions.c"
  3625 ;; Parameters:    Size  Location     Type
  3626 ;;		None
  3627 ;; Auto vars:     Size  Location     Type
  3628 ;;  a               1   40[COMRAM] unsigned char 
  3629 ;;  message        26   10[COMRAM] unsigned char [26]
  3630 ;;  change          2    0        int 
  3631 ;;  touch2          1   39[COMRAM] unsigned char 
  3632 ;;  touch1          1   38[COMRAM] unsigned char 
  3633 ;; Return value:  Size  Location     Type
  3634 ;;                  1    wreg      void 
  3635 ;; Registers used:
  3636 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3637 ;; Tracked objects:
  3638 ;;		On entry : 0/0
  3639 ;;		On exit  : 0/0
  3640 ;;		Unchanged: 0/0
  3641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3642 ;;      Params:         0       0       0       0       0       0       0
  3643 ;;      Locals:        31       0       0       0       0       0       0
  3644 ;;      Temps:          0       0       0       0       0       0       0
  3645 ;;      Totals:        31       0       0       0       0       0       0
  3646 ;;Total ram usage:       31 bytes
  3647 ;; Hardware stack levels used:    1
  3648 ;; Hardware stack levels required when called:    2
  3649 ;; This function calls:
  3650 ;;		_abs
  3651 ;;		_aveSensor
  3652 ;;		_msDelay
  3653 ;;		_trans
  3654 ;; This function is called by:
  3655 ;;		_RCE
  3656 ;; This function uses a non-reentrant model
  3657 ;;
  3658                           
  3659                           	psect	text27
  3660  00747C                     __ptext27:
  3661                           	opt callstack 0
  3662  00747C                     _capTouch:
  3663                           	opt callstack 27
  3664                           
  3665                           ;./functions.c: 449:     unsigned char message[] = "\nSanic waits for a touch\n";
  3666                           
  3667                           ;incstack = 0
  3668  00747C  EE20  F060         	lfsr	2,capTouch@F6045
  3669  007480  EE10  F00B         	lfsr	1,capTouch@message
  3670  007484  0E19               	movlw	25
  3671  007486                     u2351:
  3672  007486  CFDB FFE3          	movff	plusw2,plusw1
  3673  00748A  06E8               	decf	wreg,f,c
  3674  00748C  E2FC               	bc	u2351
  3675                           
  3676                           ;./functions.c: 451:     for (unsigned char a = 0; a < 25; a++)
  3677  00748E  0E00               	movlw	0
  3678  007490  6E29               	movwf	capTouch@a,c
  3679  007492                     l3429:
  3680                           
  3681                           ;./functions.c: 452:     {;./functions.c: 453:         trans(message[a]);
  3682  007492  0E0B               	movlw	low capTouch@message
  3683  007494  2429               	addwf	capTouch@a,w,c
  3684  007496  6ED9               	movwf	fsr2l,c
  3685  007498  6ADA               	clrf	fsr2h,c
  3686  00749A  0E00               	movlw	high capTouch@message
  3687  00749C  22DA               	addwfc	fsr2h,f,c
  3688  00749E  50DF               	movf	indf2,w,c
  3689  0074A0  ECBF  F037         	call	_trans
  3690                           
  3691                           ;./functions.c: 454:     }
  3692  0074A4  2A29               	incf	capTouch@a,f,c
  3693  0074A6  0E18               	movlw	24
  3694  0074A8  6429               	cpfsgt	capTouch@a,c
  3695  0074AA  D7F3               	goto	l3429
  3696                           
  3697                           ;./functions.c: 457:     unsigned char touch1 = 0;
  3698  0074AC  0E00               	movlw	0
  3699  0074AE  6E27               	movwf	capTouch@touch1,c
  3700                           
  3701                           ;./functions.c: 458:     unsigned char touch2 = 0;
  3702  0074B0  0E00               	movlw	0
  3703  0074B2  6E28               	movwf	capTouch@touch2,c
  3704  0074B4                     l3437:
  3705                           
  3706                           ;./functions.c: 461:         touch1 = aveSensor(15);
  3707  0074B4  0E0F               	movlw	15
  3708  0074B6  EC34  F039         	call	_aveSensor
  3709  0074BA  6E27               	movwf	capTouch@touch1,c
  3710                           
  3711                           ;./functions.c: 462:         msDelay(5);
  3712  0074BC  0E05               	movlw	5
  3713  0074BE  EC51  F038         	call	_msDelay
  3714                           
  3715                           ;./functions.c: 463:         touch2 = aveSensor(15);
  3716  0074C2  0E0F               	movlw	15
  3717  0074C4  EC34  F039         	call	_aveSensor
  3718  0074C8  6E28               	movwf	capTouch@touch2,c
  3719                           
  3720                           ;./functions.c: 467:         if (abs(touch2 - touch1) > 50){
  3721  0074CA  5027               	movf	capTouch@touch1,w,c
  3722  0074CC  5C28               	subwf	capTouch@touch2,w,c
  3723  0074CE  6E01               	movwf	abs@a,c
  3724  0074D0  6A02               	clrf	abs@a+1,c
  3725  0074D2  A0D8               	btfss	status,0,c
  3726  0074D4  0602               	decf	abs@a+1,f,c
  3727  0074D6  ECBC  F038         	call	_abs	;wreg free
  3728  0074DA  BE02               	btfsc	?_abs+1,7,c
  3729  0074DC  D7EB               	goto	l3437
  3730  0074DE  5002               	movf	?_abs+1,w,c
  3731  0074E0  E105               	bnz	l344
  3732  0074E2  0E33               	movlw	51
  3733  0074E4  5C01               	subwf	?_abs,w,c
  3734  0074E6  B0D8               	btfsc	status,0,c
  3735  0074E8  0012               	return	
  3736  0074EA  D7E4               	goto	l3437
  3737  0074EC                     l344:
  3738  0074EC  0012               	return		;funcret
  3739  0074EE                     __end_of_capTouch:
  3740                           	opt callstack 0
  3741                           
  3742 ;; *************** function _abs *****************
  3743 ;; Defined at:
  3744 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
  3745 ;; Parameters:    Size  Location     Type
  3746 ;;  a               2    0[COMRAM] int 
  3747 ;; Auto vars:     Size  Location     Type
  3748 ;;		None
  3749 ;; Return value:  Size  Location     Type
  3750 ;;                  2    0[COMRAM] int 
  3751 ;; Registers used:
  3752 ;;		wreg, status,2, status,0
  3753 ;; Tracked objects:
  3754 ;;		On entry : 0/0
  3755 ;;		On exit  : 0/0
  3756 ;;		Unchanged: 0/0
  3757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3758 ;;      Params:         2       0       0       0       0       0       0
  3759 ;;      Locals:         0       0       0       0       0       0       0
  3760 ;;      Temps:          2       0       0       0       0       0       0
  3761 ;;      Totals:         4       0       0       0       0       0       0
  3762 ;;Total ram usage:        4 bytes
  3763 ;; Hardware stack levels used:    1
  3764 ;; This function calls:
  3765 ;;		Nothing
  3766 ;; This function is called by:
  3767 ;;		_capTouch
  3768 ;;		_readAllSensors
  3769 ;; This function uses a non-reentrant model
  3770 ;;
  3771                           
  3772                           	psect	text28
  3773  007178                     __ptext28:
  3774                           	opt callstack 0
  3775  007178                     _abs:
  3776                           	opt callstack 27
  3777                           
  3778                           ;incstack = 0
  3779  007178  BE02               	btfsc	abs@a+1,7,c
  3780  00717A  D005               	goto	u1300
  3781  00717C  5002               	movf	abs@a+1,w,c
  3782  00717E  E110               	bnz	l1270
  3783  007180  0401               	decf	abs@a,w,c
  3784  007182  B0D8               	btfsc	status,0,c
  3785  007184  D00D               	goto	l1270
  3786  007186                     u1300:
  3787  007186  C001  F003         	movff	abs@a,??_abs
  3788  00718A  C002  F004         	movff	abs@a+1,??_abs+1
  3789  00718E  1E03               	comf	??_abs,f,c
  3790  007190  1E04               	comf	??_abs+1,f,c
  3791  007192  4A03               	infsnz	??_abs,f,c
  3792  007194  2A04               	incf	??_abs+1,f,c
  3793  007196  C003  F001         	movff	??_abs,?_abs
  3794  00719A  C004  F002         	movff	??_abs+1,?_abs+1
  3795  00719E  0012               	return	
  3796  0071A0                     l1270:
  3797  0071A0  C001  F001         	movff	abs@a,?_abs
  3798  0071A4  C002  F002         	movff	abs@a+1,?_abs+1
  3799  0071A8  0012               	return		;funcret
  3800  0071AA                     __end_of_abs:
  3801                           	opt callstack 0
  3802                           
  3803 ;; *************** function _calibrate *****************
  3804 ;; Defined at:
  3805 ;;		line 137 in file "./functions.c"
  3806 ;; Parameters:    Size  Location     Type
  3807 ;;		None
  3808 ;; Auto vars:     Size  Location     Type
  3809 ;;  b               1   47[COMRAM] unsigned char 
  3810 ;;  samples         1   45[COMRAM] unsigned char 
  3811 ;;  samples         1   44[COMRAM] unsigned char 
  3812 ;;  samples         1   43[COMRAM] unsigned char 
  3813 ;;  samples         1   42[COMRAM] unsigned char 
  3814 ;;  samples         1   41[COMRAM] unsigned char 
  3815 ;;  a               1   46[COMRAM] unsigned char 
  3816 ;;  rangeArray     10   31[COMRAM] PTR unsigned char [5]
  3817 ;;		 -> RRranges(5), Rranges(5), Mranges(5), Lranges(5), 
  3818 ;;		 -> LLranges(5), 
  3819 ;;  temp            1   48[COMRAM] unsigned char 
  3820 ;; Return value:  Size  Location     Type
  3821 ;;                  1    wreg      void 
  3822 ;; Registers used:
  3823 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3824 ;; Tracked objects:
  3825 ;;		On entry : 0/0
  3826 ;;		On exit  : 0/0
  3827 ;;		Unchanged: 0/0
  3828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3829 ;;      Params:         0       0       0       0       0       0       0
  3830 ;;      Locals:        18       0       0       0       0       0       0
  3831 ;;      Temps:          2       0       0       0       0       0       0
  3832 ;;      Totals:        20       0       0       0       0       0       0
  3833 ;;Total ram usage:       20 bytes
  3834 ;; Hardware stack levels used:    1
  3835 ;; Hardware stack levels required when called:    3
  3836 ;; This function calls:
  3837 ;;		_aveSensor
  3838 ;;		_ranges
  3839 ;;		_sixSecDelay
  3840 ;; This function is called by:
  3841 ;;		_RCE
  3842 ;; This function uses a non-reentrant model
  3843 ;;
  3844                           
  3845                           	psect	text29
  3846  007D44                     __ptext29:
  3847                           	opt callstack 0
  3848  007D44                     _calibrate:
  3849                           	opt callstack 26
  3850                           
  3851                           ;./functions.c: 139:     ranges();
  3852                           
  3853                           ;incstack = 0
  3854  007D44  EC6D  F03C         	call	_ranges	;wreg free
  3855                           
  3856                           ;./functions.c: 140:     unsigned char *rangeArray[] = {LLranges, Lranges, Mranges, Rran
      +                          ges, RRranges};
  3857  007D48  EE20  F0B0         	lfsr	2,calibrate@F6016
  3858  007D4C  EE10  F020         	lfsr	1,calibrate@rangeArray
  3859  007D50  0E09               	movlw	9
  3860  007D52                     u1821:
  3861  007D52  CFDB FFE3          	movff	plusw2,plusw1
  3862  007D56  06E8               	decf	wreg,f,c
  3863  007D58  E2FC               	bc	u1821
  3864                           
  3865                           ;./functions.c: 141:     for (unsigned char a = 0; a < 5; a++)
  3866  007D5A  0E00               	movlw	0
  3867  007D5C  6E2F               	movwf	calibrate@a,c
  3868  007D5E                     l2985:
  3869                           
  3870                           ;./functions.c: 142:     {;./functions.c: 143:         for (unsigned char b = 0; b < 5; 
      +                          b++)
  3871  007D5E  0E00               	movlw	0
  3872  007D60  6E30               	movwf	calibrate@b,c
  3873  007D62                     l2991:
  3874                           
  3875                           ;./functions.c: 144:         {;./functions.c: 145:             rangeArray[a][b] = 0;
  3876  007D62  502F               	movf	calibrate@a,w,c
  3877  007D64  0D02               	mullw	2
  3878  007D66  0E20               	movlw	low calibrate@rangeArray
  3879  007D68  24F3               	addwf	prodl,w,c
  3880  007D6A  6ED9               	movwf	fsr2l,c
  3881  007D6C  0E00               	movlw	high calibrate@rangeArray
  3882  007D6E  20F4               	addwfc	prodh,w,c
  3883  007D70  6EDA               	movwf	fsr2h,c
  3884  007D72  CFDE F01E          	movff	postinc2,??_calibrate
  3885  007D76  CFDD F01F          	movff	postdec2,??_calibrate+1
  3886  007D7A  5030               	movf	calibrate@b,w,c
  3887  007D7C  241E               	addwf	??_calibrate,w,c
  3888  007D7E  6ED9               	movwf	fsr2l,c
  3889  007D80  0E00               	movlw	0
  3890  007D82  201F               	addwfc	??_calibrate+1,w,c
  3891  007D84  6EDA               	movwf	fsr2h,c
  3892  007D86  0E00               	movlw	0
  3893  007D88  6EDF               	movwf	indf2,c
  3894                           
  3895                           ;./functions.c: 146:         }
  3896  007D8A  2A30               	incf	calibrate@b,f,c
  3897  007D8C  0E04               	movlw	4
  3898  007D8E  6430               	cpfsgt	calibrate@b,c
  3899  007D90  D7E8               	goto	l2991
  3900                           
  3901                           ;./functions.c: 147:     }
  3902  007D92  2A2F               	incf	calibrate@a,f,c
  3903  007D94  0E04               	movlw	4
  3904  007D96  642F               	cpfsgt	calibrate@a,c
  3905  007D98  D7E2               	goto	l2985
  3906                           
  3907                           ;./functions.c: 149:     PORTA = 0;
  3908  007D9A  0E00               	movlw	0
  3909  007D9C  6E80               	movwf	3968,c	;volatile
  3910                           
  3911                           ;./functions.c: 153:     PORTD = 0b11000001;
  3912  007D9E  0EC1               	movlw	193
  3913  007DA0  6E83               	movwf	3971,c	;volatile
  3914                           
  3915                           ;./functions.c: 154:     sixSecDelay();
  3916  007DA2  ECD4  F037         	call	_sixSecDelay	;wreg free
  3917                           
  3918                           ;./functions.c: 155:     for (unsigned char samples = 0; samples < 250; samples++)
  3919  007DA6  0E00               	movlw	0
  3920  007DA8  6E2A               	movwf	calibrate@samples,c
  3921  007DAA                     l3011:
  3922                           
  3923                           ;./functions.c: 156:     {;./functions.c: 157:         temp = aveSensor(12);
  3924  007DAA  0E0C               	movlw	12
  3925  007DAC  EC34  F039         	call	_aveSensor
  3926  007DB0  6E31               	movwf	calibrate@temp,c
  3927                           
  3928                           ;./functions.c: 158:         if (temp >= LLranges[0])
  3929  007DB2  5057               	movf	_LLranges,w,c
  3930  007DB4  5C31               	subwf	calibrate@temp,w,c
  3931  007DB6  B0D8               	btfsc	status,0,c
  3932                           
  3933                           ;./functions.c: 159:         {;./functions.c: 160:             LLranges[0] = temp;
  3934  007DB8  C031  F057         	movff	calibrate@temp,_LLranges
  3935                           
  3936                           ;./functions.c: 162:         temp = aveSensor(10);
  3937  007DBC  0E0A               	movlw	10
  3938  007DBE  EC34  F039         	call	_aveSensor
  3939  007DC2  6E31               	movwf	calibrate@temp,c
  3940                           
  3941                           ;./functions.c: 163:         if (temp >= Lranges[0])
  3942  007DC4  0100               	movlb	0	; () banked
  3943  007DC6  51E4               	movf	_Lranges& (0+255),w,b
  3944  007DC8  5C31               	subwf	calibrate@temp,w,c
  3945  007DCA  B0D8               	btfsc	status,0,c
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;./functions.c: 164:         {;./functions.c: 165:             Lranges[0] = temp;
  3949  007DCC  C031  F0E4         	movff	calibrate@temp,_Lranges
  3950                           
  3951                           ; BSR set to: 0
  3952                           ;./functions.c: 167:         temp = aveSensor(8);
  3953  007DD0  0E08               	movlw	8
  3954  007DD2  EC34  F039         	call	_aveSensor
  3955  007DD6  6E31               	movwf	calibrate@temp,c
  3956                           
  3957                           ;./functions.c: 168:         if (temp >= Mranges[0])
  3958  007DD8  0100               	movlb	0	; () banked
  3959  007DDA  51DF               	movf	_Mranges& (0+255),w,b
  3960  007DDC  5C31               	subwf	calibrate@temp,w,c
  3961  007DDE  B0D8               	btfsc	status,0,c
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;./functions.c: 169:         {;./functions.c: 170:             Mranges[0] = temp;
  3965  007DE0  C031  F0DF         	movff	calibrate@temp,_Mranges
  3966                           
  3967                           ; BSR set to: 0
  3968                           ;./functions.c: 172:         temp = aveSensor(9);
  3969  007DE4  0E09               	movlw	9
  3970  007DE6  EC34  F039         	call	_aveSensor
  3971  007DEA  6E31               	movwf	calibrate@temp,c
  3972                           
  3973                           ;./functions.c: 173:         if (temp >= Rranges[0])
  3974  007DEC  0100               	movlb	0	; () banked
  3975  007DEE  51DA               	movf	_Rranges& (0+255),w,b
  3976  007DF0  5C31               	subwf	calibrate@temp,w,c
  3977  007DF2  B0D8               	btfsc	status,0,c
  3978                           
  3979                           ; BSR set to: 0
  3980                           ;./functions.c: 174:         {;./functions.c: 175:             Rranges[0] = temp;
  3981  007DF4  C031  F0DA         	movff	calibrate@temp,_Rranges
  3982                           
  3983                           ; BSR set to: 0
  3984                           ;./functions.c: 177:         temp = aveSensor(13);
  3985  007DF8  0E0D               	movlw	13
  3986  007DFA  EC34  F039         	call	_aveSensor
  3987  007DFE  6E31               	movwf	calibrate@temp,c
  3988                           
  3989                           ;./functions.c: 178:         if (temp >= RRranges[0])
  3990  007E00  0100               	movlb	0	; () banked
  3991  007E02  51D5               	movf	_RRranges& (0+255),w,b
  3992  007E04  5C31               	subwf	calibrate@temp,w,c
  3993  007E06  B0D8               	btfsc	status,0,c
  3994                           
  3995                           ; BSR set to: 0
  3996                           ;./functions.c: 179:         {;./functions.c: 180:             RRranges[0] = temp;
  3997  007E08  C031  F0D5         	movff	calibrate@temp,_RRranges
  3998                           
  3999                           ; BSR set to: 0
  4000                           ;./functions.c: 182:     }
  4001  007E0C  2A2A               	incf	calibrate@samples,f,c
  4002                           
  4003                           ; BSR set to: 0
  4004  007E0E  0EF9               	movlw	249
  4005  007E10  642A               	cpfsgt	calibrate@samples,c
  4006  007E12  D7CB               	goto	l3011
  4007                           
  4008                           ; BSR set to: 0
  4009                           ;./functions.c: 183:     PORTAbits.RA0 = 1;
  4010  007E14  8080               	bsf	3968,0,c	;volatile
  4011                           
  4012                           ; BSR set to: 0
  4013                           ;./functions.c: 184:     PORTD = 0b10000010;
  4014  007E16  0E82               	movlw	130
  4015  007E18  6E83               	movwf	3971,c	;volatile
  4016                           
  4017                           ; BSR set to: 0
  4018                           ;./functions.c: 186:     sixSecDelay();
  4019  007E1A  ECD4  F037         	call	_sixSecDelay	;wreg free
  4020                           
  4021                           ;./functions.c: 187:     for (unsigned char samples = 0; samples < 250; samples++)
  4022  007E1E  0E00               	movlw	0
  4023  007E20  6E2B               	movwf	calibrate@samples_1255,c
  4024  007E22                     l3055:
  4025                           
  4026                           ;./functions.c: 188:     {;./functions.c: 189:         temp = aveSensor(12);
  4027  007E22  0E0C               	movlw	12
  4028  007E24  EC34  F039         	call	_aveSensor
  4029  007E28  6E31               	movwf	calibrate@temp,c
  4030                           
  4031                           ;./functions.c: 190:         if (temp >= LLranges[1])
  4032  007E2A  5058               	movf	_LLranges+1,w,c
  4033  007E2C  5C31               	subwf	calibrate@temp,w,c
  4034  007E2E  B0D8               	btfsc	status,0,c
  4035                           
  4036                           ;./functions.c: 191:         {;./functions.c: 192:             LLranges[1] = temp;
  4037  007E30  C031  F058         	movff	calibrate@temp,_LLranges+1
  4038                           
  4039                           ;./functions.c: 194:         temp = aveSensor(10);
  4040  007E34  0E0A               	movlw	10
  4041  007E36  EC34  F039         	call	_aveSensor
  4042  007E3A  6E31               	movwf	calibrate@temp,c
  4043                           
  4044                           ;./functions.c: 195:         if (temp >= Lranges[1])
  4045  007E3C  0100               	movlb	0	; () banked
  4046  007E3E  51E5               	movf	(_Lranges+1)& (0+255),w,b
  4047  007E40  5C31               	subwf	calibrate@temp,w,c
  4048  007E42  B0D8               	btfsc	status,0,c
  4049                           
  4050                           ; BSR set to: 0
  4051                           ;./functions.c: 196:         {;./functions.c: 197:             Lranges[1] = temp;
  4052  007E44  C031  F0E5         	movff	calibrate@temp,_Lranges+1
  4053                           
  4054                           ; BSR set to: 0
  4055                           ;./functions.c: 199:         temp = aveSensor(8);
  4056  007E48  0E08               	movlw	8
  4057  007E4A  EC34  F039         	call	_aveSensor
  4058  007E4E  6E31               	movwf	calibrate@temp,c
  4059                           
  4060                           ;./functions.c: 200:         if (temp >= Mranges[1])
  4061  007E50  0100               	movlb	0	; () banked
  4062  007E52  51E0               	movf	(_Mranges+1)& (0+255),w,b
  4063  007E54  5C31               	subwf	calibrate@temp,w,c
  4064  007E56  B0D8               	btfsc	status,0,c
  4065                           
  4066                           ; BSR set to: 0
  4067                           ;./functions.c: 201:         {;./functions.c: 202:             Mranges[1] = temp;
  4068  007E58  C031  F0E0         	movff	calibrate@temp,_Mranges+1
  4069                           
  4070                           ; BSR set to: 0
  4071                           ;./functions.c: 204:         temp = aveSensor(9);
  4072  007E5C  0E09               	movlw	9
  4073  007E5E  EC34  F039         	call	_aveSensor
  4074  007E62  6E31               	movwf	calibrate@temp,c
  4075                           
  4076                           ;./functions.c: 205:         if (temp >= Rranges[1])
  4077  007E64  0100               	movlb	0	; () banked
  4078  007E66  51DB               	movf	(_Rranges+1)& (0+255),w,b
  4079  007E68  5C31               	subwf	calibrate@temp,w,c
  4080  007E6A  B0D8               	btfsc	status,0,c
  4081                           
  4082                           ; BSR set to: 0
  4083                           ;./functions.c: 206:         {;./functions.c: 207:             Rranges[1] = temp;
  4084  007E6C  C031  F0DB         	movff	calibrate@temp,_Rranges+1
  4085                           
  4086                           ; BSR set to: 0
  4087                           ;./functions.c: 209:         temp = aveSensor(13);
  4088  007E70  0E0D               	movlw	13
  4089  007E72  EC34  F039         	call	_aveSensor
  4090  007E76  6E31               	movwf	calibrate@temp,c
  4091                           
  4092                           ;./functions.c: 210:         if (temp >= RRranges[1])
  4093  007E78  0100               	movlb	0	; () banked
  4094  007E7A  51D6               	movf	(_RRranges+1)& (0+255),w,b
  4095  007E7C  5C31               	subwf	calibrate@temp,w,c
  4096  007E7E  B0D8               	btfsc	status,0,c
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;./functions.c: 211:         {;./functions.c: 212:             RRranges[1] = temp;
  4100  007E80  C031  F0D6         	movff	calibrate@temp,_RRranges+1
  4101                           
  4102                           ; BSR set to: 0
  4103                           ;./functions.c: 214:     }
  4104  007E84  2A2B               	incf	calibrate@samples_1255,f,c
  4105                           
  4106                           ; BSR set to: 0
  4107  007E86  0EF9               	movlw	249
  4108  007E88  642B               	cpfsgt	calibrate@samples_1255,c
  4109  007E8A  D7CB               	goto	l3055
  4110                           
  4111                           ; BSR set to: 0
  4112                           ;./functions.c: 215:     PORTAbits.RA1 = 1;
  4113  007E8C  8280               	bsf	3968,1,c	;volatile
  4114                           
  4115                           ; BSR set to: 0
  4116                           ;./functions.c: 216:     PORTD = 0b10001000;
  4117  007E8E  0E88               	movlw	136
  4118  007E90  6E83               	movwf	3971,c	;volatile
  4119                           
  4120                           ; BSR set to: 0
  4121                           ;./functions.c: 218:     sixSecDelay();
  4122  007E92  ECD4  F037         	call	_sixSecDelay	;wreg free
  4123                           
  4124                           ;./functions.c: 219:     for (unsigned char samples = 0; samples < 250; samples++)
  4125  007E96  0E00               	movlw	0
  4126  007E98  6E2C               	movwf	calibrate@samples_1256,c
  4127  007E9A                     l3099:
  4128                           
  4129                           ;./functions.c: 220:     {;./functions.c: 221:         temp = aveSensor(12);
  4130  007E9A  0E0C               	movlw	12
  4131  007E9C  EC34  F039         	call	_aveSensor
  4132  007EA0  6E31               	movwf	calibrate@temp,c
  4133                           
  4134                           ;./functions.c: 222:         if (temp >= LLranges[2])
  4135  007EA2  5059               	movf	_LLranges+2,w,c
  4136  007EA4  5C31               	subwf	calibrate@temp,w,c
  4137  007EA6  B0D8               	btfsc	status,0,c
  4138                           
  4139                           ;./functions.c: 223:         {;./functions.c: 224:             LLranges[2] = temp;
  4140  007EA8  C031  F059         	movff	calibrate@temp,_LLranges+2
  4141                           
  4142                           ;./functions.c: 226:         temp = aveSensor(10);
  4143  007EAC  0E0A               	movlw	10
  4144  007EAE  EC34  F039         	call	_aveSensor
  4145  007EB2  6E31               	movwf	calibrate@temp,c
  4146                           
  4147                           ;./functions.c: 227:         if (temp >= Lranges[2])
  4148  007EB4  0100               	movlb	0	; () banked
  4149  007EB6  51E6               	movf	(_Lranges+2)& (0+255),w,b
  4150  007EB8  5C31               	subwf	calibrate@temp,w,c
  4151  007EBA  B0D8               	btfsc	status,0,c
  4152                           
  4153                           ; BSR set to: 0
  4154                           ;./functions.c: 228:         {;./functions.c: 229:             Lranges[2] = temp;
  4155  007EBC  C031  F0E6         	movff	calibrate@temp,_Lranges+2
  4156                           
  4157                           ; BSR set to: 0
  4158                           ;./functions.c: 231:         temp = aveSensor(8);
  4159  007EC0  0E08               	movlw	8
  4160  007EC2  EC34  F039         	call	_aveSensor
  4161  007EC6  6E31               	movwf	calibrate@temp,c
  4162                           
  4163                           ;./functions.c: 232:         if (temp >= Mranges[2])
  4164  007EC8  0100               	movlb	0	; () banked
  4165  007ECA  51E1               	movf	(_Mranges+2)& (0+255),w,b
  4166  007ECC  5C31               	subwf	calibrate@temp,w,c
  4167  007ECE  B0D8               	btfsc	status,0,c
  4168                           
  4169                           ; BSR set to: 0
  4170                           ;./functions.c: 233:         {;./functions.c: 234:             Mranges[2] = temp;
  4171  007ED0  C031  F0E1         	movff	calibrate@temp,_Mranges+2
  4172                           
  4173                           ; BSR set to: 0
  4174                           ;./functions.c: 236:         temp = aveSensor(9);
  4175  007ED4  0E09               	movlw	9
  4176  007ED6  EC34  F039         	call	_aveSensor
  4177  007EDA  6E31               	movwf	calibrate@temp,c
  4178                           
  4179                           ;./functions.c: 237:         if (temp >= Rranges[2])
  4180  007EDC  0100               	movlb	0	; () banked
  4181  007EDE  51DC               	movf	(_Rranges+2)& (0+255),w,b
  4182  007EE0  5C31               	subwf	calibrate@temp,w,c
  4183  007EE2  B0D8               	btfsc	status,0,c
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;./functions.c: 238:         {;./functions.c: 239:             Rranges[2] = temp;
  4187  007EE4  C031  F0DC         	movff	calibrate@temp,_Rranges+2
  4188                           
  4189                           ; BSR set to: 0
  4190                           ;./functions.c: 241:         temp = aveSensor(13);
  4191  007EE8  0E0D               	movlw	13
  4192  007EEA  EC34  F039         	call	_aveSensor
  4193  007EEE  6E31               	movwf	calibrate@temp,c
  4194                           
  4195                           ;./functions.c: 242:         if (temp >= RRranges[2])
  4196  007EF0  0100               	movlb	0	; () banked
  4197  007EF2  51D7               	movf	(_RRranges+2)& (0+255),w,b
  4198  007EF4  5C31               	subwf	calibrate@temp,w,c
  4199  007EF6  B0D8               	btfsc	status,0,c
  4200                           
  4201                           ; BSR set to: 0
  4202                           ;./functions.c: 243:         {;./functions.c: 244:             RRranges[2] = temp;
  4203  007EF8  C031  F0D7         	movff	calibrate@temp,_RRranges+2
  4204                           
  4205                           ; BSR set to: 0
  4206                           ;./functions.c: 246:     }
  4207  007EFC  2A2C               	incf	calibrate@samples_1256,f,c
  4208                           
  4209                           ; BSR set to: 0
  4210  007EFE  0EF9               	movlw	249
  4211  007F00  642C               	cpfsgt	calibrate@samples_1256,c
  4212  007F02  D7CB               	goto	l3099
  4213                           
  4214                           ; BSR set to: 0
  4215                           ;./functions.c: 247:     PORTAbits.RA2 = 1;
  4216  007F04  8480               	bsf	3968,2,c	;volatile
  4217                           
  4218                           ; BSR set to: 0
  4219                           ;./functions.c: 248:     PORTD = 0b10000000;
  4220  007F06  0E80               	movlw	128
  4221  007F08  6E83               	movwf	3971,c	;volatile
  4222                           
  4223                           ; BSR set to: 0
  4224                           ;./functions.c: 250:     sixSecDelay();
  4225  007F0A  ECD4  F037         	call	_sixSecDelay	;wreg free
  4226                           
  4227                           ;./functions.c: 251:     for (unsigned char samples = 0; samples < 250; samples++)
  4228  007F0E  0E00               	movlw	0
  4229  007F10  6E2D               	movwf	calibrate@samples_1257,c
  4230  007F12                     l3143:
  4231                           
  4232                           ;./functions.c: 252:     {;./functions.c: 253:         temp = aveSensor(12);
  4233  007F12  0E0C               	movlw	12
  4234  007F14  EC34  F039         	call	_aveSensor
  4235  007F18  6E31               	movwf	calibrate@temp,c
  4236                           
  4237                           ;./functions.c: 254:         if (temp >= LLranges[3])
  4238  007F1A  505A               	movf	_LLranges+3,w,c
  4239  007F1C  5C31               	subwf	calibrate@temp,w,c
  4240  007F1E  B0D8               	btfsc	status,0,c
  4241                           
  4242                           ;./functions.c: 255:         {;./functions.c: 256:             LLranges[3] = temp;
  4243  007F20  C031  F05A         	movff	calibrate@temp,_LLranges+3
  4244                           
  4245                           ;./functions.c: 258:         temp = aveSensor(10);
  4246  007F24  0E0A               	movlw	10
  4247  007F26  EC34  F039         	call	_aveSensor
  4248  007F2A  6E31               	movwf	calibrate@temp,c
  4249                           
  4250                           ;./functions.c: 259:         if (temp >= Lranges[3])
  4251  007F2C  0100               	movlb	0	; () banked
  4252  007F2E  51E7               	movf	(_Lranges+3)& (0+255),w,b
  4253  007F30  5C31               	subwf	calibrate@temp,w,c
  4254  007F32  B0D8               	btfsc	status,0,c
  4255                           
  4256                           ; BSR set to: 0
  4257                           ;./functions.c: 260:         {;./functions.c: 261:             Lranges[3] = temp;
  4258  007F34  C031  F0E7         	movff	calibrate@temp,_Lranges+3
  4259                           
  4260                           ; BSR set to: 0
  4261                           ;./functions.c: 263:         temp = aveSensor(8);
  4262  007F38  0E08               	movlw	8
  4263  007F3A  EC34  F039         	call	_aveSensor
  4264  007F3E  6E31               	movwf	calibrate@temp,c
  4265                           
  4266                           ;./functions.c: 264:         if (temp >= Mranges[3])
  4267  007F40  0100               	movlb	0	; () banked
  4268  007F42  51E2               	movf	(_Mranges+3)& (0+255),w,b
  4269  007F44  5C31               	subwf	calibrate@temp,w,c
  4270  007F46  B0D8               	btfsc	status,0,c
  4271                           
  4272                           ; BSR set to: 0
  4273                           ;./functions.c: 265:         {;./functions.c: 266:             Mranges[3] = temp;
  4274  007F48  C031  F0E2         	movff	calibrate@temp,_Mranges+3
  4275                           
  4276                           ; BSR set to: 0
  4277                           ;./functions.c: 268:         temp = aveSensor(9);
  4278  007F4C  0E09               	movlw	9
  4279  007F4E  EC34  F039         	call	_aveSensor
  4280  007F52  6E31               	movwf	calibrate@temp,c
  4281                           
  4282                           ;./functions.c: 269:         if (temp >= Rranges[3])
  4283  007F54  0100               	movlb	0	; () banked
  4284  007F56  51DD               	movf	(_Rranges+3)& (0+255),w,b
  4285  007F58  5C31               	subwf	calibrate@temp,w,c
  4286  007F5A  B0D8               	btfsc	status,0,c
  4287                           
  4288                           ; BSR set to: 0
  4289                           ;./functions.c: 270:         {;./functions.c: 271:             Rranges[3] = temp;
  4290  007F5C  C031  F0DD         	movff	calibrate@temp,_Rranges+3
  4291                           
  4292                           ; BSR set to: 0
  4293                           ;./functions.c: 273:         temp = aveSensor(13);
  4294  007F60  0E0D               	movlw	13
  4295  007F62  EC34  F039         	call	_aveSensor
  4296  007F66  6E31               	movwf	calibrate@temp,c
  4297                           
  4298                           ;./functions.c: 274:         if (temp >= RRranges[3])
  4299  007F68  0100               	movlb	0	; () banked
  4300  007F6A  51D8               	movf	(_RRranges+3)& (0+255),w,b
  4301  007F6C  5C31               	subwf	calibrate@temp,w,c
  4302  007F6E  B0D8               	btfsc	status,0,c
  4303                           
  4304                           ; BSR set to: 0
  4305                           ;./functions.c: 275:         {;./functions.c: 276:             RRranges[3] = temp;
  4306  007F70  C031  F0D8         	movff	calibrate@temp,_RRranges+3
  4307                           
  4308                           ; BSR set to: 0
  4309                           ;./functions.c: 278:     }
  4310  007F74  2A2D               	incf	calibrate@samples_1257,f,c
  4311                           
  4312                           ; BSR set to: 0
  4313  007F76  0EF9               	movlw	249
  4314  007F78  642D               	cpfsgt	calibrate@samples_1257,c
  4315  007F7A  D7CB               	goto	l3143
  4316                           
  4317                           ; BSR set to: 0
  4318                           ;./functions.c: 279:     PORTAbits.RA3 = 1;
  4319  007F7C  8680               	bsf	3968,3,c	;volatile
  4320                           
  4321                           ; BSR set to: 0
  4322                           ;./functions.c: 280:     PORTD = 0b11001000;
  4323  007F7E  0EC8               	movlw	200
  4324  007F80  6E83               	movwf	3971,c	;volatile
  4325                           
  4326                           ; BSR set to: 0
  4327                           ;./functions.c: 282:     sixSecDelay();
  4328  007F82  ECD4  F037         	call	_sixSecDelay	;wreg free
  4329                           
  4330                           ;./functions.c: 283:     for (unsigned char samples = 0; samples < 250; samples++)
  4331  007F86  0E00               	movlw	0
  4332  007F88  6E2E               	movwf	calibrate@samples_1258,c
  4333  007F8A                     l3187:
  4334                           
  4335                           ;./functions.c: 284:     {;./functions.c: 285:         temp = aveSensor(12);
  4336  007F8A  0E0C               	movlw	12
  4337  007F8C  EC34  F039         	call	_aveSensor
  4338  007F90  6E31               	movwf	calibrate@temp,c
  4339                           
  4340                           ;./functions.c: 286:         if (temp >= LLranges[4])
  4341  007F92  505B               	movf	_LLranges+4,w,c
  4342  007F94  5C31               	subwf	calibrate@temp,w,c
  4343  007F96  B0D8               	btfsc	status,0,c
  4344                           
  4345                           ;./functions.c: 287:         {;./functions.c: 288:             LLranges[4] = temp;
  4346  007F98  C031  F05B         	movff	calibrate@temp,_LLranges+4
  4347                           
  4348                           ;./functions.c: 290:         temp = aveSensor(10);
  4349  007F9C  0E0A               	movlw	10
  4350  007F9E  EC34  F039         	call	_aveSensor
  4351  007FA2  6E31               	movwf	calibrate@temp,c
  4352                           
  4353                           ;./functions.c: 291:         if (temp >= Lranges[4])
  4354  007FA4  0100               	movlb	0	; () banked
  4355  007FA6  51E8               	movf	(_Lranges+4)& (0+255),w,b
  4356  007FA8  5C31               	subwf	calibrate@temp,w,c
  4357  007FAA  B0D8               	btfsc	status,0,c
  4358                           
  4359                           ; BSR set to: 0
  4360                           ;./functions.c: 292:         {;./functions.c: 293:             Lranges[4] = temp;
  4361  007FAC  C031  F0E8         	movff	calibrate@temp,_Lranges+4
  4362                           
  4363                           ; BSR set to: 0
  4364                           ;./functions.c: 295:         temp = aveSensor(8);
  4365  007FB0  0E08               	movlw	8
  4366  007FB2  EC34  F039         	call	_aveSensor
  4367  007FB6  6E31               	movwf	calibrate@temp,c
  4368                           
  4369                           ;./functions.c: 296:         if (temp >= Mranges[4])
  4370  007FB8  0100               	movlb	0	; () banked
  4371  007FBA  51E3               	movf	(_Mranges+4)& (0+255),w,b
  4372  007FBC  5C31               	subwf	calibrate@temp,w,c
  4373  007FBE  B0D8               	btfsc	status,0,c
  4374                           
  4375                           ; BSR set to: 0
  4376                           ;./functions.c: 297:         {;./functions.c: 298:             Mranges[4] = temp;
  4377  007FC0  C031  F0E3         	movff	calibrate@temp,_Mranges+4
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;./functions.c: 300:         temp = aveSensor(9);
  4381  007FC4  0E09               	movlw	9
  4382  007FC6  EC34  F039         	call	_aveSensor
  4383  007FCA  6E31               	movwf	calibrate@temp,c
  4384                           
  4385                           ;./functions.c: 301:         if (temp >= Rranges[4])
  4386  007FCC  0100               	movlb	0	; () banked
  4387  007FCE  51DE               	movf	(_Rranges+4)& (0+255),w,b
  4388  007FD0  5C31               	subwf	calibrate@temp,w,c
  4389  007FD2  B0D8               	btfsc	status,0,c
  4390                           
  4391                           ; BSR set to: 0
  4392                           ;./functions.c: 302:         {;./functions.c: 303:             Rranges[4] = temp;
  4393  007FD4  C031  F0DE         	movff	calibrate@temp,_Rranges+4
  4394                           
  4395                           ; BSR set to: 0
  4396                           ;./functions.c: 305:         temp = aveSensor(13);
  4397  007FD8  0E0D               	movlw	13
  4398  007FDA  EC34  F039         	call	_aveSensor
  4399  007FDE  6E31               	movwf	calibrate@temp,c
  4400                           
  4401                           ;./functions.c: 306:         if (temp >= RRranges[4])
  4402  007FE0  0100               	movlb	0	; () banked
  4403  007FE2  51D9               	movf	(_RRranges+4)& (0+255),w,b
  4404  007FE4  5C31               	subwf	calibrate@temp,w,c
  4405  007FE6  B0D8               	btfsc	status,0,c
  4406                           
  4407                           ; BSR set to: 0
  4408                           ;./functions.c: 307:         {;./functions.c: 308:             RRranges[4] = temp;
  4409  007FE8  C031  F0D9         	movff	calibrate@temp,_RRranges+4
  4410                           
  4411                           ; BSR set to: 0
  4412                           ;./functions.c: 310:     }
  4413  007FEC  2A2E               	incf	calibrate@samples_1258,f,c
  4414                           
  4415                           ; BSR set to: 0
  4416  007FEE  0EF9               	movlw	249
  4417  007FF0  642E               	cpfsgt	calibrate@samples_1258,c
  4418  007FF2  D7CB               	goto	l3187
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;./functions.c: 311:     PORTAbits.RA4 = 1;
  4422  007FF4  8880               	bsf	3968,4,c	;volatile
  4423                           
  4424                           ; BSR set to: 0
  4425                           ;./functions.c: 313:     ranges();
  4426  007FF6  EC6D  F03C         	call	_ranges	;wreg free
  4427                           
  4428                           ;./functions.c: 314:     PORTA = 0;
  4429  007FFA  0E00               	movlw	0
  4430  007FFC  6E80               	movwf	3968,c	;volatile
  4431  007FFE  0012               	return		;funcret
  4432  008000                     __end_of_calibrate:
  4433                           	opt callstack 0
  4434                           
  4435 ;; *************** function _sixSecDelay *****************
  4436 ;; Defined at:
  4437 ;;		line 934 in file "./functions.c"
  4438 ;; Parameters:    Size  Location     Type
  4439 ;;		None
  4440 ;; Auto vars:     Size  Location     Type
  4441 ;;  a               1    1[COMRAM] unsigned char 
  4442 ;; Return value:  Size  Location     Type
  4443 ;;                  1    wreg      void 
  4444 ;; Registers used:
  4445 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4446 ;; Tracked objects:
  4447 ;;		On entry : 0/0
  4448 ;;		On exit  : 0/0
  4449 ;;		Unchanged: 0/0
  4450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4451 ;;      Params:         0       0       0       0       0       0       0
  4452 ;;      Locals:         1       0       0       0       0       0       0
  4453 ;;      Temps:          0       0       0       0       0       0       0
  4454 ;;      Totals:         1       0       0       0       0       0       0
  4455 ;;Total ram usage:        1 bytes
  4456 ;; Hardware stack levels used:    1
  4457 ;; Hardware stack levels required when called:    1
  4458 ;; This function calls:
  4459 ;;		_msDelay
  4460 ;; This function is called by:
  4461 ;;		_calibrate
  4462 ;; This function uses a non-reentrant model
  4463 ;;
  4464                           
  4465                           	psect	text30
  4466  006FA8                     __ptext30:
  4467                           	opt callstack 0
  4468  006FA8                     _sixSecDelay:
  4469                           	opt callstack 27
  4470                           
  4471                           ;./functions.c: 936:     for (unsigned char a = 0; a < 90; a++)
  4472                           
  4473                           ;incstack = 0
  4474  006FA8  0E00               	movlw	0
  4475  006FAA  6E02               	movwf	sixSecDelay@a,c
  4476  006FAC                     l2743:
  4477                           
  4478                           ;./functions.c: 937:     {;./functions.c: 938:         msDelay(63);
  4479  006FAC  0E3F               	movlw	63
  4480  006FAE  EC51  F038         	call	_msDelay
  4481                           
  4482                           ;./functions.c: 939:     }
  4483  006FB2  2A02               	incf	sixSecDelay@a,f,c
  4484  006FB4  0E59               	movlw	89
  4485  006FB6  6402               	cpfsgt	sixSecDelay@a,c
  4486  006FB8  D7F9               	goto	l2743
  4487  006FBA  0012               	return	
  4488  006FBC                     __end_of_sixSecDelay:
  4489                           	opt callstack 0
  4490                           
  4491 ;; *************** function _msDelay *****************
  4492 ;; Defined at:
  4493 ;;		line 944 in file "./functions.c"
  4494 ;; Parameters:    Size  Location     Type
  4495 ;;  delayInMs       1    wreg     unsigned char 
  4496 ;; Auto vars:     Size  Location     Type
  4497 ;;  delayInMs       1    0[COMRAM] unsigned char 
  4498 ;; Return value:  Size  Location     Type
  4499 ;;                  1    wreg      void 
  4500 ;; Registers used:
  4501 ;;		wreg, status,2, status,0, prodl, prodh
  4502 ;; Tracked objects:
  4503 ;;		On entry : 0/0
  4504 ;;		On exit  : 0/0
  4505 ;;		Unchanged: 0/0
  4506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4507 ;;      Params:         0       0       0       0       0       0       0
  4508 ;;      Locals:         1       0       0       0       0       0       0
  4509 ;;      Temps:          0       0       0       0       0       0       0
  4510 ;;      Totals:         1       0       0       0       0       0       0
  4511 ;;Total ram usage:        1 bytes
  4512 ;; Hardware stack levels used:    1
  4513 ;; This function calls:
  4514 ;;		Nothing
  4515 ;; This function is called by:
  4516 ;;		_pyCal
  4517 ;;		_capTouch
  4518 ;;		_sixSecDelay
  4519 ;; This function uses a non-reentrant model
  4520 ;;
  4521                           
  4522                           	psect	text31
  4523  0070A2                     __ptext31:
  4524                           	opt callstack 0
  4525  0070A2                     _msDelay:
  4526                           	opt callstack 28
  4527                           
  4528                           ;incstack = 0
  4529                           ;msDelay@delayInMs stored from wreg
  4530  0070A2  6E01               	movwf	msDelay@delayInMs,c
  4531                           
  4532                           ;./functions.c: 944: void msDelay(unsigned char delayInMs);./functions.c: 945: {;./funct
      +                          ions.c: 946:     TMR6 = 0;
  4533  0070A4  0E00               	movlw	0
  4534  0070A6  010F               	movlb	15	; () banked
  4535  0070A8  6F4C               	movwf	76,b	;volatile
  4536                           
  4537                           ; BSR set to: 15
  4538                           ;./functions.c: 947:     PR6 = 4 * delayInMs;
  4539  0070AA  5001               	movf	msDelay@delayInMs,w,c
  4540  0070AC  0D04               	mullw	4
  4541  0070AE  CFF3 FF4B          	movff	prodl,3915	;volatile
  4542                           
  4543                           ; BSR set to: 15
  4544                           ;./functions.c: 948:     T6CON = 0xFF;
  4545  0070B2  694A               	setf	74,b	;volatile
  4546  0070B4                     l539:
  4547  0070B4  A47E               	btfss	3966,2,c	;volatile
  4548  0070B6  D7FE               	goto	l539
  4549                           
  4550                           ;./functions.c: 951:     PIR5bits.TMR6IF = 0;
  4551  0070B8  947E               	bcf	3966,2,c	;volatile
  4552                           
  4553                           ;./functions.c: 952:     T6CON = 0;
  4554  0070BA  0E00               	movlw	0
  4555  0070BC  010F               	movlb	15	; () banked
  4556  0070BE  6F4A               	movwf	74,b	;volatile
  4557                           
  4558                           ; BSR set to: 15
  4559  0070C0  0012               	return		;funcret
  4560  0070C2                     __end_of_msDelay:
  4561                           	opt callstack 0
  4562                           
  4563 ;; *************** function _ranges *****************
  4564 ;; Defined at:
  4565 ;;		line 848 in file "./functions.c"
  4566 ;; Parameters:    Size  Location     Type
  4567 ;;		None
  4568 ;; Auto vars:     Size  Location     Type
  4569 ;;  b               1   27[COMRAM] unsigned char 
  4570 ;;  a               1   28[COMRAM] unsigned char 
  4571 ;;  rangeArray     10   17[COMRAM] PTR unsigned char [5]
  4572 ;;		 -> RRranges(5), Rranges(5), Mranges(5), Lranges(5), 
  4573 ;;		 -> LLranges(5), 
  4574 ;; Return value:  Size  Location     Type
  4575 ;;                  1    wreg      void 
  4576 ;; Registers used:
  4577 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4578 ;; Tracked objects:
  4579 ;;		On entry : 0/0
  4580 ;;		On exit  : 0/0
  4581 ;;		Unchanged: 0/0
  4582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4583 ;;      Params:         0       0       0       0       0       0       0
  4584 ;;      Locals:        12       0       0       0       0       0       0
  4585 ;;      Temps:          2       0       0       0       0       0       0
  4586 ;;      Totals:        14       0       0       0       0       0       0
  4587 ;;Total ram usage:       14 bytes
  4588 ;; Hardware stack levels used:    1
  4589 ;; Hardware stack levels required when called:    2
  4590 ;; This function calls:
  4591 ;;		___awdiv
  4592 ;;		_trans
  4593 ;;		_writeToEEP
  4594 ;; This function is called by:
  4595 ;;		_calibrate
  4596 ;; This function uses a non-reentrant model
  4597 ;;
  4598                           
  4599                           	psect	text32
  4600  0078DA                     __ptext32:
  4601                           	opt callstack 0
  4602  0078DA                     _ranges:
  4603                           	opt callstack 26
  4604                           
  4605                           ;./functions.c: 850:     unsigned char* rangeArray[] = {LLranges, Lranges, Mranges, Rran
      +                          ges, RRranges};
  4606                           
  4607                           ; BSR set to: 15
  4608                           ;incstack = 0
  4609  0078DA  EE20  F09C         	lfsr	2,ranges@F6082
  4610  0078DE  EE10  F012         	lfsr	1,ranges@rangeArray
  4611  0078E2  0E09               	movlw	9
  4612  0078E4                     u1411:
  4613  0078E4  CFDB FFE3          	movff	plusw2,plusw1
  4614  0078E8  06E8               	decf	wreg,f,c
  4615  0078EA  E2FC               	bc	u1411
  4616                           
  4617                           ;./functions.c: 851:     LLranges[0] += 10;
  4618  0078EC  0E0A               	movlw	10
  4619  0078EE  2657               	addwf	_LLranges,f,c
  4620                           
  4621                           ;./functions.c: 852:     Lranges[0] += 10;
  4622  0078F0  0E0A               	movlw	10
  4623  0078F2  0100               	movlb	0	; () banked
  4624  0078F4  27E4               	addwf	_Lranges& (0+255),f,b
  4625                           
  4626                           ; BSR set to: 0
  4627                           ;./functions.c: 853:     Mranges[0] += 10;
  4628  0078F6  0E0A               	movlw	10
  4629  0078F8  27DF               	addwf	_Mranges& (0+255),f,b
  4630                           
  4631                           ; BSR set to: 0
  4632                           ;./functions.c: 854:     Rranges[0] += 10;
  4633  0078FA  0E0A               	movlw	10
  4634  0078FC  27DA               	addwf	_Rranges& (0+255),f,b
  4635                           
  4636                           ; BSR set to: 0
  4637                           ;./functions.c: 855:     RRranges[0] += 10;
  4638  0078FE  0E0A               	movlw	10
  4639  007900  27D5               	addwf	_RRranges& (0+255),f,b
  4640                           
  4641                           ; BSR set to: 0
  4642                           ;./functions.c: 858:     for (unsigned char a = 0; a < 5; a++){
  4643  007902  0E00               	movlw	0
  4644  007904  6E1D               	movwf	ranges@a,c
  4645  007906                     l2713:
  4646                           
  4647                           ;./functions.c: 859:         rangeArray[a][1] = (rangeArray[a][1] + rangeArray[a][2]) / 
      +                          2;
  4648  007906  501D               	movf	ranges@a,w,c
  4649  007908  0D02               	mullw	2
  4650  00790A  0E12               	movlw	low ranges@rangeArray
  4651  00790C  24F3               	addwf	prodl,w,c
  4652  00790E  6ED9               	movwf	fsr2l,c
  4653  007910  0E00               	movlw	high ranges@rangeArray
  4654  007912  20F4               	addwfc	prodh,w,c
  4655  007914  6EDA               	movwf	fsr2h,c
  4656  007916  EE10 F001          	lfsr	1,1
  4657  00791A  50DE               	movf	postinc2,w,c
  4658  00791C  26E1               	addwf	fsr1l,f,c
  4659  00791E  50DD               	movf	postdec2,w,c
  4660  007920  22E2               	addwfc	fsr1h,f,c
  4661  007922  501D               	movf	ranges@a,w,c
  4662  007924  0D02               	mullw	2
  4663  007926  0E12               	movlw	low ranges@rangeArray
  4664  007928  24F3               	addwf	prodl,w,c
  4665  00792A  6ED9               	movwf	fsr2l,c
  4666  00792C  0E00               	movlw	high ranges@rangeArray
  4667  00792E  20F4               	addwfc	prodh,w,c
  4668  007930  6EDA               	movwf	fsr2h,c
  4669  007932  EE00 F002          	lfsr	0,2
  4670  007936  50DE               	movf	postinc2,w,c
  4671  007938  26E9               	addwf	fsr0l,f,c
  4672  00793A  50DD               	movf	postdec2,w,c
  4673  00793C  22EA               	addwfc	fsr0h,f,c
  4674  00793E  50EF               	movf	indf0,w,c
  4675  007940  6E10               	movwf	??_ranges& (0+255),c
  4676  007942  501D               	movf	ranges@a,w,c
  4677  007944  0D02               	mullw	2
  4678  007946  0E12               	movlw	low ranges@rangeArray
  4679  007948  24F3               	addwf	prodl,w,c
  4680  00794A  6ED9               	movwf	fsr2l,c
  4681  00794C  0E00               	movlw	high ranges@rangeArray
  4682  00794E  20F4               	addwfc	prodh,w,c
  4683  007950  6EDA               	movwf	fsr2h,c
  4684  007952  EE00 F001          	lfsr	0,1
  4685  007956  50DE               	movf	postinc2,w,c
  4686  007958  26E9               	addwf	fsr0l,f,c
  4687  00795A  50DD               	movf	postdec2,w,c
  4688  00795C  22EA               	addwfc	fsr0h,f,c
  4689  00795E  50EF               	movf	indf0,w,c
  4690  007960  6E11               	movwf	(??_ranges+1)& (0+255),c
  4691  007962  5011               	movf	??_ranges+1,w,c
  4692  007964  2410               	addwf	??_ranges,w,c
  4693  007966  6E01               	movwf	___awdiv@dividend,c
  4694  007968  6A02               	clrf	___awdiv@dividend+1,c
  4695  00796A  3602               	rlcf	___awdiv@dividend+1,f,c
  4696  00796C  0E00               	movlw	0
  4697  00796E  6E04               	movwf	___awdiv@divisor+1,c
  4698  007970  0E02               	movlw	2
  4699  007972  6E03               	movwf	___awdiv@divisor,c
  4700  007974  ECF5  F03A         	call	___awdiv	;wreg free
  4701  007978  5001               	movf	?___awdiv,w,c
  4702  00797A  6EE7               	movwf	indf1,c
  4703                           
  4704                           ;./functions.c: 860:         for (unsigned char b = 0; b < 5; b++){
  4705  00797C  0E00               	movlw	0
  4706  00797E  6E1C               	movwf	ranges@b,c
  4707  007980                     l2721:
  4708                           
  4709                           ;./functions.c: 861:             trans(rangeArray[a][b]);
  4710  007980  501D               	movf	ranges@a,w,c
  4711  007982  0D02               	mullw	2
  4712  007984  0E12               	movlw	low ranges@rangeArray
  4713  007986  24F3               	addwf	prodl,w,c
  4714  007988  6ED9               	movwf	fsr2l,c
  4715  00798A  0E00               	movlw	high ranges@rangeArray
  4716  00798C  20F4               	addwfc	prodh,w,c
  4717  00798E  6EDA               	movwf	fsr2h,c
  4718  007990  CFDE F010          	movff	postinc2,??_ranges
  4719  007994  CFDD F011          	movff	postdec2,??_ranges+1
  4720  007998  501C               	movf	ranges@b,w,c
  4721  00799A  2410               	addwf	??_ranges,w,c
  4722  00799C  6ED9               	movwf	fsr2l,c
  4723  00799E  0E00               	movlw	0
  4724  0079A0  2011               	addwfc	??_ranges+1,w,c
  4725  0079A2  6EDA               	movwf	fsr2h,c
  4726  0079A4  50DF               	movf	indf2,w,c
  4727  0079A6  ECBF  F037         	call	_trans
  4728                           
  4729                           ;./functions.c: 862:         }
  4730  0079AA  2A1C               	incf	ranges@b,f,c
  4731  0079AC  0E04               	movlw	4
  4732  0079AE  641C               	cpfsgt	ranges@b,c
  4733  0079B0  D7E7               	goto	l2721
  4734                           
  4735                           ;./functions.c: 863:         trans('\n');
  4736  0079B2  0E0A               	movlw	10
  4737  0079B4  ECBF  F037         	call	_trans
  4738                           
  4739                           ;./functions.c: 864:     }
  4740  0079B8  2A1D               	incf	ranges@a,f,c
  4741  0079BA  0E04               	movlw	4
  4742  0079BC  641D               	cpfsgt	ranges@a,c
  4743  0079BE  D7A3               	goto	l2713
  4744                           
  4745                           ;./functions.c: 866:     writeToEEP();
  4746  0079C0  EC0C  F03A         	call	_writeToEEP	;wreg free
  4747  0079C4  0012               	return		;funcret
  4748  0079C6                     __end_of_ranges:
  4749                           	opt callstack 0
  4750                           
  4751 ;; *************** function _writeToEEP *****************
  4752 ;; Defined at:
  4753 ;;		line 882 in file "./functions.c"
  4754 ;; Parameters:    Size  Location     Type
  4755 ;;		None
  4756 ;; Auto vars:     Size  Location     Type
  4757 ;;  b               1   14[COMRAM] unsigned char 
  4758 ;;  a               1   13[COMRAM] unsigned char 
  4759 ;;  rs             10    2[COMRAM] PTR unsigned char [5]
  4760 ;;		 -> RRranges(5), Rranges(5), Mranges(5), Lranges(5), 
  4761 ;;		 -> LLranges(5), 
  4762 ;;  address         1   12[COMRAM] unsigned char 
  4763 ;; Return value:  Size  Location     Type
  4764 ;;                  1    wreg      void 
  4765 ;; Registers used:
  4766 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4767 ;; Tracked objects:
  4768 ;;		On entry : 0/0
  4769 ;;		On exit  : 0/0
  4770 ;;		Unchanged: 0/0
  4771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4772 ;;      Params:         0       0       0       0       0       0       0
  4773 ;;      Locals:        13       0       0       0       0       0       0
  4774 ;;      Temps:          2       0       0       0       0       0       0
  4775 ;;      Totals:        15       0       0       0       0       0       0
  4776 ;;Total ram usage:       15 bytes
  4777 ;; Hardware stack levels used:    1
  4778 ;; Hardware stack levels required when called:    1
  4779 ;; This function calls:
  4780 ;;		_EE_WRT
  4781 ;; This function is called by:
  4782 ;;		_ranges
  4783 ;; This function uses a non-reentrant model
  4784 ;;
  4785                           
  4786                           	psect	text33
  4787  007418                     __ptext33:
  4788                           	opt callstack 0
  4789  007418                     _writeToEEP:
  4790                           	opt callstack 26
  4791                           
  4792                           ;./functions.c: 883:     unsigned char* rs[] = {LLranges, Lranges, Mranges, Rranges, RRr
      +                          anges};
  4793                           
  4794                           ;incstack = 0
  4795  007418  EE20  F092         	lfsr	2,writeToEEP@F6091
  4796  00741C  EE10  F003         	lfsr	1,writeToEEP@rs
  4797  007420  0E09               	movlw	9
  4798  007422                     u1321:
  4799  007422  CFDB FFE3          	movff	plusw2,plusw1
  4800  007426  06E8               	decf	wreg,f,c
  4801  007428  E2FC               	bc	u1321
  4802                           
  4803                           ;./functions.c: 884:     unsigned char address = 0;
  4804  00742A  0E00               	movlw	0
  4805  00742C  6E0D               	movwf	writeToEEP@address,c
  4806                           
  4807                           ;./functions.c: 885:     for (unsigned char a = 0; a < 5; a++){
  4808  00742E  0E00               	movlw	0
  4809  007430  6E0E               	movwf	writeToEEP@a,c
  4810  007432                     l2595:
  4811                           
  4812                           ;./functions.c: 886:         for (unsigned char b = 0; b < 5; b++){
  4813  007432  0E00               	movlw	0
  4814  007434  6E0F               	movwf	writeToEEP@b,c
  4815  007436                     l511:
  4816                           
  4817                           ;./functions.c: 887:             EEADR = address++;
  4818  007436  C00D  FFA9         	movff	writeToEEP@address,4009	;volatile
  4819  00743A  2A0D               	incf	writeToEEP@address,f,c
  4820                           
  4821                           ;./functions.c: 888:             EEDATA = rs[a][b];
  4822  00743C  500E               	movf	writeToEEP@a,w,c
  4823  00743E  0D02               	mullw	2
  4824  007440  0E03               	movlw	low writeToEEP@rs
  4825  007442  24F3               	addwf	prodl,w,c
  4826  007444  6ED9               	movwf	fsr2l,c
  4827  007446  0E00               	movlw	high writeToEEP@rs
  4828  007448  20F4               	addwfc	prodh,w,c
  4829  00744A  6EDA               	movwf	fsr2h,c
  4830  00744C  CFDE F001          	movff	postinc2,??_writeToEEP
  4831  007450  CFDD F002          	movff	postdec2,??_writeToEEP+1
  4832  007454  500F               	movf	writeToEEP@b,w,c
  4833  007456  2401               	addwf	??_writeToEEP,w,c
  4834  007458  6ED9               	movwf	fsr2l,c
  4835  00745A  0E00               	movlw	0
  4836  00745C  2002               	addwfc	??_writeToEEP+1,w,c
  4837  00745E  6EDA               	movwf	fsr2h,c
  4838  007460  50DF               	movf	indf2,w,c
  4839  007462  6EA8               	movwf	4008,c	;volatile
  4840                           
  4841                           ;./functions.c: 889:             EE_WRT();
  4842  007464  EC35  F038         	call	_EE_WRT	;wreg free
  4843                           
  4844                           ;./functions.c: 890:         }
  4845  007468  2A0F               	incf	writeToEEP@b,f,c
  4846  00746A  0E04               	movlw	4
  4847  00746C  640F               	cpfsgt	writeToEEP@b,c
  4848  00746E  D7E3               	goto	l511
  4849                           
  4850                           ;./functions.c: 891:     }
  4851  007470  2A0E               	incf	writeToEEP@a,f,c
  4852  007472  0E04               	movlw	4
  4853  007474  640E               	cpfsgt	writeToEEP@a,c
  4854  007476  D7DD               	goto	l2595
  4855                           
  4856                           ;./functions.c: 892:     EECON1bits.WREN = 0;
  4857  007478  94A6               	bcf	4006,2,c	;volsfr
  4858                           
  4859                           ;./functions.c: 893:     return;
  4860  00747A  0012               	return		;funcret
  4861  00747C                     __end_of_writeToEEP:
  4862                           	opt callstack 0
  4863                           
  4864 ;; *************** function _EE_WRT *****************
  4865 ;; Defined at:
  4866 ;;		line 896 in file "./functions.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;		None
  4869 ;; Auto vars:     Size  Location     Type
  4870 ;;		None
  4871 ;; Return value:  Size  Location     Type
  4872 ;;                  1    wreg      void 
  4873 ;; Registers used:
  4874 ;;		wreg, status,2
  4875 ;; Tracked objects:
  4876 ;;		On entry : 0/0
  4877 ;;		On exit  : 0/0
  4878 ;;		Unchanged: 0/0
  4879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4880 ;;      Params:         0       0       0       0       0       0       0
  4881 ;;      Locals:         0       0       0       0       0       0       0
  4882 ;;      Temps:          0       0       0       0       0       0       0
  4883 ;;      Totals:         0       0       0       0       0       0       0
  4884 ;;Total ram usage:        0 bytes
  4885 ;; Hardware stack levels used:    1
  4886 ;; This function calls:
  4887 ;;		Nothing
  4888 ;; This function is called by:
  4889 ;;		_writeToEEP
  4890 ;; This function uses a non-reentrant model
  4891 ;;
  4892                           
  4893                           	psect	text34
  4894  00706A                     __ptext34:
  4895                           	opt callstack 0
  4896  00706A                     _EE_WRT:
  4897                           	opt callstack 26
  4898                           
  4899                           ;./functions.c: 897:     EECON1bits.EEPGD = 0;
  4900                           
  4901                           ;incstack = 0
  4902  00706A  9EA6               	bcf	4006,7,c	;volsfr
  4903                           
  4904                           ;./functions.c: 898:     EECON1bits.CFGS = 0;
  4905  00706C  9CA6               	bcf	4006,6,c	;volsfr
  4906                           
  4907                           ;./functions.c: 899:     EECON1bits.WREN = 1;
  4908  00706E  84A6               	bsf	4006,2,c	;volsfr
  4909                           
  4910                           ;./functions.c: 900:     INTCONbits.GIE = 0;
  4911  007070  9EF2               	bcf	4082,7,c	;volatile
  4912                           
  4913                           ;./functions.c: 901:     EECON2 = 0x55;
  4914  007072  0E55               	movlw	85
  4915  007074  6EA7               	movwf	4007,c	;volsfr
  4916                           
  4917                           ;./functions.c: 902:     EECON2 = 0xAA;
  4918  007076  0EAA               	movlw	170
  4919  007078  6EA7               	movwf	4007,c	;volsfr
  4920                           
  4921                           ;./functions.c: 903:     EECON1bits.WR = 1;
  4922  00707A  82A6               	bsf	4006,1,c	;volsfr
  4923                           
  4924                           ;./functions.c: 904:     INTCONbits.GIE = 1;
  4925  00707C  8EF2               	bsf	4082,7,c	;volatile
  4926  00707E                     l516:
  4927  00707E  A8A1               	btfss	4001,4,c	;volatile
  4928  007080  D7FE               	goto	l516
  4929                           
  4930                           ;./functions.c: 906:     PIR2bits.EEIF = 0;
  4931  007082  98A1               	bcf	4001,4,c	;volatile
  4932  007084  0012               	return		;funcret
  4933  007086                     __end_of_EE_WRT:
  4934                           	opt callstack 0
  4935                           
  4936 ;; *************** function ___awdiv *****************
  4937 ;; Defined at:
  4938 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  4939 ;; Parameters:    Size  Location     Type
  4940 ;;  dividend        2    0[COMRAM] int 
  4941 ;;  divisor         2    2[COMRAM] int 
  4942 ;; Auto vars:     Size  Location     Type
  4943 ;;  quotient        2    6[COMRAM] int 
  4944 ;;  sign            1    5[COMRAM] unsigned char 
  4945 ;;  counter         1    4[COMRAM] unsigned char 
  4946 ;; Return value:  Size  Location     Type
  4947 ;;                  2    0[COMRAM] int 
  4948 ;; Registers used:
  4949 ;;		wreg, status,2, status,0
  4950 ;; Tracked objects:
  4951 ;;		On entry : 0/0
  4952 ;;		On exit  : 0/0
  4953 ;;		Unchanged: 0/0
  4954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4955 ;;      Params:         4       0       0       0       0       0       0
  4956 ;;      Locals:         4       0       0       0       0       0       0
  4957 ;;      Temps:          0       0       0       0       0       0       0
  4958 ;;      Totals:         8       0       0       0       0       0       0
  4959 ;;Total ram usage:        8 bytes
  4960 ;; Hardware stack levels used:    1
  4961 ;; This function calls:
  4962 ;;		Nothing
  4963 ;; This function is called by:
  4964 ;;		_ranges
  4965 ;; This function uses a non-reentrant model
  4966 ;;
  4967                           
  4968                           	psect	text35
  4969  0075EA                     __ptext35:
  4970                           	opt callstack 0
  4971  0075EA                     ___awdiv:
  4972                           	opt callstack 27
  4973                           
  4974                           ;incstack = 0
  4975  0075EA  0E00               	movlw	0
  4976  0075EC  6E06               	movwf	___awdiv@sign,c
  4977  0075EE  AE04               	btfss	___awdiv@divisor+1,7,c
  4978  0075F0  D006               	goto	l2623
  4979  0075F2  6C03               	negf	___awdiv@divisor,c
  4980  0075F4  1E04               	comf	___awdiv@divisor+1,f,c
  4981  0075F6  B0D8               	btfsc	status,0,c
  4982  0075F8  2A04               	incf	___awdiv@divisor+1,f,c
  4983  0075FA  0E01               	movlw	1
  4984  0075FC  6E06               	movwf	___awdiv@sign,c
  4985  0075FE                     l2623:
  4986  0075FE  AE02               	btfss	___awdiv@dividend+1,7,c
  4987  007600  D006               	goto	l2629
  4988  007602  6C01               	negf	___awdiv@dividend,c
  4989  007604  1E02               	comf	___awdiv@dividend+1,f,c
  4990  007606  B0D8               	btfsc	status,0,c
  4991  007608  2A02               	incf	___awdiv@dividend+1,f,c
  4992  00760A  0E01               	movlw	1
  4993  00760C  1A06               	xorwf	___awdiv@sign,f,c
  4994  00760E                     l2629:
  4995  00760E  0E00               	movlw	0
  4996  007610  6E08               	movwf	___awdiv@quotient+1,c
  4997  007612  0E00               	movlw	0
  4998  007614  6E07               	movwf	___awdiv@quotient,c
  4999  007616  5003               	movf	___awdiv@divisor,w,c
  5000  007618  1004               	iorwf	___awdiv@divisor+1,w,c
  5001  00761A  B4D8               	btfsc	status,2,c
  5002  00761C  D01C               	goto	l2651
  5003  00761E  0E01               	movlw	1
  5004  007620  6E05               	movwf	___awdiv@counter,c
  5005  007622  D004               	goto	l2637
  5006  007624                     l2635:
  5007  007624  90D8               	bcf	status,0,c
  5008  007626  3603               	rlcf	___awdiv@divisor,f,c
  5009  007628  3604               	rlcf	___awdiv@divisor+1,f,c
  5010  00762A  2A05               	incf	___awdiv@counter,f,c
  5011  00762C                     l2637:
  5012  00762C  AE04               	btfss	___awdiv@divisor+1,7,c
  5013  00762E  D7FA               	goto	l2635
  5014  007630                     u1380:
  5015  007630  90D8               	bcf	status,0,c
  5016  007632  3607               	rlcf	___awdiv@quotient,f,c
  5017  007634  3608               	rlcf	___awdiv@quotient+1,f,c
  5018  007636  5003               	movf	___awdiv@divisor,w,c
  5019  007638  5C01               	subwf	___awdiv@dividend,w,c
  5020  00763A  5004               	movf	___awdiv@divisor+1,w,c
  5021  00763C  5802               	subwfb	___awdiv@dividend+1,w,c
  5022  00763E  A0D8               	btfss	status,0,c
  5023  007640  D005               	goto	l2647
  5024  007642  5003               	movf	___awdiv@divisor,w,c
  5025  007644  5E01               	subwf	___awdiv@dividend,f,c
  5026  007646  5004               	movf	___awdiv@divisor+1,w,c
  5027  007648  5A02               	subwfb	___awdiv@dividend+1,f,c
  5028  00764A  8007               	bsf	___awdiv@quotient,0,c
  5029  00764C                     l2647:
  5030  00764C  90D8               	bcf	status,0,c
  5031  00764E  3204               	rrcf	___awdiv@divisor+1,f,c
  5032  007650  3203               	rrcf	___awdiv@divisor,f,c
  5033  007652  2E05               	decfsz	___awdiv@counter,f,c
  5034  007654  D7ED               	goto	u1380
  5035  007656                     l2651:
  5036  007656  5006               	movf	___awdiv@sign,w,c
  5037  007658  B4D8               	btfsc	status,2,c
  5038  00765A  D004               	goto	l2655
  5039  00765C  6C07               	negf	___awdiv@quotient,c
  5040  00765E  1E08               	comf	___awdiv@quotient+1,f,c
  5041  007660  B0D8               	btfsc	status,0,c
  5042  007662  2A08               	incf	___awdiv@quotient+1,f,c
  5043  007664                     l2655:
  5044  007664  C007  F001         	movff	___awdiv@quotient,?___awdiv
  5045  007668  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  5046  00766C  0012               	return		;funcret
  5047  00766E                     __end_of___awdiv:
  5048                           	opt callstack 0
  5049                           
  5050 ;; *************** function _aveSensor *****************
  5051 ;; Defined at:
  5052 ;;		line 833 in file "./functions.c"
  5053 ;; Parameters:    Size  Location     Type
  5054 ;;  s               1    wreg     unsigned char 
  5055 ;; Auto vars:     Size  Location     Type
  5056 ;;  s               1    5[COMRAM] unsigned char 
  5057 ;;  a               1    9[COMRAM] unsigned char 
  5058 ;;  measurements    2    6[COMRAM] unsigned int 
  5059 ;;  result          1    8[COMRAM] unsigned char 
  5060 ;; Return value:  Size  Location     Type
  5061 ;;                  1    wreg      unsigned char 
  5062 ;; Registers used:
  5063 ;;		wreg, status,2, status,0, cstack
  5064 ;; Tracked objects:
  5065 ;;		On entry : 0/0
  5066 ;;		On exit  : 0/0
  5067 ;;		Unchanged: 0/0
  5068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5069 ;;      Params:         0       0       0       0       0       0       0
  5070 ;;      Locals:         5       0       0       0       0       0       0
  5071 ;;      Temps:          2       0       0       0       0       0       0
  5072 ;;      Totals:         7       0       0       0       0       0       0
  5073 ;;Total ram usage:        7 bytes
  5074 ;; Hardware stack levels used:    1
  5075 ;; Hardware stack levels required when called:    1
  5076 ;; This function calls:
  5077 ;;		_readADC
  5078 ;;		_setADCChannel
  5079 ;; This function is called by:
  5080 ;;		_calibrate
  5081 ;;		_capTouch
  5082 ;;		_readAllSensors
  5083 ;; This function uses a non-reentrant model
  5084 ;;
  5085                           
  5086                           	psect	text36
  5087  007268                     __ptext36:
  5088                           	opt callstack 0
  5089  007268                     _aveSensor:
  5090                           	opt callstack 26
  5091                           
  5092                           ;incstack = 0
  5093                           ;aveSensor@s stored from wreg
  5094  007268  6E06               	movwf	aveSensor@s,c
  5095                           
  5096                           ;./functions.c: 833: unsigned char aveSensor(unsigned char s);./functions.c: 834: {;./fu
      +                          nctions.c: 835:     setADCChannel(s);
  5097  00726A  5006               	movf	aveSensor@s,w,c
  5098  00726C  ECB3  F03A         	call	_setADCChannel
  5099                           
  5100                           ;./functions.c: 836:     unsigned int measurements = 0;
  5101  007270  0E00               	movlw	0
  5102  007272  6E08               	movwf	aveSensor@measurements+1,c
  5103  007274  0E00               	movlw	0
  5104  007276  6E07               	movwf	aveSensor@measurements,c
  5105                           
  5106                           ;./functions.c: 838:     for (unsigned char a = 0; a < 8; a++)
  5107  007278  0E00               	movlw	0
  5108  00727A  6E0A               	movwf	aveSensor@a,c
  5109  00727C                     l2523:
  5110                           
  5111                           ;./functions.c: 839:     {;./functions.c: 840:         measurements += readADC();
  5112  00727C  ECAB  F037         	call	_readADC	;wreg free
  5113  007280  6E04               	movwf	??_aveSensor& (0+255),c
  5114  007282  5004               	movf	??_aveSensor,w,c
  5115  007284  2607               	addwf	aveSensor@measurements,f,c
  5116  007286  0E00               	movlw	0
  5117  007288  2208               	addwfc	aveSensor@measurements+1,f,c
  5118                           
  5119                           ;./functions.c: 841:     }
  5120  00728A  2A0A               	incf	aveSensor@a,f,c
  5121  00728C  0E07               	movlw	7
  5122  00728E  640A               	cpfsgt	aveSensor@a,c
  5123  007290  D7F5               	goto	l2523
  5124                           
  5125                           ;./functions.c: 843:     unsigned char result = measurements / 8;
  5126  007292  C007  F004         	movff	aveSensor@measurements,??_aveSensor
  5127  007296  C008  F005         	movff	aveSensor@measurements+1,??_aveSensor+1
  5128  00729A  90D8               	bcf	status,0,c
  5129  00729C  3205               	rrcf	??_aveSensor+1,f,c
  5130  00729E  3204               	rrcf	??_aveSensor,f,c
  5131  0072A0  90D8               	bcf	status,0,c
  5132  0072A2  3205               	rrcf	??_aveSensor+1,f,c
  5133  0072A4  3204               	rrcf	??_aveSensor,f,c
  5134  0072A6  90D8               	bcf	status,0,c
  5135  0072A8  3205               	rrcf	??_aveSensor+1,f,c
  5136  0072AA  3204               	rrcf	??_aveSensor,f,c
  5137  0072AC  5004               	movf	??_aveSensor,w,c
  5138  0072AE  6E09               	movwf	aveSensor@result,c
  5139                           
  5140                           ;./functions.c: 845:     return result;
  5141  0072B0  5009               	movf	aveSensor@result,w,c
  5142  0072B2  0012               	return		;funcret
  5143  0072B4                     __end_of_aveSensor:
  5144                           	opt callstack 0
  5145                           
  5146 ;; *************** function _setADCChannel *****************
  5147 ;; Defined at:
  5148 ;;		line 782 in file "./functions.c"
  5149 ;; Parameters:    Size  Location     Type
  5150 ;;  channel         1    wreg     unsigned char 
  5151 ;; Auto vars:     Size  Location     Type
  5152 ;;  channel         1    2[COMRAM] unsigned char 
  5153 ;; Return value:  Size  Location     Type
  5154 ;;                  1    wreg      void 
  5155 ;; Registers used:
  5156 ;;		wreg, status,2, status,0
  5157 ;; Tracked objects:
  5158 ;;		On entry : 0/0
  5159 ;;		On exit  : 0/0
  5160 ;;		Unchanged: 0/0
  5161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5162 ;;      Params:         0       0       0       0       0       0       0
  5163 ;;      Locals:         1       0       0       0       0       0       0
  5164 ;;      Temps:          2       0       0       0       0       0       0
  5165 ;;      Totals:         3       0       0       0       0       0       0
  5166 ;;Total ram usage:        3 bytes
  5167 ;; Hardware stack levels used:    1
  5168 ;; This function calls:
  5169 ;;		Nothing
  5170 ;; This function is called by:
  5171 ;;		_aveSensor
  5172 ;; This function uses a non-reentrant model
  5173 ;;
  5174                           
  5175                           	psect	text37
  5176  007566                     __ptext37:
  5177                           	opt callstack 0
  5178  007566                     _setADCChannel:
  5179                           	opt callstack 26
  5180                           
  5181                           ;incstack = 0
  5182                           ;setADCChannel@channel stored from wreg
  5183  007566  6E03               	movwf	setADCChannel@channel,c
  5184                           
  5185                           ;./functions.c: 782: void setADCChannel(unsigned char channel);./functions.c: 783: {;./f
      +                          unctions.c: 784:     ADCON0bits.CHS = channel;
  5186  007568  C003  F001         	movff	setADCChannel@channel,??_setADCChannel
  5187  00756C  4601               	rlncf	??_setADCChannel,f,c
  5188  00756E  4601               	rlncf	??_setADCChannel,f,c
  5189  007570  50C2               	movf	4034,w,c	;volatile
  5190  007572  1801               	xorwf	??_setADCChannel,w,c
  5191  007574  0B83               	andlw	-125
  5192  007576  1801               	xorwf	??_setADCChannel,w,c
  5193  007578  6EC2               	movwf	4034,c	;volatile
  5194                           
  5195                           ;./functions.c: 786:     switch (channel)
  5196  00757A  D01C               	goto	l2493
  5197  00757C                     l469:
  5198                           
  5199                           ;./functions.c: 789:         TRISBbits.TRISB2 = 1;
  5200  00757C  8493               	bsf	3987,2,c	;volatile
  5201                           
  5202                           ;./functions.c: 790:         ANSELBbits.ANSB2 = 1;
  5203  00757E  010F               	movlb	15	; () banked
  5204  007580  8539               	bsf	57,2,b	;volatile
  5205                           
  5206                           ;./functions.c: 791:         break;
  5207  007582  0012               	return	
  5208  007584                     l471:
  5209                           
  5210                           ;./functions.c: 793:         TRISBbits.TRISB3 = 1;
  5211  007584  8693               	bsf	3987,3,c	;volatile
  5212                           
  5213                           ;./functions.c: 794:         ANSELBbits.ANSB3 = 1;
  5214  007586  010F               	movlb	15	; () banked
  5215  007588  8739               	bsf	57,3,b	;volatile
  5216                           
  5217                           ;./functions.c: 795:         break;
  5218  00758A  0012               	return	
  5219  00758C                     l472:
  5220                           
  5221                           ;./functions.c: 797:         TRISBbits.TRISB1 = 1;
  5222  00758C  8293               	bsf	3987,1,c	;volatile
  5223                           
  5224                           ;./functions.c: 798:         ANSELBbits.ANSB1 = 1;
  5225  00758E  010F               	movlb	15	; () banked
  5226  007590  8339               	bsf	57,1,b	;volatile
  5227                           
  5228                           ;./functions.c: 799:         break;
  5229  007592  0012               	return	
  5230  007594                     l473:
  5231                           
  5232                           ;./functions.c: 801:         TRISBbits.TRISB0 = 1;
  5233  007594  8093               	bsf	3987,0,c	;volatile
  5234                           
  5235                           ;./functions.c: 802:         ANSELBbits.ANSB0 = 1;
  5236  007596  010F               	movlb	15	; () banked
  5237  007598  8139               	bsf	57,0,b	;volatile
  5238                           
  5239                           ;./functions.c: 803:         break;
  5240  00759A  0012               	return	
  5241  00759C                     l474:
  5242                           
  5243                           ;./functions.c: 805:         TRISBbits.TRISB5 = 1;
  5244  00759C  8A93               	bsf	3987,5,c	;volatile
  5245                           
  5246                           ;./functions.c: 806:         ANSELBbits.ANSB5 = 1;
  5247  00759E  010F               	movlb	15	; () banked
  5248  0075A0  8B39               	bsf	57,5,b	;volatile
  5249                           
  5250                           ;./functions.c: 807:         break;
  5251  0075A2  0012               	return	
  5252  0075A4                     l475:
  5253                           
  5254                           ;./functions.c: 809:         TRISCbits.TRISC3 = 1;
  5255  0075A4  8694               	bsf	3988,3,c	;volatile
  5256                           
  5257                           ;./functions.c: 810:         ANSELCbits.ANSC3 = 1;
  5258  0075A6  010F               	movlb	15	; () banked
  5259  0075A8  873A               	bsf	58,3,b	;volatile
  5260                           
  5261                           ;./functions.c: 811:         break;
  5262  0075AA  0012               	return	
  5263  0075AC                     l476:
  5264                           
  5265                           ;./functions.c: 814:         TRISBbits.TRISB0 = 1;
  5266  0075AC  8093               	bsf	3987,0,c	;volatile
  5267                           
  5268                           ;./functions.c: 815:         ANSELBbits.ANSB0 = 1;
  5269  0075AE  010F               	movlb	15	; () banked
  5270  0075B0  8139               	bsf	57,0,b	;volatile
  5271                           
  5272                           ;./functions.c: 816:         break;
  5273  0075B2  0012               	return	
  5274  0075B4                     l2493:
  5275  0075B4  5003               	movf	setADCChannel@channel,w,c
  5276  0075B6  6E01               	movwf	??_setADCChannel& (0+255),c
  5277  0075B8  6A02               	clrf	(??_setADCChannel+1)& (0+255),c
  5278                           
  5279                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5280                           ; Switch size 1, requested type "simple"
  5281                           ; Number of cases is 1, Range of values is 0 to 0
  5282                           ; switch strategies available:
  5283                           ; Name         Instructions Cycles
  5284                           ; simple_byte            4     3 (average)
  5285                           ;	Chosen strategy is simple_byte
  5286  0075BA  5002               	movf	??_setADCChannel+1,w,c
  5287  0075BC  0A00               	xorlw	0	; case 0
  5288  0075BE  A4D8               	btfss	status,2,c
  5289  0075C0  D7F5               	goto	l476
  5290                           
  5291                           ; Switch size 1, requested type "simple"
  5292                           ; Number of cases is 6, Range of values is 8 to 15
  5293                           ; switch strategies available:
  5294                           ; Name         Instructions Cycles
  5295                           ; simple_byte           19    10 (average)
  5296                           ;	Chosen strategy is simple_byte
  5297  0075C2  5001               	movf	??_setADCChannel,w,c
  5298  0075C4  0A08               	xorlw	8	; case 8
  5299  0075C6  B4D8               	btfsc	status,2,c
  5300  0075C8  D7D9               	goto	l469
  5301  0075CA  0A01               	xorlw	1	; case 9
  5302  0075CC  B4D8               	btfsc	status,2,c
  5303  0075CE  D7DA               	goto	l471
  5304  0075D0  0A03               	xorlw	3	; case 10
  5305  0075D2  B4D8               	btfsc	status,2,c
  5306  0075D4  D7DB               	goto	l472
  5307  0075D6  0A06               	xorlw	6	; case 12
  5308  0075D8  B4D8               	btfsc	status,2,c
  5309  0075DA  D7DC               	goto	l473
  5310  0075DC  0A01               	xorlw	1	; case 13
  5311  0075DE  B4D8               	btfsc	status,2,c
  5312  0075E0  D7DD               	goto	l474
  5313  0075E2  0A02               	xorlw	2	; case 15
  5314  0075E4  B4D8               	btfsc	status,2,c
  5315  0075E6  D7DE               	goto	l475
  5316  0075E8  D7E1               	goto	l476
  5317  0075EA                     __end_of_setADCChannel:
  5318                           	opt callstack 0
  5319                           
  5320 ;; *************** function _readADC *****************
  5321 ;; Defined at:
  5322 ;;		line 823 in file "./functions.c"
  5323 ;; Parameters:    Size  Location     Type
  5324 ;;		None
  5325 ;; Auto vars:     Size  Location     Type
  5326 ;;		None
  5327 ;; Return value:  Size  Location     Type
  5328 ;;                  1    wreg      unsigned char 
  5329 ;; Registers used:
  5330 ;;		wreg, status,2
  5331 ;; Tracked objects:
  5332 ;;		On entry : 0/0
  5333 ;;		On exit  : 0/0
  5334 ;;		Unchanged: 0/0
  5335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5336 ;;      Params:         0       0       0       0       0       0       0
  5337 ;;      Locals:         0       0       0       0       0       0       0
  5338 ;;      Temps:          0       0       0       0       0       0       0
  5339 ;;      Totals:         0       0       0       0       0       0       0
  5340 ;;Total ram usage:        0 bytes
  5341 ;; Hardware stack levels used:    1
  5342 ;; This function calls:
  5343 ;;		Nothing
  5344 ;; This function is called by:
  5345 ;;		_aveSensor
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           	psect	text38
  5350  006F56                     __ptext38:
  5351                           	opt callstack 0
  5352  006F56                     _readADC:
  5353                           	opt callstack 26
  5354                           
  5355                           ;./functions.c: 825:     ADCON0bits.GO = 1;
  5356                           
  5357                           ; BSR set to: 15
  5358                           ;incstack = 0
  5359  006F56  82C2               	bsf	4034,1,c	;volatile
  5360  006F58                     l480:
  5361                           
  5362                           ;./functions.c: 827:     while (ADCON0bits.GO)
  5363  006F58  B2C2               	btfsc	4034,1,c	;volatile
  5364  006F5A  D7FE               	goto	l480
  5365                           
  5366                           ;./functions.c: 829:     return ADRESH;
  5367  006F5C  50C4               	movf	4036,w,c	;volatile
  5368  006F5E  0012               	return		;funcret
  5369  006F60                     __end_of_readADC:
  5370                           	opt callstack 0
  5371                           
  5372 ;; *************** function _PRC *****************
  5373 ;; Defined at:
  5374 ;;		line 318 in file "./functions.c"
  5375 ;; Parameters:    Size  Location     Type
  5376 ;;		None
  5377 ;; Auto vars:     Size  Location     Type
  5378 ;;  a               1   56[COMRAM] unsigned char 
  5379 ;;  a               1   55[COMRAM] unsigned char 
  5380 ;;  a               1   54[COMRAM] unsigned char 
  5381 ;;  a               1   53[COMRAM] unsigned char 
  5382 ;;  a               1   52[COMRAM] unsigned char 
  5383 ;;  a               1   51[COMRAM] unsigned char 
  5384 ;;  a               1   50[COMRAM] unsigned char 
  5385 ;;  a               1   49[COMRAM] unsigned char 
  5386 ;;  a               1   48[COMRAM] unsigned char 
  5387 ;;  message        32   11[COMRAM] unsigned char [32]
  5388 ;;  message2        5   43[COMRAM] unsigned char [5]
  5389 ;; Return value:  Size  Location     Type
  5390 ;;                  1    wreg      void 
  5391 ;; Registers used:
  5392 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5393 ;; Tracked objects:
  5394 ;;		On entry : 0/0
  5395 ;;		On exit  : 0/0
  5396 ;;		Unchanged: 0/0
  5397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5398 ;;      Params:         0       0       0       0       0       0       0
  5399 ;;      Locals:        46       0       0       0       0       0       0
  5400 ;;      Temps:          2       0       0       0       0       0       0
  5401 ;;      Totals:        48       0       0       0       0       0       0
  5402 ;;Total ram usage:       48 bytes
  5403 ;; Hardware stack levels used:    1
  5404 ;; Hardware stack levels required when called:    2
  5405 ;; This function calls:
  5406 ;;		_error
  5407 ;;		_trans
  5408 ;; This function is called by:
  5409 ;;		_RCE
  5410 ;; This function uses a non-reentrant model
  5411 ;;
  5412                           
  5413                           	psect	text39
  5414  007BC0                     __ptext39:
  5415                           	opt callstack 0
  5416  007BC0                     _PRC:
  5417                           	opt callstack 27
  5418                           
  5419                           ;./functions.c: 320:     PORTD = 0b11111001;
  5420                           
  5421                           ;incstack = 0
  5422  007BC0  0EF9               	movlw	249
  5423  007BC2  6E83               	movwf	3971,c	;volatile
  5424  007BC4                     l3229:
  5425                           
  5426                           ;./functions.c: 322:     {;./functions.c: 323:         unsigned char message[] = "\nWhat
      +                           color should sanic race?\n";
  5427  007BC4  EE21  F000         	lfsr	2,PRC@F6027
  5428  007BC8  EE10  F00C         	lfsr	1,PRC@message
  5429  007BCC  0E1F               	movlw	31
  5430  007BCE                     u2151:
  5431  007BCE  CFDB FFE3          	movff	plusw2,plusw1
  5432  007BD2  06E8               	decf	wreg,f,c
  5433  007BD4  E2FC               	bc	u2151
  5434                           
  5435                           ;./functions.c: 324:         unsigned char message2[] = "\nSet";
  5436  007BD6  EE20  F0D0         	lfsr	2,PRC@F6029
  5437  007BDA  EE10  F02C         	lfsr	1,PRC@message2
  5438  007BDE  0E04               	movlw	4
  5439  007BE0                     u2161:
  5440  007BE0  CFDB FFE3          	movff	plusw2,plusw1
  5441  007BE4  06E8               	decf	wreg,f,c
  5442  007BE6  E2FC               	bc	u2161
  5443                           
  5444                           ;./functions.c: 326:         for (unsigned char a = 0; a < 31; a++)
  5445  007BE8  0E00               	movlw	0
  5446  007BEA  6E31               	movwf	PRC@a,c
  5447  007BEC                     l3237:
  5448                           
  5449                           ;./functions.c: 327:         {;./functions.c: 328:             trans(message[a]);
  5450  007BEC  0E0C               	movlw	low PRC@message
  5451  007BEE  2431               	addwf	PRC@a,w,c
  5452  007BF0  6ED9               	movwf	fsr2l,c
  5453  007BF2  6ADA               	clrf	fsr2h,c
  5454  007BF4  0E00               	movlw	high PRC@message
  5455  007BF6  22DA               	addwfc	fsr2h,f,c
  5456  007BF8  50DF               	movf	indf2,w,c
  5457  007BFA  ECBF  F037         	call	_trans
  5458                           
  5459                           ;./functions.c: 329:         }
  5460  007BFE  2A31               	incf	PRC@a,f,c
  5461  007C00  0E1E               	movlw	30
  5462  007C02  6431               	cpfsgt	PRC@a,c
  5463  007C04  D7F3               	goto	l3237
  5464  007C06                     u2170:
  5465  007C06  BA9E               	btfsc	3998,5,c	;volatile
  5466  007C08  D088               	goto	l3353
  5467  007C0A  D7FD               	goto	u2170
  5468  007C0C                     l3243:
  5469                           
  5470                           ;./functions.c: 335:             for (unsigned char a = 0; a < 8; a++)
  5471  007C0C  0E00               	movlw	0
  5472  007C0E  6E32               	movwf	PRC@a_1265,c
  5473  007C10                     l3249:
  5474                           
  5475                           ;./functions.c: 336:             {;./functions.c: 337:                 raceColor[a] = 0;
  5476  007C10  0EBA               	movlw	low _raceColor
  5477  007C12  2432               	addwf	PRC@a_1265,w,c
  5478  007C14  6ED9               	movwf	fsr2l,c
  5479  007C16  6ADA               	clrf	fsr2h,c
  5480  007C18  0E00               	movlw	high _raceColor
  5481  007C1A  22DA               	addwfc	fsr2h,f,c
  5482  007C1C  0E00               	movlw	0
  5483  007C1E  6EDF               	movwf	indf2,c
  5484                           
  5485                           ;./functions.c: 338:             }
  5486  007C20  2A32               	incf	PRC@a_1265,f,c
  5487  007C22  0E07               	movlw	7
  5488  007C24  6432               	cpfsgt	PRC@a_1265,c
  5489  007C26  D7F4               	goto	l3249
  5490                           
  5491                           ;./functions.c: 339:             raceColor[3] = 1;
  5492  007C28  0E01               	movlw	1
  5493  007C2A  0100               	movlb	0	; () banked
  5494  007C2C  6FBD               	movwf	(_raceColor+3)& (0+255),b
  5495                           
  5496                           ;./functions.c: 340:             for (unsigned char a = 0; a < 4; a++)
  5497  007C2E  0E00               	movlw	0
  5498  007C30  6E33               	movwf	PRC@a_1266,c
  5499  007C32                     l3261:
  5500                           
  5501                           ;./functions.c: 341:             {;./functions.c: 342:                 trans(message2[a]
      +                          );
  5502  007C32  0E2C               	movlw	low PRC@message2
  5503  007C34  2433               	addwf	PRC@a_1266,w,c
  5504  007C36  6ED9               	movwf	fsr2l,c
  5505  007C38  6ADA               	clrf	fsr2h,c
  5506  007C3A  0E00               	movlw	high PRC@message2
  5507  007C3C  22DA               	addwfc	fsr2h,f,c
  5508  007C3E  50DF               	movf	indf2,w,c
  5509  007C40  ECBF  F037         	call	_trans
  5510                           
  5511                           ;./functions.c: 343:             }
  5512  007C44  2A33               	incf	PRC@a_1266,f,c
  5513  007C46  0E03               	movlw	3
  5514  007C48  6433               	cpfsgt	PRC@a_1266,c
  5515  007C4A  D7F3               	goto	l3261
  5516  007C4C  0012               	return	
  5517  007C4E                     l3269:
  5518                           
  5519                           ;./functions.c: 347:             for (unsigned char a = 0; a < 8; a++)
  5520  007C4E  0E00               	movlw	0
  5521  007C50  6E34               	movwf	PRC@a_1267,c
  5522  007C52                     l3275:
  5523                           
  5524                           ;./functions.c: 348:             {;./functions.c: 349:                 raceColor[a] = 0;
  5525  007C52  0EBA               	movlw	low _raceColor
  5526  007C54  2434               	addwf	PRC@a_1267,w,c
  5527  007C56  6ED9               	movwf	fsr2l,c
  5528  007C58  6ADA               	clrf	fsr2h,c
  5529  007C5A  0E00               	movlw	high _raceColor
  5530  007C5C  22DA               	addwfc	fsr2h,f,c
  5531  007C5E  0E00               	movlw	0
  5532  007C60  6EDF               	movwf	indf2,c
  5533                           
  5534                           ;./functions.c: 350:             }
  5535  007C62  2A34               	incf	PRC@a_1267,f,c
  5536  007C64  0E07               	movlw	7
  5537  007C66  6434               	cpfsgt	PRC@a_1267,c
  5538  007C68  D7F4               	goto	l3275
  5539                           
  5540                           ;./functions.c: 351:             raceColor[1] = 1;
  5541  007C6A  0E01               	movlw	1
  5542  007C6C  0100               	movlb	0	; () banked
  5543  007C6E  6FBB               	movwf	(_raceColor+1)& (0+255),b
  5544                           
  5545                           ;./functions.c: 352:             for (unsigned char a = 0; a < 4; a++)
  5546  007C70  0E00               	movlw	0
  5547  007C72  6E35               	movwf	PRC@a_1268,c
  5548  007C74                     l3287:
  5549                           
  5550                           ;./functions.c: 353:             {;./functions.c: 354:                 trans(message2[a]
      +                          );
  5551  007C74  0E2C               	movlw	low PRC@message2
  5552  007C76  2435               	addwf	PRC@a_1268,w,c
  5553  007C78  6ED9               	movwf	fsr2l,c
  5554  007C7A  6ADA               	clrf	fsr2h,c
  5555  007C7C  0E00               	movlw	high PRC@message2
  5556  007C7E  22DA               	addwfc	fsr2h,f,c
  5557  007C80  50DF               	movf	indf2,w,c
  5558  007C82  ECBF  F037         	call	_trans
  5559                           
  5560                           ;./functions.c: 355:             }
  5561  007C86  2A35               	incf	PRC@a_1268,f,c
  5562  007C88  0E03               	movlw	3
  5563  007C8A  6435               	cpfsgt	PRC@a_1268,c
  5564  007C8C  D7F3               	goto	l3287
  5565  007C8E  0012               	return	
  5566  007C90                     l3295:
  5567                           
  5568                           ;./functions.c: 359:             for (unsigned char a = 0; a < 8; a++)
  5569  007C90  0E00               	movlw	0
  5570  007C92  6E36               	movwf	PRC@a_1269,c
  5571  007C94                     l3301:
  5572                           
  5573                           ;./functions.c: 360:             {;./functions.c: 361:                 raceColor[a] = 0;
  5574  007C94  0EBA               	movlw	low _raceColor
  5575  007C96  2436               	addwf	PRC@a_1269,w,c
  5576  007C98  6ED9               	movwf	fsr2l,c
  5577  007C9A  6ADA               	clrf	fsr2h,c
  5578  007C9C  0E00               	movlw	high _raceColor
  5579  007C9E  22DA               	addwfc	fsr2h,f,c
  5580  007CA0  0E00               	movlw	0
  5581  007CA2  6EDF               	movwf	indf2,c
  5582                           
  5583                           ;./functions.c: 362:             }
  5584  007CA4  2A36               	incf	PRC@a_1269,f,c
  5585  007CA6  0E07               	movlw	7
  5586  007CA8  6436               	cpfsgt	PRC@a_1269,c
  5587  007CAA  D7F4               	goto	l3301
  5588                           
  5589                           ;./functions.c: 363:             raceColor[2] = 1;
  5590  007CAC  0E01               	movlw	1
  5591  007CAE  0100               	movlb	0	; () banked
  5592  007CB0  6FBC               	movwf	(_raceColor+2)& (0+255),b
  5593                           
  5594                           ;./functions.c: 364:             for (unsigned char a = 0; a < 4; a++)
  5595  007CB2  0E00               	movlw	0
  5596  007CB4  6E37               	movwf	PRC@a_1270,c
  5597  007CB6                     l3313:
  5598                           
  5599                           ;./functions.c: 365:             {;./functions.c: 366:                 trans(message2[a]
      +                          );
  5600  007CB6  0E2C               	movlw	low PRC@message2
  5601  007CB8  2437               	addwf	PRC@a_1270,w,c
  5602  007CBA  6ED9               	movwf	fsr2l,c
  5603  007CBC  6ADA               	clrf	fsr2h,c
  5604  007CBE  0E00               	movlw	high PRC@message2
  5605  007CC0  22DA               	addwfc	fsr2h,f,c
  5606  007CC2  50DF               	movf	indf2,w,c
  5607  007CC4  ECBF  F037         	call	_trans
  5608                           
  5609                           ;./functions.c: 367:             }
  5610  007CC8  2A37               	incf	PRC@a_1270,f,c
  5611  007CCA  0E03               	movlw	3
  5612  007CCC  6437               	cpfsgt	PRC@a_1270,c
  5613  007CCE  D7F3               	goto	l3313
  5614  007CD0  0012               	return	
  5615  007CD2                     l3321:
  5616                           
  5617                           ;./functions.c: 371:             for (unsigned char a = 0; a < 8; a++)
  5618  007CD2  0E00               	movlw	0
  5619  007CD4  6E38               	movwf	PRC@a_1271,c
  5620  007CD6                     l3327:
  5621                           
  5622                           ;./functions.c: 372:             {;./functions.c: 373:                 raceColor[a] = 0;
  5623  007CD6  0EBA               	movlw	low _raceColor
  5624  007CD8  2438               	addwf	PRC@a_1271,w,c
  5625  007CDA  6ED9               	movwf	fsr2l,c
  5626  007CDC  6ADA               	clrf	fsr2h,c
  5627  007CDE  0E00               	movlw	high _raceColor
  5628  007CE0  22DA               	addwfc	fsr2h,f,c
  5629  007CE2  0E00               	movlw	0
  5630  007CE4  6EDF               	movwf	indf2,c
  5631                           
  5632                           ;./functions.c: 374:             }
  5633  007CE6  2A38               	incf	PRC@a_1271,f,c
  5634  007CE8  0E07               	movlw	7
  5635  007CEA  6438               	cpfsgt	PRC@a_1271,c
  5636  007CEC  D7F4               	goto	l3327
  5637                           
  5638                           ;./functions.c: 375:             raceColor[4] = 1;
  5639  007CEE  0E01               	movlw	1
  5640  007CF0  0100               	movlb	0	; () banked
  5641  007CF2  6FBE               	movwf	(_raceColor+4)& (0+255),b
  5642                           
  5643                           ;./functions.c: 376:             for (unsigned char a = 0; a < 4; a++)
  5644  007CF4  0E00               	movlw	0
  5645  007CF6  6E39               	movwf	PRC@a_1272,c
  5646  007CF8                     l3339:
  5647                           
  5648                           ;./functions.c: 377:             {;./functions.c: 378:                 trans(message2[a]
      +                          );
  5649  007CF8  0E2C               	movlw	low PRC@message2
  5650  007CFA  2439               	addwf	PRC@a_1272,w,c
  5651  007CFC  6ED9               	movwf	fsr2l,c
  5652  007CFE  6ADA               	clrf	fsr2h,c
  5653  007D00  0E00               	movlw	high PRC@message2
  5654  007D02  22DA               	addwfc	fsr2h,f,c
  5655  007D04  50DF               	movf	indf2,w,c
  5656  007D06  ECBF  F037         	call	_trans
  5657                           
  5658                           ;./functions.c: 379:             }
  5659  007D0A  2A39               	incf	PRC@a_1272,f,c
  5660  007D0C  0E03               	movlw	3
  5661  007D0E  6439               	cpfsgt	PRC@a_1272,c
  5662  007D10  D7F3               	goto	l3339
  5663  007D12  0012               	return	
  5664  007D14                     l3347:
  5665                           
  5666                           ;./functions.c: 384:             error();
  5667  007D14  ECD5  F038         	call	_error	;wreg free
  5668                           
  5669                           ;./functions.c: 385:             continue;
  5670  007D18  D755               	goto	l3229
  5671  007D1A                     l3353:
  5672  007D1A  50AE               	movf	4014,w,c	;volatile
  5673  007D1C  6E0A               	movwf	??_PRC& (0+255),c
  5674  007D1E  6A0B               	clrf	(??_PRC+1)& (0+255),c
  5675                           
  5676                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5677                           ; Switch size 1, requested type "simple"
  5678                           ; Number of cases is 1, Range of values is 0 to 0
  5679                           ; switch strategies available:
  5680                           ; Name         Instructions Cycles
  5681                           ; simple_byte            4     3 (average)
  5682                           ;	Chosen strategy is simple_byte
  5683  007D20  500B               	movf	??_PRC+1,w,c
  5684  007D22  0A00               	xorlw	0	; case 0
  5685  007D24  A4D8               	btfss	status,2,c
  5686  007D26  D7F6               	goto	l3347
  5687                           
  5688                           ; Switch size 1, requested type "simple"
  5689                           ; Number of cases is 4, Range of values is 66 to 110
  5690                           ; switch strategies available:
  5691                           ; Name         Instructions Cycles
  5692                           ; simple_byte           13     7 (average)
  5693                           ;	Chosen strategy is simple_byte
  5694  007D28  500A               	movf	??_PRC,w,c
  5695  007D2A  0A42               	xorlw	66	; case 66
  5696  007D2C  B4D8               	btfsc	status,2,c
  5697  007D2E  D76E               	goto	l3243
  5698  007D30  0A05               	xorlw	5	; case 71
  5699  007D32  B4D8               	btfsc	status,2,c
  5700  007D34  D78C               	goto	l3269
  5701  007D36  0A15               	xorlw	21	; case 82
  5702  007D38  B4D8               	btfsc	status,2,c
  5703  007D3A  D7AA               	goto	l3295
  5704  007D3C  0A3C               	xorlw	60	; case 110
  5705  007D3E  B4D8               	btfsc	status,2,c
  5706  007D40  D7C8               	goto	l3321
  5707  007D42  D7E8               	goto	l3347
  5708  007D44                     __end_of_PRC:
  5709                           	opt callstack 0
  5710                           
  5711 ;; *************** function _error *****************
  5712 ;; Defined at:
  5713 ;;		line 870 in file "./functions.c"
  5714 ;; Parameters:    Size  Location     Type
  5715 ;;		None
  5716 ;; Auto vars:     Size  Location     Type
  5717 ;;  a               1    8[COMRAM] unsigned char 
  5718 ;;  message         7    1[COMRAM] unsigned char [7]
  5719 ;; Return value:  Size  Location     Type
  5720 ;;                  1    wreg      void 
  5721 ;; Registers used:
  5722 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5723 ;; Tracked objects:
  5724 ;;		On entry : 0/0
  5725 ;;		On exit  : 0/0
  5726 ;;		Unchanged: 0/0
  5727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5728 ;;      Params:         0       0       0       0       0       0       0
  5729 ;;      Locals:         8       0       0       0       0       0       0
  5730 ;;      Temps:          0       0       0       0       0       0       0
  5731 ;;      Totals:         8       0       0       0       0       0       0
  5732 ;;Total ram usage:        8 bytes
  5733 ;; Hardware stack levels used:    1
  5734 ;; Hardware stack levels required when called:    1
  5735 ;; This function calls:
  5736 ;;		_trans
  5737 ;; This function is called by:
  5738 ;;		_PRC
  5739 ;;		_RCE
  5740 ;; This function uses a non-reentrant model
  5741 ;;
  5742                           
  5743                           	psect	text40
  5744  0071AA                     __ptext40:
  5745                           	opt callstack 0
  5746  0071AA                     _error:
  5747                           	opt callstack 28
  5748                           
  5749                           ;./functions.c: 872:     unsigned char message[] = "ERROR\n";
  5750                           
  5751                           ;incstack = 0
  5752  0071AA  EE20  F0C3         	lfsr	2,error@F6087
  5753  0071AE  EE10  F002         	lfsr	1,error@message
  5754  0071B2  0E06               	movlw	6
  5755  0071B4                     u1451:
  5756  0071B4  CFDB FFE3          	movff	plusw2,plusw1
  5757  0071B8  06E8               	decf	wreg,f,c
  5758  0071BA  E2FC               	bc	u1451
  5759                           
  5760                           ;./functions.c: 874:     for (unsigned char a = 0; a < 6; a++)
  5761  0071BC  0E00               	movlw	0
  5762  0071BE  6E09               	movwf	error@a,c
  5763  0071C0                     l2757:
  5764                           
  5765                           ;./functions.c: 875:     {;./functions.c: 876:         trans(message[a]);
  5766  0071C0  0E02               	movlw	low error@message
  5767  0071C2  2409               	addwf	error@a,w,c
  5768  0071C4  6ED9               	movwf	fsr2l,c
  5769  0071C6  6ADA               	clrf	fsr2h,c
  5770  0071C8  0E00               	movlw	high error@message
  5771  0071CA  22DA               	addwfc	fsr2h,f,c
  5772  0071CC  50DF               	movf	indf2,w,c
  5773  0071CE  ECBF  F037         	call	_trans
  5774                           
  5775                           ;./functions.c: 877:     }
  5776  0071D2  2A09               	incf	error@a,f,c
  5777  0071D4  0E05               	movlw	5
  5778  0071D6  6409               	cpfsgt	error@a,c
  5779  0071D8  D7F3               	goto	l2757
  5780                           
  5781                           ;./functions.c: 879:     RCREG = 0;
  5782  0071DA  0E00               	movlw	0
  5783  0071DC  6EAE               	movwf	4014,c	;volatile
  5784  0071DE  0012               	return		;funcret
  5785  0071E0                     __end_of_error:
  5786                           	opt callstack 0
  5787                           
  5788 ;; *************** function _trans *****************
  5789 ;; Defined at:
  5790 ;;		line 766 in file "./functions.c"
  5791 ;; Parameters:    Size  Location     Type
  5792 ;;  s               1    wreg     unsigned char 
  5793 ;; Auto vars:     Size  Location     Type
  5794 ;;  s               1    0[COMRAM] unsigned char 
  5795 ;; Return value:  Size  Location     Type
  5796 ;;                  1    wreg      void 
  5797 ;; Registers used:
  5798 ;;		wreg
  5799 ;; Tracked objects:
  5800 ;;		On entry : 0/0
  5801 ;;		On exit  : 0/0
  5802 ;;		Unchanged: 0/0
  5803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5804 ;;      Params:         0       0       0       0       0       0       0
  5805 ;;      Locals:         1       0       0       0       0       0       0
  5806 ;;      Temps:          0       0       0       0       0       0       0
  5807 ;;      Totals:         1       0       0       0       0       0       0
  5808 ;;Total ram usage:        1 bytes
  5809 ;; Hardware stack levels used:    1
  5810 ;; This function calls:
  5811 ;;		Nothing
  5812 ;; This function is called by:
  5813 ;;		_PRC
  5814 ;;		_pyCal
  5815 ;;		_capTouch
  5816 ;;		_ranges
  5817 ;;		_error
  5818 ;;		_RCE
  5819 ;; This function uses a non-reentrant model
  5820 ;;
  5821                           
  5822                           	psect	text41
  5823  006F7E                     __ptext41:
  5824                           	opt callstack 0
  5825  006F7E                     _trans:
  5826                           	opt callstack 29
  5827                           
  5828                           ;incstack = 0
  5829                           ;trans@s stored from wreg
  5830  006F7E  6E01               	movwf	trans@s,c
  5831  006F80                     
  5832                           ;./functions.c: 768:     while (!PIR1bits.TX1IF)
  5833                           
  5834                           ;./functions.c: 769:         ;
  5835  006F80  A89E               	btfss	3998,4,c	;volatile
  5836  006F82  D7FE               	goto	l2535
  5837                           
  5838                           ;./functions.c: 770:     TXREG = s;
  5839  006F84  C001  FFAD         	movff	trans@s,4013	;volatile
  5840  006F88  0012               	return		;funcret
  5841  006F8A                     __end_of_trans:
  5842                           	opt callstack 0
  5843  0000                     
  5844                           	psect	rparam
  5845  0000                     tosu	equ	0xFFF
  5846                           tosh	equ	0xFFE
  5847                           tosl	equ	0xFFD
  5848                           stkptr	equ	0xFFC
  5849                           pclatu	equ	0xFFB
  5850                           pclath	equ	0xFFA
  5851                           pcl	equ	0xFF9
  5852                           tblptru	equ	0xFF8
  5853                           tblptrh	equ	0xFF7
  5854                           tblptrl	equ	0xFF6
  5855                           tablat	equ	0xFF5
  5856                           prodh	equ	0xFF4
  5857                           prodl	equ	0xFF3
  5858                           indf0	equ	0xFEF
  5859                           postinc0	equ	0xFEE
  5860                           postdec0	equ	0xFED
  5861                           preinc0	equ	0xFEC
  5862                           plusw0	equ	0xFEB
  5863                           fsr0h	equ	0xFEA
  5864                           fsr0l	equ	0xFE9
  5865                           wreg	equ	0xFE8
  5866                           indf1	equ	0xFE7
  5867                           postinc1	equ	0xFE6
  5868                           postdec1	equ	0xFE5
  5869                           preinc1	equ	0xFE4
  5870                           plusw1	equ	0xFE3
  5871                           fsr1h	equ	0xFE2
  5872                           fsr1l	equ	0xFE1
  5873                           bsr	equ	0xFE0
  5874                           indf2	equ	0xFDF
  5875                           postinc2	equ	0xFDE
  5876                           postdec2	equ	0xFDD
  5877                           preinc2	equ	0xFDC
  5878                           plusw2	equ	0xFDB
  5879                           fsr2h	equ	0xFDA
  5880                           fsr2l	equ	0xFD9
  5881                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        181
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     79      92
    BANK0           160      0     142
    BANK1           256      0      32
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    readFromEEP@rs	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(BANK0[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(COMRAM[5]), 

    readFromEEP@F6098	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(BANK0[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(COMRAM[5]), 

    writeToEEP@rs	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(BANK0[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(COMRAM[5]), 

    writeToEEP@F6091	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(BANK0[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(COMRAM[5]), 

    ranges@rangeArray	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(BANK0[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(COMRAM[5]), 

    ranges@F6082	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(BANK0[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(COMRAM[5]), 

    classifyColors@sensorRanges	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(BANK0[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(COMRAM[5]), 

    classifyColors@F6061	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(BANK0[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(COMRAM[5]), 

    calibrate@rangeArray	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(BANK0[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(COMRAM[5]), 

    calibrate@F6016	PTR unsigned char [5] size(2) Largest target is 5
		 -> RRranges(BANK0[5]), Rranges(BANK0[5]), Mranges(BANK0[5]), Lranges(BANK0[5]), 
		 -> LLranges(COMRAM[5]), 


Critical Paths under _main in COMRAM

    _main->_RCE
    _init->_readFromEEP
    _RCE->_PRC
    _pyCal->_readAllSensors
    _navigate->_readAllSensors
    _readAllSensors->_aveSensor
    _capTouch->_aveSensor
    _calibrate->_ranges
    _sixSecDelay->_msDelay
    _ranges->_writeToEEP
    _aveSensor->_setADCChannel
    _PRC->_error
    _error->_trans

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6704
                                _RCE
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     184
                         _clearPorts
                        _readFromEEP
                           _setupADC
                           _setupOSC
                        _setupSerial
 ---------------------------------------------------------------------------------
 (2) _setupSerial                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setupOSC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _readFromEEP                                         15    15      0     184
                                              0 COMRAM    15    15      0
                            _EE_READ
 ---------------------------------------------------------------------------------
 (3) _EE_READ                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _clearPorts                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RCE                                                 22    22      0    6520
                                             57 COMRAM    22    22      0
                                _PRC
                          _calibrate
                           _capTouch
                              _error
                           _navigate
                              _pyCal
                              _trans
 ---------------------------------------------------------------------------------
 (2) _pyCal                                                2     2      0     896
                                             18 COMRAM     2     2      0
                            _msDelay
                     _readAllSensors
                           _setupADC
                              _trans
 ---------------------------------------------------------------------------------
 (2) _navigate                                             0     0      0    1140
                     _classifyColors
                 _determineDirection
               _displayColorDetected
                   _displayRaceColor
                     _readAllSensors
                           _setupADC
                       _setupPWMLeft
                      _setupPWMRight
                         _stopMotors
                          _testBlack
 ---------------------------------------------------------------------------------
 (3) _testBlack                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _stopMotors                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _setupPWMRight                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _setupPWMLeft                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _setupADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _readAllSensors                                       8     8      0     782
                                             10 COMRAM     8     8      0
                                _abs
                          _aveSensor
 ---------------------------------------------------------------------------------
 (3) _displayRaceColor                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _displayColorDetected                                 3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _determineDirection                                   0     0      0       0
                           _hardLeft
                          _hardRight
                               _left
                              _right
                         _searchMode
                           _straight
 ---------------------------------------------------------------------------------
 (4) _straight                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _searchMode                                           0     0      0       0
                        _timer1setup
 ---------------------------------------------------------------------------------
 (5) _timer1setup                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _right                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _left                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _hardRight                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _hardLeft                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _classifyColors                                      15    15      0     336
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 (2) _capTouch                                            31    31      0     564
                                             10 COMRAM    31    31      0
                                _abs
                          _aveSensor
                            _msDelay
                              _trans
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     218
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _calibrate                                           20    20      0    2642
                                             29 COMRAM    20    20      0
                          _aveSensor
                             _ranges
                        _sixSecDelay
 ---------------------------------------------------------------------------------
 (3) _sixSecDelay                                          1     1      0      68
                                              1 COMRAM     1     1      0
                            _msDelay
 ---------------------------------------------------------------------------------
 (3) _msDelay                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _ranges                                              14    14      0     899
                                             15 COMRAM    14    14      0
                            ___awdiv
                              _trans
                         _writeToEEP
 ---------------------------------------------------------------------------------
 (4) _writeToEEP                                          15    15      0     184
                                              0 COMRAM    15    15      0
                             _EE_WRT
 ---------------------------------------------------------------------------------
 (5) _EE_WRT                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     398
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (4) _aveSensor                                            7     7      0     159
                                              3 COMRAM     7     7      0
                            _readADC
                      _setADCChannel
 ---------------------------------------------------------------------------------
 (5) _setADCChannel                                        3     3      0      44
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) _readADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PRC                                                 48    48      0     865
                                              9 COMRAM    48    48      0
                              _error
                              _trans
 ---------------------------------------------------------------------------------
 (2) _error                                                8     8      0     114
                                              1 COMRAM     8     8      0
                              _trans
 ---------------------------------------------------------------------------------
 (2) _trans                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _RCE
     _PRC
       _error
         _trans
       _trans
     _calibrate
       _aveSensor
         _readADC
         _setADCChannel
       _ranges
         ___awdiv
         _trans
         _writeToEEP
           _EE_WRT
       _sixSecDelay
         _msDelay
     _capTouch
       _abs
       _aveSensor
         _readADC
         _setADCChannel
       _msDelay
       _trans
     _error
       _trans
     _navigate
       _classifyColors
       _determineDirection
         _hardLeft
         _hardRight
         _left
         _right
         _searchMode
           _timer1setup
         _straight
       _displayColorDetected
       _displayRaceColor
       _readAllSensors
         _abs
         _aveSensor
           _readADC
           _setADCChannel
       _setupADC
       _setupPWMLeft
       _setupPWMRight
       _stopMotors
       _testBlack
     _pyCal
       _msDelay
       _readAllSensors
         _abs
         _aveSensor
           _readADC
           _setADCChannel
       _setupADC
       _trans
     _trans
   _init
     _clearPorts
     _readFromEEP
       _EE_READ
     _setupADC
     _setupOSC
     _setupSerial

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      20       6       12.5%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      8E       4       88.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4F      5C       1       96.8%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10A       9        0.0%
DATA                 0      0     10A      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon May 27 02:24:19 2019

               _colorsDetected 00E9                  capTouch@F6045 0060                   ___awdiv@sign 0006  
             readFromEEP@F6098 0088                   __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000  
                 __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000                    __CFG_LVP$ON 000000  
                          l350 6FC8                            l430 7702                            l511 7436  
                          l351 6FC2                            l431 770E                            l344 74EC  
                          l432 771A                            l433 7726                            l434 7732  
                          l516 707E                            l428 76F6                            l526 73D6  
                          l471 7584                            l480 6F58                            l472 758C  
                          l473 7594                            l377 76A4                            l474 759C  
                          l475 75A4                            l539 70B4                            l571 7B20  
                          l476 75AC                            l556 6F7C                            l469 757C  
                          l577 7B30                   __CFG_CPB$OFF 000000                            _RCE 7ABA  
                          _PR2 000FBB                            _PR4 000F52                   __CFG_CPD$OFF 000000  
                          _PR6 000F4B                            _PRC 7BC0                            _abs 7178  
                          _col 0055                            prod 000FF3                            wreg 000FE8  
              __end_of_EE_READ 6F6A                ??_setupPWMRight 0001                           ?_RCE 0001  
                         ?_PRC 0001                           RCE@a 004E                           PRC@a 0031  
                         ?_abs 0001                           l3011 7DAA                           l1270 71A0  
                         l3301 7C94                           l3143 7F12                           l3055 7E22  
                         l3321 7CD2                           l3313 7CB6                           l3243 7C0C  
                         l2523 727C                           l3261 7C32                           l3237 7BEC  
                         l3229 7BC4                           l2535 6F80                           l3327 7CD6  
                         l2623 75FE                           l3415 725C                           l3503 7AD4  
                         l3249 7C10                           l3353 7D1A                           l2721 7980  
                         l2713 7906                           l3521 7B1A                           l3513 7AFE  
                         l3347 7D14                           l3339 7CF8                           l3275 7C52  
                         l2635 7624                           l2651 7656                           l3187 7F8A  
                         l3099 7E9A                           l2811 7212                           l2803 71FA  
                         l3363 72BC                           l3269 7C4E                           l2493 75B4  
                         l2637 762C                           l2629 760E                           l3437 74B4  
                         l3429 7492                           l3541 7B60                           l3533 7B46  
                         l3517 7B0C                           l3295 7C90                           l3287 7C74  
                         l2655 7664                           l2647 764C                           l2743 6FAC  
                         l2807 7206                           l3543 7B66                           l3551 7BA2  
                         l3535 7B4E                           l3463 73D2                           l2833 7A60  
                         l2825 79DC                           l2913 7316                           l3377 72CA  
                         l3545 7B6C                           l3537 7B54                           l2595 7432  
                         l2771 7808                           l3395 722E                           l3539 7B5A  
                         l2757 71C0                           l2837 7AA0                           l2829 7A20  
                         l3557 7BA6                           l3549 7B72                           l2863 768A  
                         l2847 773E                           l2791 78D0                           l2783 7834  
                         l2891 76DE                           l2883 76C2                           l2867 7694  
                         l2859 7680                           l2991 7D62                           l2895 76EC  
                         l2887 76D0                           l2879 76B4                           l2799 71EE  
                         l2985 7D5E                           u1300 7186                           u1321 7422  
                         u1411 78E4                           _LATA 000F89                           _LATB 000F8A  
                         u2151 7BCE                           _LATC 000F8B                           _LATD 000F8C  
                         _FSR0 000FE9                           u2161 7BE0                           _LATE 000F8D  
                         u2170 7C06                           u2330 7256                           u1451 71B4  
                         u2411 7AC8                           u1380 7630                           u2351 7486  
                         u1640 7690                           u1480 7894                           u1561 79D0  
                         u1730 7312                           u1821 7D52                           u2381 73C0  
                         _TMR1 000FCE                           _TMR2 000FBC                           _TMR4 000F53  
                         _TMR6 000F4C                           abs@a 0001                           _main 6F74  
                         _left 701C                           _init 7086                           _size 0056  
                         fsr0h 000FEA                           fsr1h 000FE2                           indf0 000FEF  
                         fsr2h 000FDA                           fsr0l 000FE9                           indf1 000FE7  
                         indf2 000FDF                           fsr1l 000FE1                           fsr2l 000FD9  
                __CFG_BORV$190 000000                           prodl 000FF3                           start 0000  
                __CFG_IESO$OFF 000000          ?_displayColorDetected 0001                   ___param_bank 000000  
               capTouch@touch1 0027                 capTouch@touch2 0028                          ??_RCE 003A  
                        ??_PRC 000A                          ??_abs 0003                   ?_readFromEEP 0001  
                 _BAUDCON1bits 000FB8                          ?_main 0001                          ?_left 0001  
                        ?_init 0001                __end_of___awdiv 766E                          _EEADR 000FA9  
              ___awdiv@divisor 0003                          _T1CON 000FCD                          _T2CON 000FBA  
                        _T4CON 000F51                          _T6CON 000F4A                ___awdiv@counter 0005  
                        _RCREG 000FAE                          _PORTA 000F80                          _PORTB 000F81  
                        _PORTC 000F82                          _PORTD 000F83                          _PORTE 000F84  
                        _TRISA 000F92                          _TRISB 000F93                          _TRISC 000F94  
                        _TRISD 000F95                          _TRISE 000F96                          _TXREG 000FAD  
       __size_of_setADCChannel 0084                  __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000  
                __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000                 __CFG_EBTR0$OFF 000000  
               __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000                 __CFG_EBTR2$OFF 000000  
               __CFG_EBTR3$OFF 000000                  __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000  
                __CFG_WRTD$OFF 000000                __end_of_msDelay 70C2                __end_of_readADC 6F60  
               __CFG_EBTRB$OFF 000000                          _error 71AA                          _pyCal 72B4  
                        _right 7036             __CFG_MCLRE$EXTMCLR 000000                          _trans 6F7E  
                        tablat 000FF5                          plusw1 000FE3                          plusw2 000FDB  
                        status 000FD8                 __CFG_HFOFST$ON 000000                 __CFG_PBADEN$ON 000000  
              capTouch@message 000B                __initialization 74EE                   __end_of_main 6F7E  
                 __end_of_left 7036                   __end_of_init 70A2                  calibrate@temp 0031  
           readFromEEP@address 000D                         ??_main 0050                         ??_left 0001  
                       ??_init 0010                      ??_EE_READ 0001                  __activetblptr 000002  
                       _ADCON1 000FC1                         ?_error 0001                         ?_pyCal 0001  
                       _ADRESH 000FC4                         _EEDATA 000FA8                         _CCPR1L 000FBE  
                       _CCPR5L 000F55                         _EECON2 000FA7    __size_of_determineDirection 0084  
                       ?_right 0001               ___awdiv@dividend 0001                         ?_trans 0001  
                       _ANSELA 000F38                         _ANSELB 000F39                         _ANSELC 000F3A  
                       _ANSELD 000F3B                         _ANSELE 000F3C               calibrate@samples 002A  
                       _EE_WRT 706A                 __CFG_WDTEN$OFF 000000                         _RCSTA1 000FAB  
                       _SPBRG1 000FAF               __end_of_capTouch 74EE   readAllSensors@tempSensorVals 000D  
                       _TXSTA1 000FAC         ??_displayColorDetected 0001                  _setADCChannel 7566  
             __end_of_hardLeft 7002                 __CFG_XINST$OFF 000000              writeToEEP@address 000D  
                 ?_sixSecDelay 0001                      ??___awdiv 0005                 __CFG_STVREN$ON 000000  
                 ?_timer1setup 0001                         _ranges 78DA               __end_of_navigate 7268  
             ___awdiv@quotient 0007                classifyColors@a 000F        __size_of_readAllSensors 00D6  
                    ??_msDelay 0001                      ??_readADC 0001                         error@a 0009  
                       pyCal@a 0014                   __pdataCOMRAM 0050               __end_of_setupADC 7104  
             __end_of_setupOSC 6F74                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8             RCE@commandReceived 004A                         trans@s 0001  
                 ?_setupSerial 0001               __end_of_straight 706A                     __accesstop 0060  
      __end_of__initialization 755C                 ?_setADCChannel 0001                  ___rparam_used 000001  
            ?_displayRaceColor 0001                 __pcstackCOMRAM 0001                 calibrate@F6016 00B0  
                  ranges@F6082 009C             __size_of_calibrate 02BC                   __pidataBANK0 777B  
                 __pidataBANK1 70C2             ??_displayRaceColor 0001           setADCChannel@channel 0003  
                __end_of_error 71E0                  __end_of_pyCal 7302                  __end_of_right 7050  
                __end_of_trans 6F8A                      RCE@a_1463 004F           __size_of_readFromEEP 0062  
           __size_of_aveSensor 004C             __size_of_hardRight 001A                        ??_error 0002  
                      ??_pyCal 0013                        ??_right 0001                        ??_trans 0001  
                   __pbssBANK0 00E9                        ?_EE_WRT 0001                __CFG_PLLCFG$OFF 000000  
                    PRC@a_1270 0037                      PRC@a_1271 0038                      PRC@a_1272 0039  
                    PRC@a_1265 0032                      PRC@a_1266 0033                      PRC@a_1267 0034  
                    PRC@a_1268 0035                      PRC@a_1269 0036                     _clearPorts 735C  
           __CFG_CCP2MX$PORTC1 000000        __size_of_classifyColors 00F4             __CFG_CCP3MX$PORTB5 000000  
                      _CCP1CON 000FBD                        _CCP5CON 000F54                        ?_ranges 0001  
           __size_of_testBlack 005A                        _EE_READ 6F60                      ?_capTouch 0001  
                    ?_hardLeft 0001                        _SPBRGH1 000FB0              __end_of_calibrate 8000  
   displayColorDetected@sensor 0003                   readFromEEP@a 000E                   readFromEEP@b 000F  
        __end_of_setupPWMRight 7148                __size_of_EE_WRT 001C                ??_setADCChannel 0001  
                    ?_navigate 0001                    PRC@message2 002C              __end_of_aveSensor 72B4  
            __end_of_hardRight 701C                     calibrate@a 002F                     calibrate@b 0030  
              __CFG_PWRTEN$OFF 000000                        _Lranges 00E4                        __Hparam 0000  
                      _Mranges 00DF                        __Lparam 0000            calibrate@rangeArray 0020  
                    ?_setupADC 0001                        _Rranges 00DA              RCE@nCharsReceived 004D  
                    ?_setupOSC 0001                        ___awdiv 75EA                   error@message 0002  
         __size_of_sixSecDelay 0014                      ?_straight 0001                        __pcinit 74EE  
                      __ramtop 0600                __size_of_ranges 00EC                        __ptext0 6F74  
                      __ptext1 7086                        __ptext2 7148                        __ptext3 6F6A  
                      __ptext4 73B6                        __ptext5 6F60                        __ptext6 735C  
                      __ptext7 7ABA                        __ptext8 72B4                        __ptext9 721E  
               _readAllSensors 7804               ranges@rangeArray 0012                        _msDelay 70A2  
                      _readADC 6F56                   __size_of_RCE 0106                   __size_of_PRC 0184  
                    _T1CONbits 000FCD           __size_of_timer1setup 0018                     ??_capTouch 000B  
                    _T2CONbits 000FBA                   __size_of_abs 0032                      _T4CONbits 000F51  
                   ??_hardLeft 0001                     _searchMode 6FBC           end_of_initialization 755C  
         __size_of_setupSerial 0030                  __Lmediumconst 0000                     ??_navigate 0013  
                      ranges@a 001D                        ranges@b 001C                  ?_setupPWMLeft 0001  
            __end_of_testBlack 735C                    ?_clearPorts 0001                     aveSensor@a 000A  
                   aveSensor@s 0006                     ??_setupADC 0001                     ??_setupOSC 0001  
                      postdec1 000FE5                        postdec2 000FDD                        postinc0 000FEE  
                      postinc1 000FE6                        postinc2 000FDE                   writeToEEP@rs 0003  
                   _sensorVals 0050         __end_of_readAllSensors 78DA                     ??_straight 0001  
                    _PORTAbits 000F80                      _PORTCbits 000F82                      _PORTEbits 000F84  
          classifyColors@F6061 00A6     __end_of_determineDirection 76F2                      _TRISBbits 000F93  
                    _TRISCbits 000F94                      _TRISEbits 000F96          aveSensor@measurements 0007  
               ??_setupPWMLeft 0001               msDelay@delayInMs 0001                 __end_of_EE_WRT 7086  
                   _stopMotors 6F96  __size_of_displayColorDetected 0088                 _classifyColors 79C6  
                   _writeToEEP 7418                ?_readAllSensors 0001                  __pidataCOMRAM 6F8A  
               __end_of_ranges 79C6            start_initialization 74EE      __size_of_displayRaceColor 003E  
                  __end_of_RCE 7BC0                    __end_of_PRC 7D44            __size_of_clearPorts 005A  
                  __end_of_abs 71AA                    ?_searchMode 0001                       ??_EE_WRT 0001  
                   error@F6087 00C3         __end_of_classifyColors 7ABA                 _sensorChannels 00CA  
                ??_readFromEEP 0001                     RCE@message 003C                    __pdataBANK0 0060  
                  __pdataBANK1 0100                       ??_ranges 0010                       ?_EE_READ 0001  
                     RCE@F6117 007A                    __pbssCOMRAM 005C              __size_of_capTouch 0072  
            __size_of_hardLeft 001A     classifyColors@sensorRanges 0005                       PRC@F6027 0100  
                     PRC@F6029 00D0                      _calibrate 7D44                    ?_stopMotors 0001  
              ?_classifyColors 0001              __size_of_navigate 004A                      _aveSensor 7268  
                    _hardRight 7002                       ?___awdiv 0001                    ?_writeToEEP 0001  
          __size_of_searchMode 0014              __size_of_setupADC 0022              __size_of_setupOSC 000A  
             __CFG_PRICLKEN$ON 000000           __end_of_setupPWMLeft 7126                       ?_msDelay 0001  
                    capTouch@a 0029                       ?_readADC 0001              __size_of_straight 001A  
          __end_of_readFromEEP 7418                     PRC@message 000C                      _raceColor 00BA  
                     _CCPTMRS0 000F49                       _CCPTMRS1 000F48          calibrate@samples_1255 002B  
        calibrate@samples_1256 002C          calibrate@samples_1257 002D          calibrate@samples_1258 002E  
               __size_of_error 0036                 __size_of_pyCal 004E                 __size_of_right 001A  
               __size_of_trans 000C                     ?_calibrate 0001          __end_of_setADCChannel 75EA  
                     _PIE1bits 000F9D                       _PIE5bits 000F7D                   ??_clearPorts 0001  
                     _PIR1bits 000F9E                       _PIR2bits 000FA1                       _PIR5bits 000F7E  
                    _testBlack 7302                  ??_sixSecDelay 0002               __CFG_WDTPS$32768 000000  
                  writeToEEP@a 000E                    writeToEEP@b 000F                     ?_aveSensor 0001  
                   ?_hardRight 0001                  ??_timer1setup 0001         __size_of_setupPWMRight 0022  
                   _ADCON0bits 000FC2                     _ADCON2bits 000FC0                  readFromEEP@rs 0003  
              readAllSensors@a 0012                       _LLranges 0057               __size_of_EE_READ 000A  
             _displayRaceColor 71E0            __size_of_stopMotors 0012                  ??_setupSerial 0001  
           __end_of_clearPorts 73B6                      copy_data0 7502                      copy_data1 7522  
                    copy_data2 7542                       _RRranges 00D5                writeToEEP@F6091 0092  
          __size_of_writeToEEP 0064                     _EECON1bits 000FA6             _determineDirection 766E  
                     __Hrparam 0000               ??_readAllSensors 000B                       __Lrparam 0000  
           __CFG_BOREN$SBORDIS 000000                     ?_testBlack 0001              __CFG_P2BMX$PORTD2 000000  
          ?_determineDirection 0001                    _readFromEEP 73B6               __size_of___awdiv 0084  
                   _ANSELBbits 000F39            __end_of_sixSecDelay 6FBC                     _ANSELCbits 000F3A  
                     _capTouch 747C               __size_of_msDelay 0020               __size_of_readADC 000A  
 __end_of_displayColorDetected 777A            __end_of_timer1setup 6FE8                       _hardLeft 6FE8  
                     __ptext10 7302                       __ptext11 6F96                       __ptext20 6FBC  
                     __ptext12 7126                       __ptext21 6FD0                       __ptext13 7104  
                     __ptext30 6FA8                       __ptext22 7036                       __ptext14 70E2  
                     __ptext31 70A2                       __ptext23 701C                       __ptext15 7804  
                     __ptext40 71AA                       __ptext32 78DA                       __ptext24 7002  
                     __ptext16 71E0                       __ptext41 6F7E                       __ptext33 7418  
                     __ptext25 6FE8                       __ptext17 76F2                       __ptext34 706A  
                     __ptext26 79C6                       __ptext18 766E                       __ptext35 75EA  
                     __ptext27 747C                       __ptext19 7050                       __ptext36 7268  
                     __ptext28 7178                   ??_searchMode 0001                       __ptext37 7566  
                     __ptext29 7D44                       __ptext38 6F56                       __ptext39 7BC0  
         ??_determineDirection 0001                  _setupPWMRight 7126                    ??_calibrate 001E  
                __size_of_main 000A                  __size_of_left 001A                  __size_of_init 001C  
                     _navigate 721E            __end_of_setupSerial 7178                       _setupADC 70E2  
                     _setupOSC 6F6A                    ??_aveSensor 0004                    ??_hardRight 0001  
        __size_of_setupPWMLeft 0022             __end_of_searchMode 6FD0                       _straight 7050  
                 sixSecDelay@a 0002                     _INTCONbits 000FF2           determineDirection@rc 005C  
             ??_classifyColors 0001                 ?_setupPWMRight 0001                   _setupPWMLeft 7104  
                 ??_stopMotors 0001                     _OSCCONbits 000FD3                    ??_testBlack 0001  
                  _sixSecDelay 6FA8                   ??_writeToEEP 0001                    _timer1setup 6FD0  
              aveSensor@result 0009              __CFG_T3CMX$PORTC0 000000             __end_of_stopMotors 6FA8  
                  _setupSerial 7148             __end_of_writeToEEP 747C              __CFG_FOSC$INTIO67 000000  
     __end_of_displayRaceColor 721E           _displayColorDetected 76F2  
